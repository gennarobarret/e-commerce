{"ast":null,"code":"// import { Injectable } from '@angular/core';\n// import { Observable } from 'rxjs';\n// import { GLOBAL } from '../config/GLOBAL';\n// import { HttpClient, HttpHeaders } from '@angular/common/http';\n// import { JwtHelperService } from '@auth0/angular-jwt';\n// import { Router } from '@angular/router';\nimport { __decorate } from \"tslib\";\nlet AuthService = class AuthService {\n  constructor(_http, _router) {\n    this._http = _http;\n    this._router = _router;\n    this.url = GLOBAL.url;\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  isAuthenticated(allowRoles) {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      return false;\n    }\n    try {\n      const helper = new JwtHelperService();\n      const decodedToken = helper.decodeToken(token);\n      if (!decodedToken || !decodedToken['role']) {\n        localStorage.removeItem('token');\n        return false;\n      }\n      return allowRoles.includes(decodedToken['role']);\n    } catch (error) {\n      console.error('Error decoding token:', error);\n      localStorage.removeItem('token');\n      return false;\n    }\n  }\n  check_admin_exists() {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.get(this.url + 'check_admin_exists', {\n      headers: headers\n    });\n  }\n  createAdmin(data) {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.post(this.url + 'create_admin', data, {\n      headers: headers\n    });\n  }\n  login_admin(data) {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.post(this.url + 'login_admin', data, {\n      headers: headers\n    });\n  }\n  get_admin(token) {\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': token\n    });\n    return this._http.get(this.url + 'get_admin', {\n      headers: headers\n    });\n  }\n  logout() {\n    localStorage.removeItem('token');\n    this._router.navigate(['/login']);\n  }\n};\nAuthService = __decorate([Injectable({\n  providedIn: 'root'\n})], AuthService);\nexport { AuthService };","map":{"version":3,"names":["AuthService","constructor","_http","_router","url","GLOBAL","getToken","localStorage","getItem","isAuthenticated","allowRoles","token","helper","JwtHelperService","decodedToken","decodeToken","removeItem","includes","error","console","check_admin_exists","headers","HttpHeaders","set","get","createAdmin","data","post","login_admin","get_admin","logout","navigate","__decorate","Injectable","providedIn"],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\core\\auth\\auth.service.ts"],"sourcesContent":["// import { Injectable } from '@angular/core';\n// import { Observable } from 'rxjs';\n// import { GLOBAL } from '../config/GLOBAL';\n// import { HttpClient, HttpHeaders } from '@angular/common/http';\n// import { JwtHelperService } from '@auth0/angular-jwt';\n// import { Router } from '@angular/router';\n\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n\n  public url;\n\n  constructor(private _http: HttpClient, private _router: Router) {\n    this.url = GLOBAL.url;\n  }\n\n  getToken() {\n    return localStorage.getItem('token');\n  }\n\n  public isAuthenticated(allowRoles: string[]): boolean {\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const helper = new JwtHelperService();\n      const decodedToken = helper.decodeToken(token);\n\n      if (!decodedToken || !decodedToken['role']) {\n        localStorage.removeItem('token');\n        return false;\n      }\n      return allowRoles.includes(decodedToken['role']);\n    } catch (error) {\n      console.error('Error decoding token:', error);\n      localStorage.removeItem('token');\n      return false;\n    }\n  }\n\n  check_admin_exists(): Observable<any> {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.get<any>(this.url + 'check_admin_exists', { headers: headers });\n  }\n\n  createAdmin(data: any): Observable<any> {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.post(this.url + 'create_admin', data, { headers: headers });\n}\n\n  login_admin(data: { email: any; password: any }): Observable<any> {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.post(this.url + 'login_admin', data, {\n      headers: headers,\n    });\n  }\n\n  get_admin(token: any): Observable<any> {\n    let headers = new HttpHeaders({ 'Content-Type': 'application/json', 'Authorization': token });\n    return this._http.get(this.url + 'get_admin', { headers: headers });\n  }\n\n  logout(): void {\n    localStorage.removeItem('token');\n    this._router.navigate(['/login']);\n  }\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAMA,IAAaA,WAAW,GAAxB,MAAaA,WAAW;EAItBC,YAAoBC,KAAiB,EAAUC,OAAe;IAA1C,KAAAD,KAAK,GAALA,KAAK;IAAsB,KAAAC,OAAO,GAAPA,OAAO;IACpD,IAAI,CAACC,GAAG,GAAGC,MAAM,CAACD,GAAG;EACvB;EAEAE,QAAQA,CAAA;IACN,OAAOC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACtC;EAEOC,eAAeA,CAACC,UAAoB;IACzC,MAAMC,KAAK,GAAGJ,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAE3C,IAAI,CAACG,KAAK,EAAE;MACV,OAAO,KAAK;;IAGd,IAAI;MACF,MAAMC,MAAM,GAAG,IAAIC,gBAAgB,EAAE;MACrC,MAAMC,YAAY,GAAGF,MAAM,CAACG,WAAW,CAACJ,KAAK,CAAC;MAE9C,IAAI,CAACG,YAAY,IAAI,CAACA,YAAY,CAAC,MAAM,CAAC,EAAE;QAC1CP,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;QAChC,OAAO,KAAK;;MAEd,OAAON,UAAU,CAACO,QAAQ,CAACH,YAAY,CAAC,MAAM,CAAC,CAAC;KACjD,CAAC,OAAOI,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7CX,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;MAChC,OAAO,KAAK;;EAEhB;EAEAI,kBAAkBA,CAAA;IAChB,IAAIC,OAAO,GAAG,IAAIC,WAAW,EAAE,CAACC,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;IACvE,OAAO,IAAI,CAACrB,KAAK,CAACsB,GAAG,CAAM,IAAI,CAACpB,GAAG,GAAG,oBAAoB,EAAE;MAAEiB,OAAO,EAAEA;IAAO,CAAE,CAAC;EACnF;EAEAI,WAAWA,CAACC,IAAS;IACnB,IAAIL,OAAO,GAAG,IAAIC,WAAW,EAAE,CAACC,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;IACvE,OAAO,IAAI,CAACrB,KAAK,CAACyB,IAAI,CAAC,IAAI,CAACvB,GAAG,GAAG,cAAc,EAAEsB,IAAI,EAAE;MAAEL,OAAO,EAAEA;IAAO,CAAE,CAAC;EACjF;EAEEO,WAAWA,CAACF,IAAmC;IAC7C,IAAIL,OAAO,GAAG,IAAIC,WAAW,EAAE,CAACC,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;IACvE,OAAO,IAAI,CAACrB,KAAK,CAACyB,IAAI,CAAC,IAAI,CAACvB,GAAG,GAAG,aAAa,EAAEsB,IAAI,EAAE;MACrDL,OAAO,EAAEA;KACV,CAAC;EACJ;EAEAQ,SAASA,CAAClB,KAAU;IAClB,IAAIU,OAAO,GAAG,IAAIC,WAAW,CAAC;MAAE,cAAc,EAAE,kBAAkB;MAAE,eAAe,EAAEX;IAAK,CAAE,CAAC;IAC7F,OAAO,IAAI,CAACT,KAAK,CAACsB,GAAG,CAAC,IAAI,CAACpB,GAAG,GAAG,WAAW,EAAE;MAAEiB,OAAO,EAAEA;IAAO,CAAE,CAAC;EACrE;EAEAS,MAAMA,CAAA;IACJvB,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;IAChC,IAAI,CAACb,OAAO,CAAC4B,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;EACnC;CACD;AA7DY/B,WAAW,GAAAgC,UAAA,EAHvBC,UAAU,CAAC;EACVC,UAAU,EAAE;CACb,CAAC,C,EACWlC,WAAW,CA6DvB;SA7DYA,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}