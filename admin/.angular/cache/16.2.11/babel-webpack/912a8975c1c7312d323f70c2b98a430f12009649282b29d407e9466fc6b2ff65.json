{"ast":null,"code":"import { JwtHelperService } from '@auth0/angular-jwt';\nimport { GLOBAL } from '../config/GLOBAL';\nimport { throwError, Subject } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nauth.service.ts;\nclass AuthService {\n  constructor(_http, _router) {\n    this._http = _http;\n    this._router = _router;\n    this.url = GLOBAL.url;\n    this.loginSuccessSubject = new Subject();\n    this.loginSuccessObservable = this.loginSuccessSubject.asObservable();\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  isAuthenticated(allowRoles) {\n    const token = this.getToken();\n    if (!token) return false;\n    try {\n      const helper = new JwtHelperService();\n      const decodedToken = helper.decodeToken(token);\n      if (!decodedToken || !decodedToken['role']) {\n        this.logout();\n        return false;\n      }\n      return allowRoles.includes(decodedToken['role']);\n    } catch (error) {\n      this.logout();\n      return false;\n    }\n  }\n  loginUser(credentials) {\n    return this._http.post(`${this.url}loginUser`, credentials).pipe(tap(response => {\n      if (response.token) {\n        this.storeToken(response.token);\n        this._router.navigate(['/']);\n        this.loginSuccessSubject.next(true);\n      }\n    }), catchError(error => this.handleError(error)));\n  }\n  logout() {\n    this.removeToken();\n    this._router.navigate(['/auth/login']);\n  }\n  handleError(error) {\n    let errorMessage = error.error.message || 'An error occurred';\n    return throwError(() => new Error(errorMessage));\n  }\n  storeToken(token) {\n    localStorage.setItem('token', token);\n  }\n  removeToken() {\n    localStorage.removeItem('token');\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { AuthService };","map":{"version":3,"names":["JwtHelperService","GLOBAL","throwError","Subject","tap","catchError","auth","service","ts","AuthService","constructor","_http","_router","url","loginSuccessSubject","loginSuccessObservable","asObservable","getToken","localStorage","getItem","isAuthenticated","allowRoles","token","helper","decodedToken","decodeToken","logout","includes","error","loginUser","credentials","post","pipe","response","storeToken","navigate","next","handleError","removeToken","errorMessage","message","Error","setItem","removeItem","_","i0","ɵɵinject","i1","HttpClient","i2","Router","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\core\\auth\\auth.service.ts"],"sourcesContent":["auth.service.ts\n\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { LoginCredentials } from 'src/app/core/models';\nimport { GLOBAL } from '../config/GLOBAL';\nimport { Observable, throwError, Subject, EMPTY } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\n\n\nexport class AuthService {\n  private url: string = GLOBAL.url;\n  private loginSuccessSubject = new Subject<boolean>();\n  public loginSuccessObservable = this.loginSuccessSubject.asObservable();\n\n  constructor(private _http: HttpClient, private _router: Router) { }\n\n  getToken(): string | null {\n    return localStorage.getItem('token');\n  }\n\n  isAuthenticated(allowRoles: string[]): boolean {\n    const token = this.getToken();\n    if (!token) return false;\n\n    try {\n      const helper = new JwtHelperService();\n      const decodedToken = helper.decodeToken(token);\n      if (!decodedToken || !decodedToken['role']) {\n        this.logout();\n        return false;\n      }\n      return allowRoles.includes(decodedToken['role']);\n    } catch (error) {\n      this.logout();\n      return false;\n    }\n  }\n\n  loginUser(credentials: LoginCredentials): Observable<any> {\n    return this._http\n      .post<any>(`${this.url}loginUser`, credentials)\n      .pipe(\n        tap(response => {\n          if (response.token) {\n            this.storeToken(response.token);\n            this._router.navigate(['/']);\n            this.loginSuccessSubject.next(true);\n          }\n        }),\n        catchError(error => this.handleError(error))\n      );\n  }\n\n\n  logout(): void {\n    this.removeToken();\n    this._router.navigate(['/auth/login']);\n  }\n\n  private handleError(error: any): Observable<never> {\n    let errorMessage = error.error.message || 'An error occurred';\n    return throwError(() => new Error(errorMessage));\n  }\n\n  private storeToken(token: string): void {\n    localStorage.setItem('token', token);\n  }\n\n  private removeToken(): void {\n    localStorage.removeItem('token');\n  }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}