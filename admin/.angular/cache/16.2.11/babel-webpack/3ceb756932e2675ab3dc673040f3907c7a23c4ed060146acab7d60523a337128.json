{"ast":null,"code":"import { throwError, Subject } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport { HttpHeaders } from '@angular/common/http';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { GLOBAL } from '../config/GLOBAL';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nclass AuthService {\n  constructor(_http, _router) {\n    this._http = _http;\n    this._router = _router;\n    this.url = GLOBAL.url;\n    this.headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    this.loginSuccessSubject = new Subject();\n    this.loginSuccessObservable = this.loginSuccessSubject.asObservable();\n  }\n  storeToken(token) {\n    localStorage.setItem('token', token);\n  }\n  removeToken() {\n    localStorage.removeItem('token');\n  }\n  redirectTo(path) {\n    this._router.navigate([path]);\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  handleError(error) {\n    let errorMessage = 'An error occurred during the operation';\n    if (error.error.message) {\n      errorMessage = error.error.message;\n    }\n    console.error('Error:', errorMessage);\n    return throwError(() => new Error(errorMessage));\n  }\n  isAuthenticated(allowRoles) {\n    const token = this.getToken();\n    if (!token) {\n      return false;\n    }\n    try {\n      const helper = new JwtHelperService();\n      const decodedToken = helper.decodeToken(token);\n      if (!decodedToken || !decodedToken['role']) {\n        this.removeToken();\n        return false;\n      }\n      return allowRoles.includes(decodedToken['role']);\n    } catch (error) {\n      console.error('Error decoding token:', error);\n      this.removeToken();\n      return false;\n    }\n  }\n  check_admin_exists() {\n    return this._http.get(`${this.url}check_admin_exists`, {\n      headers: this.headers\n    });\n  }\n  create_admin(data) {\n    return this._http.post(`${this.url}create_admin`, data, {\n      headers: this.headers\n    });\n  }\n  login_admin(credentials) {\n    return this._http.post(`${this.url}login_admin`, credentials, {\n      headers: this.headers\n    }).pipe(tap(response => {\n      if (response.token) {\n        this.storeToken(response.token);\n        this.redirectTo('/');\n        this.loginSuccessSubject.next(true);\n      }\n    }), catchError(error => this.handleError(error)));\n  }\n  get_admin(token) {\n    const authHeaders = this.headers.set('Authorization', token);\n    return this._http.get(`${this.url}get_admin`, {\n      headers: authHeaders\n    });\n  }\n  logout() {\n    this.removeToken();\n    this.redirectTo('/login');\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { AuthService };","map":{"version":3,"names":["throwError","Subject","tap","catchError","HttpHeaders","JwtHelperService","GLOBAL","AuthService","constructor","_http","_router","url","headers","loginSuccessSubject","loginSuccessObservable","asObservable","storeToken","token","localStorage","setItem","removeToken","removeItem","redirectTo","path","navigate","getToken","getItem","handleError","error","errorMessage","message","console","Error","isAuthenticated","allowRoles","helper","decodedToken","decodeToken","includes","check_admin_exists","get","create_admin","data","post","login_admin","credentials","pipe","response","next","get_admin","authHeaders","set","logout","_","i0","ɵɵinject","i1","HttpClient","i2","Router","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\core\\auth\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, throwError, Subject } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { LoginCredentials } from 'src/app/core/model';\nimport { ApiResponse } from '../model/api-response.interface';\nimport { GLOBAL } from '../config/GLOBAL';\n\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private url: string = GLOBAL.url;\n  private headers: HttpHeaders = new HttpHeaders({\n    'Content-Type': 'application/json',\n  });\n\n  private loginSuccessSubject = new Subject<boolean>();\n  public loginSuccessObservable = this.loginSuccessSubject.asObservable();\n\n  constructor(private _http: HttpClient, private _router: Router) {}\n\n  private storeToken(token: string): void {\n    localStorage.setItem('token', token);\n  }\n\n  private removeToken(): void {\n    localStorage.removeItem('token');\n  }\n\n  private redirectTo(path: string): void {\n    this._router.navigate([path]);\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem('token');\n  }\n\n  private handleError(error: any): Observable<never> {\n    let errorMessage = 'An error occurred during the operation';\n    if (error.error.message) {\n      errorMessage = error.error.message;\n    }\n    console.error('Error:', errorMessage);\n    return throwError(() => new Error(errorMessage));\n  }\n\n  isAuthenticated(allowRoles: string[]): boolean {\n    const token = this.getToken();\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const helper = new JwtHelperService();\n      const decodedToken = helper.decodeToken(token);\n\n      if (!decodedToken || !decodedToken['role']) {\n        this.removeToken();\n        return false;\n      }\n      return allowRoles.includes(decodedToken['role']);\n    } catch (error) {\n      console.error('Error decoding token:', error);\n      this.removeToken();\n      return false;\n    }\n  }\n\n  check_admin_exists(): Observable<any> {\n    return this._http.get<any>(`${this.url}check_admin_exists`, {\n      headers: this.headers,\n    });\n  }\n\n  create_admin(data: any): Observable<any> {\n    return this._http.post(`${this.url}create_admin`, data, {\n      headers: this.headers,\n    });\n  }\n\n  login_admin(credentials: LoginCredentials): Observable<any> {\n    return this._http\n      .post<ApiResponse>(`${this.url}login_admin`, credentials, {\n        headers: this.headers,\n      })\n      .pipe(\n        tap((response) => {\n          if (response.token) {\n            this.storeToken(response.token);\n            this.redirectTo('/');\n            this.loginSuccessSubject.next(true);\n          }\n        }),\n        catchError((error) => this.handleError(error))\n      );\n  }\n\n  get_admin(token: any): Observable<any> {\n    const authHeaders = this.headers.set('Authorization', token);\n    return this._http.get(`${this.url}get_admin`, { headers: authHeaders });\n  }\n\n  logout(): void {\n    this.removeToken();\n    this.redirectTo('/login');\n  }\n}\n\n\n\n\n// import { Injectable } from '@angular/core';\n// import { Observable, throwError, Subject } from 'rxjs';\n// import { tap, catchError  } from 'rxjs/operators';\n// import { HttpClient, HttpHeaders } from '@angular/common/http';\n// import { Router } from '@angular/router';\n// import { GLOBAL } from '../config/GLOBAL';\n// import { JwtHelperService } from '@auth0/angular-jwt';\n// import { LoginCredentials } from 'src/app/core/model';\n// import { ApiResponse } from '../model/api-response.interface';\n\n\n// @Injectable({\n//   providedIn: 'root',\n// })\n// export class AuthService {\n//   public url;\n//   private loginSuccessSubject = new Subject<boolean>();\n//   public loginSuccessObservable = this.loginSuccessSubject.asObservable();\n\n//   constructor(private _http: HttpClient, private _router: Router) {\n//     this.url = GLOBAL.url;\n//   }\n\n//   private storeToken(token: string): void {\n//     localStorage.setItem('token', token);\n//   }\n\n//   private removeToken(): void {\n//     localStorage.removeItem('token');\n//   }\n\n//   private redirectTo(path: string): void {\n//     this._router.navigate([path]);\n//   }\n\n\n//   getToken() {\n//     return localStorage.getItem('token');\n//   }\n\n//   public isAuthenticated(allowRoles: string[]): boolean {\n//     const token = localStorage.getItem('token');\n\n//     if (!token) {\n//       return false;\n//     }\n\n//     try {\n//       const helper = new JwtHelperService();\n//       const decodedToken = helper.decodeToken(token);\n\n//       if (!decodedToken || !decodedToken['role']) {\n//         localStorage.removeItem('token');\n//         return false;\n//       }\n//       return allowRoles.includes(decodedToken['role']);\n//     } catch (error) {\n//       console.error('Error decoding token:', error);\n//       localStorage.removeItem('token');\n//       return false;\n//     }\n//   }\n\n//   check_admin_exists(): Observable<any> {\n//     let headers = new HttpHeaders().set('Content-Type', 'application/json');\n//     return this._http.get<any>(this.url + 'check_admin_exists', {\n//       headers: headers,\n//     });\n//   }\n\n//   createAdmin(data: any): Observable<any> {\n//     let headers = new HttpHeaders().set('Content-Type', 'application/json');\n//     return this._http.post(this.url + 'create_admin', data, {\n//       headers: headers,\n//     });\n//   }\n\n//   login_admin(credentials: LoginCredentials): Observable<any> {\n//     let headers = new HttpHeaders().set('Content-Type', 'application/json');\n//     return this._http\n//       .post<ApiResponse>(this.url + 'login_admin', credentials, { headers: headers })\n//       .pipe(\n//         tap((response) => {\n//           if (response.token) {\n//             this.storeToken(response.token);\n//             this.redirectTo('/');\n//             this.loginSuccessSubject.next(true);\n//           }\n//         }),\n//         catchError((error) => {\n//         let errorMessage = 'An error occurred during login';\n//         if (error.error.message) {\n//           errorMessage = error.error.message;\n//         }\n//         return throwError(() => new Error(errorMessage));\n//         })\n//       );\n//   }\n\n//   get_admin(token: any): Observable<any> {\n//     let headers = new HttpHeaders({\n//       'Content-Type': 'application/json',\n//       Authorization: token,\n//     });\n//     return this._http.get(this.url + 'get_admin', { headers: headers });\n//   }\n\n//   logout(): void {\n//     this.removeToken();\n//     this.redirectTo('/login');\n//   }\n\n// }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}