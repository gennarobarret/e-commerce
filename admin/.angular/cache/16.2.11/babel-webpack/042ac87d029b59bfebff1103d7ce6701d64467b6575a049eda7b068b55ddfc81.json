{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet ActivationComponent = class ActivationComponent {\n  constructor(route, router, formBuilder, ValidationService, _initialConfigService) {\n    this.route = route;\n    this.router = router;\n    this.formBuilder = formBuilder;\n    this._initialConfigService = _initialConfigService;\n  }\n  ngOnInit() {\n    // Inicializa el formulario con validadores\n    this.activationForm = this.formBuilder.group({\n      inputPassword: ['', [Validators.required, Validators.minLength(8)]],\n      inputConfirmPassword: ['', [Validators.required]]\n    });\n    // Obtiene el token de la URL\n    this.route.params.subscribe(params => {\n      this.token = params['token'];\n      // Utiliza el token como sea necesario en tu lógica de activación.\n    });\n  }\n\n  onActivate() {\n    if (this.activationForm.valid) {\n      // Llama a tu servicio para activar la cuenta\n      this._initialConfigService.activateAccount(this.token, this.activationForm.value.inputPassword).subscribe(response => {\n        // Maneja la respuesta exitosa\n        // Redirige a una página de éxito o a donde sea necesario\n        this.router.navigate(['/activation-success']);\n      }, error => {\n        // Maneja los errores, por ejemplo, muestra un mensaje de error en la página\n        console.error('Error al activar la cuenta:', error);\n      });\n    }\n  }\n};\nActivationComponent = __decorate([Component({\n  selector: 'app-activation',\n  templateUrl: './activation.component.html',\n  styleUrls: ['./activation.component.css']\n})], ActivationComponent);\nexport { ActivationComponent };","map":{"version":3,"names":["Component","Validators","ActivationComponent","constructor","route","router","formBuilder","ValidationService","_initialConfigService","ngOnInit","activationForm","group","inputPassword","required","minLength","inputConfirmPassword","params","subscribe","token","onActivate","valid","activateAccount","value","response","navigate","error","console","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\modules\\initial-config\\activation\\activation.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { InitialConfigService } from 'src/app/core/services/initial-config.service';\nimport { ValidationService } from 'src/app/core/services/validation.service'; // Importa el servicio de validación\n\n\n@Component({\n  selector: 'app-activation',\n  templateUrl: './activation.component.html',\n  styleUrls: ['./activation.component.css']\n})\n\nexport class ActivationComponent implements OnInit {\n  activationForm!: FormGroup; // Usa \"!\" para indicar que será inicializada en ngOnInit\n  token!: string; // Usa \"!\" para indicar que será inicializada en ngOnInit\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private formBuilder: FormBuilder,\n    ValidationService\n    private _initialConfigService: InitialConfigService\n  ) { }\n\n  ngOnInit(): void {\n    // Inicializa el formulario con validadores\n    this.activationForm = this.formBuilder.group({\n      inputPassword: ['', [Validators.required, Validators.minLength(8)]],\n      inputConfirmPassword: ['', [Validators.required]]\n    });\n\n    // Obtiene el token de la URL\n    this.route.params.subscribe(params => {\n      this.token = params['token'];\n      // Utiliza el token como sea necesario en tu lógica de activación.\n    });\n  }\n\n  onActivate() {\n    if (this.activationForm.valid) {\n      // Llama a tu servicio para activar la cuenta\n      this._initialConfigService.activateAccount(this.token, this.activationForm.value.inputPassword).subscribe(\n        response => {\n          // Maneja la respuesta exitosa\n          // Redirige a una página de éxito o a donde sea necesario\n          this.router.navigate(['/activation-success']);\n        },\n        error => {\n          // Maneja los errores, por ejemplo, muestra un mensaje de error en la página\n          console.error('Error al activar la cuenta:', error);\n        }\n      );\n    }\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAEjD,SAAiCC,UAAU,QAAQ,gBAAgB;AAWnE,IAAaC,mBAAmB,GAAhC,MAAaA,mBAAmB;EAI9BC,YACUC,KAAqB,EACrBC,MAAc,EACdC,WAAwB,EAChCC,iBAAiB,EACTC,qBAA2C;IAJ3C,KAAAJ,KAAK,GAALA,KAAK;IACL,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,WAAW,GAAXA,WAAW;IAEX,KAAAE,qBAAqB,GAArBA,qBAAqB;EAC3B;EAEJC,QAAQA,CAAA;IACN;IACA,IAAI,CAACC,cAAc,GAAG,IAAI,CAACJ,WAAW,CAACK,KAAK,CAAC;MAC3CC,aAAa,EAAE,CAAC,EAAE,EAAE,CAACX,UAAU,CAACY,QAAQ,EAAEZ,UAAU,CAACa,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;MACnEC,oBAAoB,EAAE,CAAC,EAAE,EAAE,CAACd,UAAU,CAACY,QAAQ,CAAC;KACjD,CAAC;IAEF;IACA,IAAI,CAACT,KAAK,CAACY,MAAM,CAACC,SAAS,CAACD,MAAM,IAAG;MACnC,IAAI,CAACE,KAAK,GAAGF,MAAM,CAAC,OAAO,CAAC;MAC5B;IACF,CAAC,CAAC;EACJ;;EAEAG,UAAUA,CAAA;IACR,IAAI,IAAI,CAACT,cAAc,CAACU,KAAK,EAAE;MAC7B;MACA,IAAI,CAACZ,qBAAqB,CAACa,eAAe,CAAC,IAAI,CAACH,KAAK,EAAE,IAAI,CAACR,cAAc,CAACY,KAAK,CAACV,aAAa,CAAC,CAACK,SAAS,CACvGM,QAAQ,IAAG;QACT;QACA;QACA,IAAI,CAAClB,MAAM,CAACmB,QAAQ,CAAC,CAAC,qBAAqB,CAAC,CAAC;MAC/C,CAAC,EACDC,KAAK,IAAG;QACN;QACAC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACrD,CAAC,CACF;;EAEL;CACD;AA1CYvB,mBAAmB,GAAAyB,UAAA,EAN/B3B,SAAS,CAAC;EACT4B,QAAQ,EAAE,gBAAgB;EAC1BC,WAAW,EAAE,6BAA6B;EAC1CC,SAAS,EAAE,CAAC,4BAA4B;CACzC,CAAC,C,EAEW5B,mBAAmB,CA0C/B;SA1CYA,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}