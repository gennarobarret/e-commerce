{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nlet AuthTokenInterceptor = class AuthTokenInterceptor {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  intercept(request, next) {\n    const token = this.authService.getToken();\n    const authRequest = request.clone({\n      headers: this.authService.getHeaders(token)\n    });\n    return next.handle(authRequest).pipe(catchError(error => {\n      if (error.status === 401 || error.status === 403) {\n        this.authService.logout();\n        this.router.navigate(['/auth/login']);\n      }\n      return throwError(error);\n    }));\n  }\n};\nAuthTokenInterceptor = __decorate([Injectable()], AuthTokenInterceptor);\nexport { AuthTokenInterceptor };","map":{"version":3,"names":["Injectable","throwError","catchError","AuthTokenInterceptor","constructor","authService","router","intercept","request","next","token","getToken","authRequest","clone","headers","getHeaders","handle","pipe","error","status","logout","navigate","__decorate"],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\interceptors\\auth-token.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpErrorResponse\n} from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth.service';  // Asegúrate de actualizar la ruta de importación correctamente\n\n@Injectable()\nexport class AuthTokenInterceptor implements HttpInterceptor {\n\n  constructor(private authService: AuthService, private router: Router) {}\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const token = this.authService.getToken();\n    const authRequest = request.clone({\n      headers: this.authService.getHeaders(token)\n    });\n\n    return next.handle(authRequest).pipe(\n      catchError((error: HttpErrorResponse) => {\n        if (error.status === 401 || error.status === 403) {\n          this.authService.logout();\n          this.router.navigate(['/auth/login']);\n        }\n        return throwError(error);\n      })\n    );\n  }\n}\n\n"],"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAQ1C,SAAqBC,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;AAK3C,IAAaC,oBAAoB,GAAjC,MAAaA,oBAAoB;EAE/BC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,MAAM,GAANA,MAAM;EAAW;EAEvEC,SAASA,CAACC,OAAyB,EAAEC,IAAiB;IACpD,MAAMC,KAAK,GAAG,IAAI,CAACL,WAAW,CAACM,QAAQ,EAAE;IACzC,MAAMC,WAAW,GAAGJ,OAAO,CAACK,KAAK,CAAC;MAChCC,OAAO,EAAE,IAAI,CAACT,WAAW,CAACU,UAAU,CAACL,KAAK;KAC3C,CAAC;IAEF,OAAOD,IAAI,CAACO,MAAM,CAACJ,WAAW,CAAC,CAACK,IAAI,CAClCf,UAAU,CAAEgB,KAAwB,IAAI;MACtC,IAAIA,KAAK,CAACC,MAAM,KAAK,GAAG,IAAID,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;QAChD,IAAI,CAACd,WAAW,CAACe,MAAM,EAAE;QACzB,IAAI,CAACd,MAAM,CAACe,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC;;MAEvC,OAAOpB,UAAU,CAACiB,KAAK,CAAC;IAC1B,CAAC,CAAC,CACH;EACH;CACD;AApBYf,oBAAoB,GAAAmB,UAAA,EADhCtB,UAAU,EAAE,C,EACAG,oBAAoB,CAoBhC;SApBYA,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}