{"ast":null,"code":"import * as i0 from \"@angular/core\";\nclass ValidationService {\n  constructor() {}\n  validateDate(control) {\n    const inputDateStr = control.value;\n    if (!/^\\d{4}-\\d{2}-\\d{2}$/.test(inputDateStr)) {\n      return {\n        invalidDateFormat: true\n      };\n    }\n    return null;\n  }\n  mustMatch(controlName, matchingControlName) {\n    return group => {\n      const control = group.get(controlName);\n      const matchingControl = group.get(matchingControlName);\n      if (!control || !matchingControl) {\n        return null;\n      }\n      if (matchingControl.errors && !matchingControl.errors['mustMatch']) {\n        return null;\n      }\n      if (control.value !== matchingControl.value) {\n        matchingControl.setErrors({\n          mustMatch: true\n        });\n      } else {\n        matchingControl.setErrors(null);\n      }\n      return null;\n    };\n  }\n  static #_ = this.ɵfac = function ValidationService_Factory(t) {\n    return new (t || ValidationService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ValidationService,\n    factory: ValidationService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { ValidationService };","map":{"version":3,"names":["ValidationService","constructor","validateDate","control","inputDateStr","value","test","invalidDateFormat","mustMatch","controlName","matchingControlName","group","get","matchingControl","errors","setErrors","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\core\\services\\validation.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\nimport { FormControl } from '@angular/forms';\n\n@Injectable({\n  providedIn: 'root'\n})\n  \nexport class ValidationService {\n\n  constructor() { }\n\n  validateDate(control: FormControl): { [key: string]: any } | null {\n    const inputDateStr: string = control.value;\n    if (!/^\\d{4}-\\d{2}-\\d{2}$/.test(inputDateStr)) {\n      return { invalidDateFormat: true };\n    }\n    return null;\n  }\n\n  mustMatch(controlName: string, matchingControlName: string) {\n    return (group: AbstractControl) => {\n      const control = group.get(controlName);\n      const matchingControl = group.get(matchingControlName);\n\n      if (!control || !matchingControl) {\n        return null;\n      }\n\n      if (matchingControl.errors && !matchingControl.errors['mustMatch']) {\n        return null;\n      }\n\n      if (control.value !== matchingControl.value) {\n        matchingControl.setErrors({ mustMatch: true });\n      } else {\n        matchingControl.setErrors(null);\n      }\n\n      return null;\n    };\n  }\n\n}\n"],"mappings":";AAIA,MAIaA,iBAAiB;EAE5BC,YAAA,GAAgB;EAEhBC,YAAYA,CAACC,OAAoB;IAC/B,MAAMC,YAAY,GAAWD,OAAO,CAACE,KAAK;IAC1C,IAAI,CAAC,qBAAqB,CAACC,IAAI,CAACF,YAAY,CAAC,EAAE;MAC7C,OAAO;QAAEG,iBAAiB,EAAE;MAAI,CAAE;;IAEpC,OAAO,IAAI;EACb;EAEAC,SAASA,CAACC,WAAmB,EAAEC,mBAA2B;IACxD,OAAQC,KAAsB,IAAI;MAChC,MAAMR,OAAO,GAAGQ,KAAK,CAACC,GAAG,CAACH,WAAW,CAAC;MACtC,MAAMI,eAAe,GAAGF,KAAK,CAACC,GAAG,CAACF,mBAAmB,CAAC;MAEtD,IAAI,CAACP,OAAO,IAAI,CAACU,eAAe,EAAE;QAChC,OAAO,IAAI;;MAGb,IAAIA,eAAe,CAACC,MAAM,IAAI,CAACD,eAAe,CAACC,MAAM,CAAC,WAAW,CAAC,EAAE;QAClE,OAAO,IAAI;;MAGb,IAAIX,OAAO,CAACE,KAAK,KAAKQ,eAAe,CAACR,KAAK,EAAE;QAC3CQ,eAAe,CAACE,SAAS,CAAC;UAAEP,SAAS,EAAE;QAAI,CAAE,CAAC;OAC/C,MAAM;QACLK,eAAe,CAACE,SAAS,CAAC,IAAI,CAAC;;MAGjC,OAAO,IAAI;IACb,CAAC;EACH;EAAC,QAAAC,CAAA,G;qBAjCUhB,iBAAiB;EAAA;EAAA,QAAAiB,EAAA,G;WAAjBjB,iBAAiB;IAAAkB,OAAA,EAAjBlB,iBAAiB,CAAAmB,IAAA;IAAAC,UAAA,EAHhB;EAAM;;SAGPpB,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}