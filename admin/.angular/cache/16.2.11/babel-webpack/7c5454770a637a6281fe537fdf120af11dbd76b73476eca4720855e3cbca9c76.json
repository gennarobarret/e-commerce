{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"src/app/core/services/initial-config.service\";\nclass ActivationComponent {\n  constructor(route, router, formBuilder, _initialConfigService) {\n    this.route = route;\n    this.router = router;\n    this.formBuilder = formBuilder;\n    this._initialConfigService = _initialConfigService;\n  }\n  ngOnInit() {\n    // Inicializa el formulario con validadores\n    this.activationForm = this.formBuilder.group({\n      password: ['', [Validators.required, Validators.minLength(8)]],\n      confirmPassword: ['', [Validators.required]]\n    });\n    // Obtiene el token de la URL\n    this.route.params.subscribe(params => {\n      this.token = params['token'];\n      // Utiliza el token como sea necesario en tu lógica de activación.\n    });\n  }\n\n  onActivate() {\n    if (this.activationForm.valid) {\n      // Llama a tu servicio para activar la cuenta\n      this._initialConfigService.activateAccount(this.token, this.activationForm.value.password).subscribe(response => {\n        // Maneja la respuesta exitosa\n        // Redirige a una página de éxito o a donde sea necesario\n        this.router.navigate(['/activation-success']);\n      }, error => {\n        // Maneja los errores, por ejemplo, muestra un mensaje de error en la página\n        console.error('Error al activar la cuenta:', error);\n      });\n    }\n  }\n  static #_ = this.ɵfac = function ActivationComponent_Factory(t) {\n    return new (t || ActivationComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.InitialConfigService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ActivationComponent,\n    selectors: [[\"app-activation\"]],\n    decls: 5,\n    vars: 1,\n    consts: [[3, \"formGroup\", \"ngSubmit\"], [\"type\", \"password\", \"formControlName\", \"password\", \"placeholder\", \"Nueva contrase\\u00F1a\"], [\"type\", \"password\", \"formControlName\", \"confirmPassword\", \"placeholder\", \"Confirmar contrase\\u00F1a\"], [\"type\", \"submit\"]],\n    template: function ActivationComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function ActivationComponent_Template_form_ngSubmit_0_listener() {\n          return ctx.onActivate();\n        });\n        i0.ɵɵelement(1, \"input\", 1)(2, \"input\", 2);\n        i0.ɵɵelementStart(3, \"button\", 3);\n        i0.ɵɵtext(4, \"Activar cuenta\");\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.activationForm);\n      }\n    },\n    dependencies: [i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}\nexport { ActivationComponent };","map":{"version":3,"names":["Validators","ActivationComponent","constructor","route","router","formBuilder","_initialConfigService","ngOnInit","activationForm","group","password","required","minLength","confirmPassword","params","subscribe","token","onActivate","valid","activateAccount","value","response","navigate","error","console","_","i0","ɵɵdirectiveInject","i1","ActivatedRoute","Router","i2","FormBuilder","i3","InitialConfigService","_2","selectors","decls","vars","consts","template","ActivationComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","ActivationComponent_Template_form_ngSubmit_0_listener","ɵɵelement","ɵɵtext","ɵɵelementEnd","ɵɵproperty"],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\modules\\initial-config\\activation\\activation.component.ts","C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\modules\\initial-config\\activation\\activation.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { InitialConfigService } from 'src/app/core/services/initial-config.service';\n\n@Component({\n  selector: 'app-activation',\n  templateUrl: './activation.component.html',\n  styleUrls: ['./activation.component.css']\n})\n\nexport class ActivationComponent implements OnInit {\n  activationForm: FormGroup;\n  token: string;\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private formBuilder: FormBuilder,\n    private _initialConfigService: InitialConfigService\n  ) { }\n\n  ngOnInit(): void {\n    // Inicializa el formulario con validadores\n    this.activationForm = this.formBuilder.group({\n      password: ['', [Validators.required, Validators.minLength(8)]],\n      confirmPassword: ['', [Validators.required]]\n    });\n\n    // Obtiene el token de la URL\n    this.route.params.subscribe(params => {\n      this.token = params['token'];\n      // Utiliza el token como sea necesario en tu lógica de activación.\n    });\n  }\n\n  onActivate() {\n    if (this.activationForm.valid) {\n      // Llama a tu servicio para activar la cuenta\n      this._initialConfigService.activateAccount(this.token, this.activationForm.value.password).subscribe(\n        response => {\n          // Maneja la respuesta exitosa\n          // Redirige a una página de éxito o a donde sea necesario\n          this.router.navigate(['/activation-success']);\n        },\n        error => {\n          // Maneja los errores, por ejemplo, muestra un mensaje de error en la página\n          console.error('Error al activar la cuenta:', error);\n        }\n      );\n    }\n  }\n}\n","<form [formGroup]=\"activationForm\" (ngSubmit)=\"onActivate()\">\n    <input type=\"password\" formControlName=\"password\" placeholder=\"Nueva contraseña\">\n    <input type=\"password\" formControlName=\"confirmPassword\" placeholder=\"Confirmar contraseña\">\n    <button type=\"submit\">Activar cuenta</button>\n</form>"],"mappings":"AAEA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;;AAGnE,MAMaC,mBAAmB;EAI9BC,YACUC,KAAqB,EACrBC,MAAc,EACdC,WAAwB,EACxBC,qBAA2C;IAH3C,KAAAH,KAAK,GAALA,KAAK;IACL,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,WAAW,GAAXA,WAAW;IACX,KAAAC,qBAAqB,GAArBA,qBAAqB;EAC3B;EAEJC,QAAQA,CAAA;IACN;IACA,IAAI,CAACC,cAAc,GAAG,IAAI,CAACH,WAAW,CAACI,KAAK,CAAC;MAC3CC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACV,UAAU,CAACW,QAAQ,EAAEX,UAAU,CAACY,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;MAC9DC,eAAe,EAAE,CAAC,EAAE,EAAE,CAACb,UAAU,CAACW,QAAQ,CAAC;KAC5C,CAAC;IAEF;IACA,IAAI,CAACR,KAAK,CAACW,MAAM,CAACC,SAAS,CAACD,MAAM,IAAG;MACnC,IAAI,CAACE,KAAK,GAAGF,MAAM,CAAC,OAAO,CAAC;MAC5B;IACF,CAAC,CAAC;EACJ;;EAEAG,UAAUA,CAAA;IACR,IAAI,IAAI,CAACT,cAAc,CAACU,KAAK,EAAE;MAC7B;MACA,IAAI,CAACZ,qBAAqB,CAACa,eAAe,CAAC,IAAI,CAACH,KAAK,EAAE,IAAI,CAACR,cAAc,CAACY,KAAK,CAACV,QAAQ,CAAC,CAACK,SAAS,CAClGM,QAAQ,IAAG;QACT;QACA;QACA,IAAI,CAACjB,MAAM,CAACkB,QAAQ,CAAC,CAAC,qBAAqB,CAAC,CAAC;MAC/C,CAAC,EACDC,KAAK,IAAG;QACN;QACAC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACrD,CAAC,CACF;;EAEL;EAAC,QAAAE,CAAA,G;qBAxCUxB,mBAAmB,EAAAyB,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,cAAA,GAAAH,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAE,MAAA,GAAAJ,EAAA,CAAAC,iBAAA,CAAAI,EAAA,CAAAC,WAAA,GAAAN,EAAA,CAAAC,iBAAA,CAAAM,EAAA,CAAAC,oBAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAnBlC,mBAAmB;IAAAmC,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,6BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCXhChB,EAAA,CAAAkB,cAAA,cAA6D;QAA1BlB,EAAA,CAAAmB,UAAA,sBAAAC,sDAAA;UAAA,OAAYH,GAAA,CAAA1B,UAAA,EAAY;QAAA,EAAC;QACxDS,EAAA,CAAAqB,SAAA,eAAiF;QAEjFrB,EAAA,CAAAkB,cAAA,gBAAsB;QAAAlB,EAAA,CAAAsB,MAAA,qBAAc;QAAAtB,EAAA,CAAAuB,YAAA,EAAS;;;QAH3CvB,EAAA,CAAAwB,UAAA,cAAAP,GAAA,CAAAnC,cAAA,CAA4B;;;;;;;SDWrBP,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}