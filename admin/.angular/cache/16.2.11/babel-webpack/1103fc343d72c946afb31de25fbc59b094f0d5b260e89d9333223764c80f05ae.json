{"ast":null,"code":"import { BehaviorSubject, ignoreElements, map, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nconst USER_LOCAL_STORAGE_KEY = 'userData';\nclass AuthService {\n  constructor(httpClient, router) {\n    this.httpClient = httpClient;\n    this.router = router;\n    this.user = new BehaviorSubject(null);\n    this.user$ = this.user.asObservable();\n    this.isLoggedIn$ = this.user$.pipe(map(Boolean));\n    this.loadUserFromLocalStorage();\n  }\n  login(credentials) {\n    return this.httpClient.post('login', credentials).pipe(tap(userToken => this.saveTokenToLocalStore(userToken)), tap(userToken => this.pushNewUser(userToken)), tap(() => this.redirectToDashboard()), ignoreElements());\n  }\n  logout() {\n    this.removeUserFromLocalStorage();\n    this.user.next(null);\n    this.router.navigateByUrl('/login');\n  }\n  redirectToDashboard() {\n    this.router.navigateByUrl('/dashboard');\n  }\n  pushNewUser(token) {\n    this.user.next(this.decodeToken(token));\n  }\n  decodeToken(userToken) {\n    const userInfo = JSON.parse(window.atob(userToken));\n    return {\n      ...userInfo,\n      token: userToken\n    };\n  }\n  loadUserFromLocalStorage() {\n    const userFromLocal = localStorage.getItem(USER_LOCAL_STORAGE_KEY);\n    userFromLocal && this.pushNewUser(userFromLocal);\n  }\n  saveTokenToLocalStore(userToken) {\n    localStorage.setItem(USER_LOCAL_STORAGE_KEY, userToken);\n  }\n  removeUserFromLocalStorage() {\n    localStorage.removeItem(USER_LOCAL_STORAGE_KEY);\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { AuthService };","map":{"version":3,"names":["BehaviorSubject","ignoreElements","map","tap","USER_LOCAL_STORAGE_KEY","AuthService","constructor","httpClient","router","user","user$","asObservable","isLoggedIn$","pipe","Boolean","loadUserFromLocalStorage","login","credentials","post","userToken","saveTokenToLocalStore","pushNewUser","redirectToDashboard","logout","removeUserFromLocalStorage","next","navigateByUrl","token","decodeToken","userInfo","JSON","parse","window","atob","userFromLocal","localStorage","getItem","setItem","removeItem","_","i0","ɵɵinject","i1","HttpClient","i2","Router","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\core\\auth\\auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BehaviorSubject, ignoreElements, map, Observable, tap } from 'rxjs';\nimport { LoginCredentials } from '../model';\nimport { User, UserWithToken } from './model/user.interface';\n\nconst USER_LOCAL_STORAGE_KEY = 'userData';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  \n  private user = new BehaviorSubject<UserWithToken | null>(null);\n  user$ = this.user.asObservable();\n  isLoggedIn$: Observable<boolean> = this.user$.pipe(map(Boolean));\n\n  constructor(private httpClient: HttpClient, private router: Router) {\n    this.loadUserFromLocalStorage();\n  }\n\n  login(credentials: LoginCredentials): Observable<never> {\n    return this.httpClient.post<string>('login', credentials).pipe(\n      tap((userToken) => this.saveTokenToLocalStore(userToken)),\n      tap((userToken) => this.pushNewUser(userToken)),\n      tap(() => this.redirectToDashboard()),\n      ignoreElements()\n    );\n  }\n\n  logout(): void {\n    this.removeUserFromLocalStorage();\n    this.user.next(null);\n    this.router.navigateByUrl('/login');\n  }\n\n  private redirectToDashboard(): void {\n    this.router.navigateByUrl('/dashboard');\n  }\n\n  private pushNewUser(token: string) {\n    this.user.next(this.decodeToken(token));\n  }\n\n  private decodeToken(userToken: string): UserWithToken {\n    const userInfo = JSON.parse(window.atob(userToken)) as User;\n\n    return { ...userInfo, token: userToken };\n  }\n\n  private loadUserFromLocalStorage(): void {\n    const userFromLocal = localStorage.getItem(USER_LOCAL_STORAGE_KEY);\n\n    userFromLocal && this.pushNewUser(userFromLocal);\n  }\n  private saveTokenToLocalStore(userToken: string): void {\n    localStorage.setItem(USER_LOCAL_STORAGE_KEY, userToken);\n  }\n\n  private removeUserFromLocalStorage(): void {\n    localStorage.removeItem(USER_LOCAL_STORAGE_KEY);\n  }\n}\n\n\n\n\n// import { Injectable } from '@angular/core';\n// import { Observable } from 'rxjs';\n// import { GLOBAL } from '../config/GLOBAL';\n// import { HttpClient, HttpHeaders } from '@angular/common/http';\n// import { JwtHelperService } from '@auth0/angular-jwt';\n// import { Router } from '@angular/router';\n\n// @Injectable({\n//   providedIn: 'root',\n// })\n// export class AuthService {\n\n//   public url;\n\n//   constructor(private _http: HttpClient, private _router: Router) {\n//     this.url = GLOBAL.url;\n//   }\n\n//   getToken() {\n//     return localStorage.getItem('token');\n//   }\n\n//   public isAuthenticated(allowRoles: string[]): boolean {\n//     const token = localStorage.getItem('token');\n\n//     if (!token) {\n//       return false;\n//     }\n\n//     try {\n//       const helper = new JwtHelperService();\n//       const decodedToken = helper.decodeToken(token);\n\n//       if (!decodedToken || !decodedToken['role']) {\n//         localStorage.removeItem('token');\n//         return false;\n//       }\n//       return allowRoles.includes(decodedToken['role']);\n//     } catch (error) {\n//       console.error('Error decoding token:', error);\n//       localStorage.removeItem('token');\n//       return false;\n//     }\n//   }\n\n//   check_admin_exists(): Observable<any> {\n//     let headers = new HttpHeaders().set('Content-Type', 'application/json');\n//     return this._http.get<any>(this.url + 'check_admin_exists', { headers: headers });\n//   }\n\n\n//   createAdmin(data: any): Observable<any> {\n//     let headers = new HttpHeaders().set('Content-Type', 'application/json');\n//     return this._http.post(this.url + 'create_admin', data, { headers: headers });\n// }\n\n\n//   login_admin(data: { email: any; password: any }): Observable<any> {\n//     let headers = new HttpHeaders().set('Content-Type', 'application/json');\n//     return this._http.post(this.url + 'login_admin', data, {\n//       headers: headers,\n//     });\n//   }\n\n//   get_admin(token: any): Observable<any> {\n//     let headers = new HttpHeaders({ 'Content-Type': 'application/json', 'Authorization': token });\n//     return this._http.get(this.url + 'get_admin', { headers: headers });\n//   }\n\n//   logout(): void {\n//     localStorage.removeItem('token');\n//     this._router.navigate(['/login']);\n//   }\n// }\n\n// import { Injectable } from '@angular/core';\n\n// @Injectable({\n//   providedIn: 'root'\n// })\n// export class AuthService {\n\n//   constructor() { }\n// }\n"],"mappings":"AAGA,SAASA,eAAe,EAAEC,cAAc,EAAEC,GAAG,EAAcC,GAAG,QAAQ,MAAM;;;;AAI5E,MAAMC,sBAAsB,GAAG,UAAU;AAEzC,MAGaC,WAAW;EAMtBC,YAAoBC,UAAsB,EAAUC,MAAc;IAA9C,KAAAD,UAAU,GAAVA,UAAU;IAAsB,KAAAC,MAAM,GAANA,MAAM;IAJlD,KAAAC,IAAI,GAAG,IAAIT,eAAe,CAAuB,IAAI,CAAC;IAC9D,KAAAU,KAAK,GAAG,IAAI,CAACD,IAAI,CAACE,YAAY,EAAE;IAChC,KAAAC,WAAW,GAAwB,IAAI,CAACF,KAAK,CAACG,IAAI,CAACX,GAAG,CAACY,OAAO,CAAC,CAAC;IAG9D,IAAI,CAACC,wBAAwB,EAAE;EACjC;EAEAC,KAAKA,CAACC,WAA6B;IACjC,OAAO,IAAI,CAACV,UAAU,CAACW,IAAI,CAAS,OAAO,EAAED,WAAW,CAAC,CAACJ,IAAI,CAC5DV,GAAG,CAAEgB,SAAS,IAAK,IAAI,CAACC,qBAAqB,CAACD,SAAS,CAAC,CAAC,EACzDhB,GAAG,CAAEgB,SAAS,IAAK,IAAI,CAACE,WAAW,CAACF,SAAS,CAAC,CAAC,EAC/ChB,GAAG,CAAC,MAAM,IAAI,CAACmB,mBAAmB,EAAE,CAAC,EACrCrB,cAAc,EAAE,CACjB;EACH;EAEAsB,MAAMA,CAAA;IACJ,IAAI,CAACC,0BAA0B,EAAE;IACjC,IAAI,CAACf,IAAI,CAACgB,IAAI,CAAC,IAAI,CAAC;IACpB,IAAI,CAACjB,MAAM,CAACkB,aAAa,CAAC,QAAQ,CAAC;EACrC;EAEQJ,mBAAmBA,CAAA;IACzB,IAAI,CAACd,MAAM,CAACkB,aAAa,CAAC,YAAY,CAAC;EACzC;EAEQL,WAAWA,CAACM,KAAa;IAC/B,IAAI,CAAClB,IAAI,CAACgB,IAAI,CAAC,IAAI,CAACG,WAAW,CAACD,KAAK,CAAC,CAAC;EACzC;EAEQC,WAAWA,CAACT,SAAiB;IACnC,MAAMU,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACC,MAAM,CAACC,IAAI,CAACd,SAAS,CAAC,CAAS;IAE3D,OAAO;MAAE,GAAGU,QAAQ;MAAEF,KAAK,EAAER;IAAS,CAAE;EAC1C;EAEQJ,wBAAwBA,CAAA;IAC9B,MAAMmB,aAAa,GAAGC,YAAY,CAACC,OAAO,CAAChC,sBAAsB,CAAC;IAElE8B,aAAa,IAAI,IAAI,CAACb,WAAW,CAACa,aAAa,CAAC;EAClD;EACQd,qBAAqBA,CAACD,SAAiB;IAC7CgB,YAAY,CAACE,OAAO,CAACjC,sBAAsB,EAAEe,SAAS,CAAC;EACzD;EAEQK,0BAA0BA,CAAA;IAChCW,YAAY,CAACG,UAAU,CAAClC,sBAAsB,CAAC;EACjD;EAAC,QAAAmC,CAAA,G;qBAlDUlC,WAAW,EAAAmC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXzC,WAAW;IAAA0C,OAAA,EAAX1C,WAAW,CAAA2C,IAAA;IAAAC,UAAA,EAFV;EAAM;;SAEP5C,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}