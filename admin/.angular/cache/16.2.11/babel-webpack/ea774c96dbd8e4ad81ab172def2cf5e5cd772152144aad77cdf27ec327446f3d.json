{"ast":null,"code":"import { GLOBAL } from '../config/GLOBAL';\nimport { HttpHeaders } from '@angular/common/http';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nconst USER_LOCAL_STORAGE_KEY = 'userData';\nclass AuthService {\n  constructor(_http, _router) {\n    this._http = _http;\n    this._router = _router;\n    this.url = GLOBAL.url;\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  storeToken(token) {\n    localStorage.setItem('token', token);\n  }\n  isAuthenticated(allowRoles) {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      return false;\n    }\n    try {\n      const helper = new JwtHelperService();\n      const decodedToken = helper.decodeToken(token);\n      if (!decodedToken || !decodedToken['role']) {\n        localStorage.removeItem('token');\n        return false;\n      }\n      return allowRoles.includes(decodedToken['role']);\n    } catch (error) {\n      console.error('Error decoding token:', error);\n      localStorage.removeItem('token');\n      return false;\n    }\n  }\n  check_admin_exists() {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.get(this.url + 'check_admin_exists', {\n      headers: headers\n    });\n  }\n  createAdmin(data) {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.post(this.url + 'create_admin', data, {\n      headers: headers\n    });\n  }\n  login_admin(credentials) {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.post(this.url + 'login_admin', data, {\n      headers: headers\n    });\n  }\n  get_admin(token) {\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': token\n    });\n    return this._http.get(this.url + 'get_admin', {\n      headers: headers\n    });\n  }\n  logout() {\n    localStorage.removeItem('token');\n    this._router.navigate(['/login']);\n  }\n  redirectToDashboard() {\n    this._router.navigateByUrl('/dashboard');\n  }\n  // private pushNewUser(token: string) {\n  //   this.user.next(this.decodeToken(token));\n  // }\n  // private decodeToken(userToken: string): UserWithToken {\n  //   const userInfo = JSON.parse(window.atob(userToken)) as User;\n  //   return { ...userInfo, token: userToken };\n  // }\n  // private loadUserFromLocalStorage(): void {\n  //   const userFromLocal = localStorage.getItem(USER_LOCAL_STORAGE_KEY);\n  //   userFromLocal && this.pushNewUser(userFromLocal);\n  // }\n  saveTokenToLocalStore(userToken) {\n    localStorage.setItem(USER_LOCAL_STORAGE_KEY, userToken);\n  }\n  removeUserFromLocalStorage() {\n    localStorage.removeItem(USER_LOCAL_STORAGE_KEY);\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { AuthService };","map":{"version":3,"names":["GLOBAL","HttpHeaders","JwtHelperService","USER_LOCAL_STORAGE_KEY","AuthService","constructor","_http","_router","url","getToken","localStorage","getItem","storeToken","token","setItem","isAuthenticated","allowRoles","helper","decodedToken","decodeToken","removeItem","includes","error","console","check_admin_exists","headers","set","get","createAdmin","data","post","login_admin","credentials","get_admin","logout","navigate","redirectToDashboard","navigateByUrl","saveTokenToLocalStore","userToken","removeUserFromLocalStorage","_","i0","ɵɵinject","i1","HttpClient","i2","Router","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\core\\auth\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { GLOBAL } from '../config/GLOBAL';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { Router } from '@angular/router';\n\nimport { LoginCredentials } from '../model';\nimport { User, UserWithToken } from '../model/user.interface';\n\nconst USER_LOCAL_STORAGE_KEY = 'userData';\n\n\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n\n  public url;\n\n  constructor(private _http: HttpClient, private _router: Router) {\n    this.url = GLOBAL.url;\n  }\n\n  getToken() {\n    return localStorage.getItem('token');\n  }\n\n  storeToken(token: string) {\n    localStorage.setItem('token', token);\n  }\n\n  public isAuthenticated(allowRoles: string[]): boolean {\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const helper = new JwtHelperService();\n      const decodedToken = helper.decodeToken(token);\n\n      if (!decodedToken || !decodedToken['role']) {\n        localStorage.removeItem('token');\n        return false;\n      }\n      return allowRoles.includes(decodedToken['role']);\n    } catch (error) {\n      console.error('Error decoding token:', error);\n      localStorage.removeItem('token');\n      return false;\n    }\n  }\n\n  check_admin_exists(): Observable<any> {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.get<any>(this.url + 'check_admin_exists', { headers: headers });\n  }\n\n  createAdmin(data: any): Observable<any> {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.post(this.url + 'create_admin', data, { headers: headers });\n}\n\n  login_admin(credentials: LoginCredentials): Observable<any> {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.post<string>(this.url + 'login_admin', data, {\n      headers: headers,\n    });\n  }\n\n  get_admin(token: any): Observable<any> {\n    let headers = new HttpHeaders({ 'Content-Type': 'application/json', 'Authorization': token });\n    return this._http.get(this.url + 'get_admin', { headers: headers });\n  }\n\n  logout(): void {\n    localStorage.removeItem('token');\n    this._router.navigate(['/login']);\n  }\n\n\n  private redirectToDashboard(): void {\n    this._router.navigateByUrl('/dashboard');\n  }\n\n  // private pushNewUser(token: string) {\n  //   this.user.next(this.decodeToken(token));\n  // }\n\n  // private decodeToken(userToken: string): UserWithToken {\n  //   const userInfo = JSON.parse(window.atob(userToken)) as User;\n    \n  //   return { ...userInfo, token: userToken };\n  // }\n\n  // private loadUserFromLocalStorage(): void {\n  //   const userFromLocal = localStorage.getItem(USER_LOCAL_STORAGE_KEY);\n  //   userFromLocal && this.pushNewUser(userFromLocal);\n  // }\n  \n  private saveTokenToLocalStore(userToken: string): void {\n    localStorage.setItem(USER_LOCAL_STORAGE_KEY, userToken);\n  }\n\n  private removeUserFromLocalStorage(): void {\n    localStorage.removeItem(USER_LOCAL_STORAGE_KEY);\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}