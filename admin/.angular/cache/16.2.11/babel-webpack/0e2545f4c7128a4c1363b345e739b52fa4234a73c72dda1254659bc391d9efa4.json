{"ast":null,"code":"import { tap } from 'rxjs/operators';\nimport { HttpHeaders } from '@angular/common/http';\nimport { GLOBAL } from '../config/GLOBAL';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nclass AuthService {\n  constructor(_http, _router) {\n    this._http = _http;\n    this._router = _router;\n    this.loginSuccessSubject = new Subject();\n    this.loginSuccessObservable = this.loginSuccessSubject.asObservable();\n    this.url = GLOBAL.url;\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  isAuthenticated(allowRoles) {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      return false;\n    }\n    try {\n      const helper = new JwtHelperService();\n      const decodedToken = helper.decodeToken(token);\n      if (!decodedToken || !decodedToken['role']) {\n        localStorage.removeItem('token');\n        return false;\n      }\n      return allowRoles.includes(decodedToken['role']);\n    } catch (error) {\n      console.error('Error decoding token:', error);\n      localStorage.removeItem('token');\n      return false;\n    }\n  }\n  check_admin_exists() {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.get(this.url + 'check_admin_exists', {\n      headers: headers\n    });\n  }\n  createAdmin(data) {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.post(this.url + 'create_admin', data, {\n      headers: headers\n    });\n  }\n  // login_admin(data: { email: any; password: any }): Observable<any> {\n  //   let headers = new HttpHeaders().set('Content-Type', 'application/json');\n  //   return this._http.post(this.url + 'login_admin', data, {\n  //     headers: headers,\n  //   });\n  // }\n  login_admin(data) {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.post(this.url + 'login_admin', data, {\n      headers: headers\n    }).pipe(tap(response => {\n      if (response.token) {\n        localStorage.setItem('token', response.token);\n        this._router.navigate(['/']);\n      }\n    }), catchError(error => {\n      console.error('Error during login:', error);\n      return throwError(error);\n    }));\n  }\n  get_admin(token) {\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': token\n    });\n    return this._http.get(this.url + 'get_admin', {\n      headers: headers\n    });\n  }\n  logout() {\n    localStorage.removeItem('token');\n    this._router.navigate(['/login']);\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { AuthService };","map":{"version":3,"names":["tap","HttpHeaders","GLOBAL","JwtHelperService","catchError","throwError","AuthService","constructor","_http","_router","loginSuccessSubject","Subject","loginSuccessObservable","asObservable","url","getToken","localStorage","getItem","isAuthenticated","allowRoles","token","helper","decodedToken","decodeToken","removeItem","includes","error","console","check_admin_exists","headers","set","get","createAdmin","data","post","login_admin","pipe","response","setItem","navigate","get_admin","logout","_","i0","ɵɵinject","i1","HttpClient","i2","Router","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\core\\auth\\auth.service.ts"],"sourcesContent":["// import { Injectable } from '@angular/core';\n// import { Observable } from 'rxjs';\n// import { GLOBAL } from '../config/GLOBAL';\n// import { HttpClient, HttpHeaders } from '@angular/common/http';\n// import { JwtHelperService } from '@auth0/angular-jwt';\n// import { Router } from '@angular/router';\n\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { GLOBAL } from '../config/GLOBAL';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { ApiResponse } from '../model/api-response.interface';\nimport { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport { LoginCredentials } from 'src/app/core/model';\n\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n\n  public url;\n  private loginSuccessSubject = new Subject<boolean>();\npublic loginSuccessObservable = this.loginSuccessSubject.asObservable();\n\n  constructor(private _http: HttpClient, private _router: Router) {\n    this.url = GLOBAL.url;\n  }\n\n  getToken() {\n    return localStorage.getItem('token');\n  }\n\n  public isAuthenticated(allowRoles: string[]): boolean {\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const helper = new JwtHelperService();\n      const decodedToken = helper.decodeToken(token);\n\n      if (!decodedToken || !decodedToken['role']) {\n        localStorage.removeItem('token');\n        return false;\n      }\n      return allowRoles.includes(decodedToken['role']);\n    } catch (error) {\n      console.error('Error decoding token:', error);\n      localStorage.removeItem('token');\n      return false;\n    }\n  }\n\n  check_admin_exists(): Observable<any> {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.get<any>(this.url + 'check_admin_exists', { headers: headers });\n  }\n\n  createAdmin(data: any): Observable<any> {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.post(this.url + 'create_admin', data, { headers: headers });\n}\n\n  // login_admin(data: { email: any; password: any }): Observable<any> {\n  //   let headers = new HttpHeaders().set('Content-Type', 'application/json');\n  //   return this._http.post(this.url + 'login_admin', data, {\n  //     headers: headers,\n  //   });\n  // }\n\n\n  login_admin(data: { email: string; password: string }): Observable<any> {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.post<ApiResponse>(this.url + 'login_admin', data, { headers: headers })\n      .pipe(\n        tap(response => {\n          if (response.token) {\n            localStorage.setItem('token', response.token);\n            this._router.navigate(['/']);\n          }\n        }),\n        catchError(error => {\n          console.error('Error during login:', error);\n          return throwError(error);\n        })\n      );\n  }\n\n  get_admin(token: any): Observable<any> {\n    let headers = new HttpHeaders({ 'Content-Type': 'application/json', 'Authorization': token });\n    return this._http.get(this.url + 'get_admin', { headers: headers });\n  }\n\n  logout(): void {\n    localStorage.removeItem('token');\n    this._router.navigate(['/login']);\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}