{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"src/app/core/services/initial-config.service\";\nclass ActivationComponent {\n  constructor(route, formBuilder, _initialConfigService) {\n    this.route = route;\n    this.formBuilder = formBuilder;\n    this._initialConfigService = _initialConfigService;\n    this.activationForm = this.formBuilder.group({\n      password: ['', [Validators.required, Validators.minLength(8)]],\n      confirmPassword: ['', [Validators.required]]\n    });\n    this.token = '';\n  }\n  ngOnInit() {\n    this.token = this.route.snapshot.paramMap.get('token');\n    this.activationForm = this.formBuilder.group({\n      password: ['', [Validators.required, Validators.minLength(8)]],\n      confirmPassword: ['', [Validators.required]]\n    });\n    // Agrega validaciones adicionales según sea necesario\n  }\n\n  onActivate() {\n    // if (this.activationForm.valid) {\n    //   this._initialConfigService.activateAccount(this.token, this.activationForm.value.password).subscribe(\n    //     response => {\n    //       // Maneja la respuesta\n    //     },\n    //     error => {\n    //       // Maneja los errores\n    //     }\n    //   );\n    // }\n  }\n  static #_ = this.ɵfac = function ActivationComponent_Factory(t) {\n    return new (t || ActivationComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.InitialConfigService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ActivationComponent,\n    selectors: [[\"app-activation\"]],\n    decls: 5,\n    vars: 1,\n    consts: [[3, \"formGroup\", \"ngSubmit\"], [\"type\", \"password\", \"formControlName\", \"password\", \"placeholder\", \"Nueva contrase\\u00F1a\"], [\"type\", \"password\", \"formControlName\", \"confirmPassword\", \"placeholder\", \"Confirmar contrase\\u00F1a\"], [\"type\", \"submit\"]],\n    template: function ActivationComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function ActivationComponent_Template_form_ngSubmit_0_listener() {\n          return ctx.onActivate();\n        });\n        i0.ɵɵelement(1, \"input\", 1)(2, \"input\", 2);\n        i0.ɵɵelementStart(3, \"button\", 3);\n        i0.ɵɵtext(4, \"Activar cuenta\");\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.activationForm);\n      }\n    },\n    dependencies: [i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}\nexport { ActivationComponent };","map":{"version":3,"names":["Validators","ActivationComponent","constructor","route","formBuilder","_initialConfigService","activationForm","group","password","required","minLength","confirmPassword","token","ngOnInit","snapshot","paramMap","get","onActivate","_","i0","ɵɵdirectiveInject","i1","ActivatedRoute","i2","FormBuilder","i3","InitialConfigService","_2","selectors","decls","vars","consts","template","ActivationComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","ActivationComponent_Template_form_ngSubmit_0_listener","ɵɵelement","ɵɵtext","ɵɵelementEnd","ɵɵproperty"],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\modules\\initial-config\\activation\\activation.component.ts","C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\modules\\initial-config\\activation\\activation.component.html"],"sourcesContent":["// activation.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { InitialConfigService } from 'src/app/core/services/initial-config.service';\n\n@Component({\n  selector: 'app-activation',\n  templateUrl: './activation.component.html',\n  styleUrls: ['./activation.component.css']\n})\n  \nexport class ActivationComponent implements OnInit {\n  activationForm: FormGroup = this.formBuilder.group({\n    password: ['', [Validators.required, Validators.minLength(8)]],\n    confirmPassword: ['', [Validators.required]]\n  });\n  token: string = '';\n\n  constructor(\n    private route: ActivatedRoute,\n    private formBuilder: FormBuilder,\n    private _initialConfigService: InitialConfigService\n  ) { }\n\n  ngOnInit(): void {\n    this.token = this.route.snapshot.paramMap.get('token')!;\n    this.activationForm = this.formBuilder.group({\n      password: ['', [Validators.required, Validators.minLength(8)]],\n      confirmPassword: ['', [Validators.required]]\n    });\n    // Agrega validaciones adicionales según sea necesario\n  }\n\n  onActivate() {\n    // if (this.activationForm.valid) {\n    //   this._initialConfigService.activateAccount(this.token, this.activationForm.value.password).subscribe(\n    //     response => {\n    //       // Maneja la respuesta\n    //     },\n    //     error => {\n    //       // Maneja los errores\n    //     }\n    //   );\n    // }\n  }\n}\n","<form [formGroup]=\"activationForm\" (ngSubmit)=\"onActivate()\">\n    <input type=\"password\" formControlName=\"password\" placeholder=\"Nueva contraseña\">\n    <input type=\"password\" formControlName=\"confirmPassword\" placeholder=\"Confirmar contraseña\">\n    <button type=\"submit\">Activar cuenta</button>\n</form>"],"mappings":"AAGA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;;AAGnE,MAMaC,mBAAmB;EAO9BC,YACUC,KAAqB,EACrBC,WAAwB,EACxBC,qBAA2C;IAF3C,KAAAF,KAAK,GAALA,KAAK;IACL,KAAAC,WAAW,GAAXA,WAAW;IACX,KAAAC,qBAAqB,GAArBA,qBAAqB;IAT/B,KAAAC,cAAc,GAAc,IAAI,CAACF,WAAW,CAACG,KAAK,CAAC;MACjDC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACR,UAAU,CAACS,QAAQ,EAAET,UAAU,CAACU,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;MAC9DC,eAAe,EAAE,CAAC,EAAE,EAAE,CAACX,UAAU,CAACS,QAAQ,CAAC;KAC5C,CAAC;IACF,KAAAG,KAAK,GAAW,EAAE;EAMd;EAEJC,QAAQA,CAAA;IACN,IAAI,CAACD,KAAK,GAAG,IAAI,CAACT,KAAK,CAACW,QAAQ,CAACC,QAAQ,CAACC,GAAG,CAAC,OAAO,CAAE;IACvD,IAAI,CAACV,cAAc,GAAG,IAAI,CAACF,WAAW,CAACG,KAAK,CAAC;MAC3CC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACR,UAAU,CAACS,QAAQ,EAAET,UAAU,CAACU,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;MAC9DC,eAAe,EAAE,CAAC,EAAE,EAAE,CAACX,UAAU,CAACS,QAAQ,CAAC;KAC5C,CAAC;IACF;EACF;;EAEAQ,UAAUA,CAAA;IACR;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EAAA;EACD,QAAAC,CAAA,G;qBAjCUjB,mBAAmB,EAAAkB,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,cAAA,GAAAH,EAAA,CAAAC,iBAAA,CAAAG,EAAA,CAAAC,WAAA,GAAAL,EAAA,CAAAC,iBAAA,CAAAK,EAAA,CAAAC,oBAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAnB1B,mBAAmB;IAAA2B,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,6BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCZhCf,EAAA,CAAAiB,cAAA,cAA6D;QAA1BjB,EAAA,CAAAkB,UAAA,sBAAAC,sDAAA;UAAA,OAAYH,GAAA,CAAAlB,UAAA,EAAY;QAAA,EAAC;QACxDE,EAAA,CAAAoB,SAAA,eAAiF;QAEjFpB,EAAA,CAAAiB,cAAA,gBAAsB;QAAAjB,EAAA,CAAAqB,MAAA,qBAAc;QAAArB,EAAA,CAAAsB,YAAA,EAAS;;;QAH3CtB,EAAA,CAAAuB,UAAA,cAAAP,GAAA,CAAA7B,cAAA,CAA4B;;;;;;;SDYrBL,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}