{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { GLOBAL } from '../config/GLOBAL';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nclass AuthService {\n  getToken() {\n    return localStorage.getItem('token') || '';\n  }\n  isLoggedIn() {\n    const token = localStorage.getItem('token');\n    return token ? !this.jwtHelper.isTokenExpired(token) : false;\n  }\n  constructor(_http, _router) {\n    this._http = _http;\n    this._router = _router;\n    this.user = new BehaviorSubject(null);\n    this.user$ = this.user.asObservable();\n    this.isLoggedIn$ = this.user$.pipe(map(user => !!user));\n    this.token = localStorage.getItem('token');\n    this.url = GLOBAL.url;\n    this.jwtHelper = new JwtHelperService();\n  }\n  isAuthenticated(allowRoles) {\n    if (!this.token) return false;\n    try {\n      const decodedToken = this.jwtHelper.decodeToken(this.token);\n      const isValid = allowRoles.includes(decodedToken['role']);\n      if (isValid) {\n        this.user.next({\n          ...decodedToken,\n          token: this.token\n        }); // Corrección aquí\n      } else {\n        this.user.next(null);\n      }\n      return isValid;\n    } catch (error) {\n      console.error('Error decoding token:', error);\n      localStorage.removeItem('token');\n      this.user.next(null);\n      return false;\n    }\n  }\n  login_admin(credentials) {\n    return this._http.post(this.url + 'login', credentials, {\n      headers: new HttpHeaders().set('Content-Type', 'application/json')\n    }).pipe(map(response => {\n      const token = response.token;\n      localStorage.setItem('token', token);\n      const userInfo = this.jwtHelper.decodeToken(token);\n      this.user.next({\n        ...userInfo,\n        token\n      });\n      return response;\n    }));\n  }\n  logout() {\n    localStorage.removeItem('token');\n    this.user.next(null);\n    this._router.navigate(['/login']);\n  }\n  check_admin_exists() {\n    return this._http.get(this.url + 'check_admin_exists', {\n      headers: new HttpHeaders().set('Content-Type', 'application/json')\n    });\n  }\n  createAdmin(data) {\n    return this._http.post(this.url + 'create_admin', data, {\n      headers: new HttpHeaders().set('Content-Type', 'application/json')\n    });\n  }\n  get_admin(token) {\n    return this._http.get(this.url + 'get_admin', {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': token\n      })\n    });\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { AuthService };","map":{"version":3,"names":["HttpHeaders","BehaviorSubject","map","JwtHelperService","GLOBAL","AuthService","getToken","localStorage","getItem","isLoggedIn","token","jwtHelper","isTokenExpired","constructor","_http","_router","user","user$","asObservable","isLoggedIn$","pipe","url","isAuthenticated","allowRoles","decodedToken","decodeToken","isValid","includes","next","error","console","removeItem","login_admin","credentials","post","headers","set","response","setItem","userInfo","logout","navigate","check_admin_exists","get","createAdmin","data","get_admin","_","i0","ɵɵinject","i1","HttpClient","i2","Router","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\core\\auth\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { JwtHelperService } from '@auth0/angular-jwt';\n\nimport { GLOBAL } from '../config/GLOBAL';\nimport { UserWithToken } from '../model/user.interface';\nimport { LoginCredentials } from '../model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private url: string;\n  private jwtHelper: JwtHelperService;\n  private user = new BehaviorSubject<UserWithToken | null>(null);\n  public user$ = this.user.asObservable();\n  public isLoggedIn$: Observable<boolean> = this.user$.pipe(map(user => !!user));\n\n  public getToken(): string {\n    return localStorage.getItem('token') || '';\n  }\n  \n  public isLoggedIn(): boolean {\n    const token = localStorage.getItem('token');\n    return token ? !this.jwtHelper.isTokenExpired(token) : false;\n  }\n  \n  public  token = localStorage.getItem('token');\n  \n  constructor(private _http: HttpClient, private _router: Router) {\n    this.url = GLOBAL.url;\n    this.jwtHelper = new JwtHelperService();\n  }\n\n  public isAuthenticated(allowRoles: string[]): boolean {\n    if (!this.token) return false;\n  \n    try {\n      const decodedToken = this.jwtHelper.decodeToken(this.token);\n      const isValid = allowRoles.includes(decodedToken['role']);\n      if (isValid) {\n        this.user.next({ ...decodedToken, token: this.token }); // Corrección aquí\n      } else {\n        this.user.next(null);\n      }\n      return isValid;\n    } catch (error) {\n      console.error('Error decoding token:', error);\n      localStorage.removeItem('token');\n      this.user.next(null);\n      return false;\n    }\n  }\n  \n\n  login_admin(credentials: LoginCredentials): Observable<any> {\n    return this._http.post(this.url + 'login', credentials, {\n      headers: new HttpHeaders().set('Content-Type', 'application/json'),\n    }).pipe(\n      map((response: any) => {\n        const token = response.token; \n        localStorage.setItem('token', token);\n        const userInfo = this.jwtHelper.decodeToken(token);\n        this.user.next({ ...userInfo, token });\n        return response;\n      })\n    );\n  }\n\n  logout(): void {\n    localStorage.removeItem('token');\n    this.user.next(null);\n    this._router.navigate(['/login']);\n  }\n\n  check_admin_exists(): Observable<any> {\n    return this._http.get<any>(this.url + 'check_admin_exists', { \n      headers: new HttpHeaders().set('Content-Type', 'application/json') \n    });\n  }\n\n  createAdmin(data: any): Observable<any> {\n    return this._http.post(this.url + 'create_admin', data, { \n      headers: new HttpHeaders().set('Content-Type', 'application/json') \n    });\n  }\n\n  get_admin(token: any): Observable<any> {\n    return this._http.get(this.url + 'get_admin', { \n      headers: new HttpHeaders({ 'Content-Type': 'application/json', 'Authorization': token }) \n    });\n  }\n}\n\n// import { Injectable } from '@angular/core';\n// import { Observable } from 'rxjs';\n// import { GLOBAL } from '../config/GLOBAL';\n// import { HttpClient, HttpHeaders } from '@angular/common/http';\n// import { JwtHelperService } from '@auth0/angular-jwt';\n// import { Router } from '@angular/router';\n\n// @Injectable({\n//   providedIn: 'root',\n// })\n// export class AuthService {\n\n//   public url;\n\n//   constructor(private _http: HttpClient, private _router: Router) {\n//     this.url = GLOBAL.url;\n//   }\n\n//   public isAuthenticated(allowRoles: string[]): boolean {\n//     const token = localStorage.getItem('token');\n\n//     if (!token) {\n//       return false;\n//     }\n\n//     try {\n//       const helper = new JwtHelperService();\n//       const decodedToken = helper.decodeToken(token);\n\n//       if (!decodedToken || !decodedToken['role']) {\n//         localStorage.removeItem('token');\n//         return false;\n//       }\n//       return allowRoles.includes(decodedToken['role']);\n//     } catch (error) {\n//       console.error('Error decoding token:', error);\n//       localStorage.removeItem('token');\n//       return false;\n//     }\n//   }\n\n//   check_admin_exists(): Observable<any> {\n//     let headers = new HttpHeaders().set('Content-Type', 'application/json');\n//     return this._http.get<any>(this.url + 'check_admin_exists', { headers: headers });\n//   }\n\n\n//   createAdmin(data: any): Observable<any> {\n//     let headers = new HttpHeaders().set('Content-Type', 'application/json');\n//     return this._http.post(this.url + 'create_admin', data, { headers: headers });\n// }\n\n\n//   login_admin(data: { email: any; password: any }): Observable<any> {\n//     let headers = new HttpHeaders().set('Content-Type', 'application/json');\n//     return this._http.post(this.url + 'login_admin', data, {\n//       headers: headers,\n//     });\n//   }\n\n//   get_admin(token: any): Observable<any> {\n//     let headers = new HttpHeaders({ 'Content-Type': 'application/json', 'Authorization': token });\n//     return this._http.get(this.url + 'get_admin', { headers: headers });\n//   }\n\n//   logout(): void {\n//     localStorage.removeItem('token');\n//     this._router.navigate(['/login']);\n//   }\n// }\n\n// import { Injectable } from '@angular/core';\n\n// @Injectable({\n//   providedIn: 'root'\n// })\n// export class AuthService {\n\n//   constructor() { }\n// }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}