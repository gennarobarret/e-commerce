{"ast":null,"code":"import { GLOBAL } from '../config/GLOBAL';\nimport { HttpHeaders } from '@angular/common/http';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nclass AuthService {\n  constructor(_http, _router) {\n    this._http = _http;\n    this._router = _router;\n    this.url = GLOBAL.url;\n  }\n  isAuthenticated(allowRoles) {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      return false;\n    }\n    try {\n      const helper = new JwtHelperService();\n      const decodedToken = helper.decodeToken(token);\n      if (!decodedToken || !decodedToken['role']) {\n        localStorage.removeItem('token');\n        return false;\n      }\n      return allowRoles.includes(decodedToken['role']);\n    } catch (error) {\n      console.error('Error decoding token:', error);\n      localStorage.removeItem('token');\n      return false;\n    }\n  }\n  check_admin_exists() {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.get(this.url + 'check_admin_exists', {\n      headers: headers\n    });\n  }\n  createAdmin(data) {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.post(this.url + 'create_admin', data, {\n      headers: headers\n    });\n  }\n  login_admin(data) {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.post(this.url + 'login_admin', data, {\n      headers: headers\n    });\n  }\n  get_admin(token) {\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': token\n    });\n    return this._http.get(this.url + 'get_admin', {\n      headers: headers\n    });\n  }\n  logout() {\n    localStorage.removeItem('token');\n    this._router.navigate(['/login']);\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { AuthService };","map":{"version":3,"names":["GLOBAL","HttpHeaders","JwtHelperService","AuthService","constructor","_http","_router","url","isAuthenticated","allowRoles","token","localStorage","getItem","helper","decodedToken","decodeToken","removeItem","includes","error","console","check_admin_exists","headers","set","get","createAdmin","data","post","login_admin","get_admin","logout","navigate","_","i0","ɵɵinject","i1","HttpClient","i2","Router","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\core\\auth\\auth.service.ts"],"sourcesContent":["// import { HttpClient } from '@angular/common/http';\n// import { Injectable } from '@angular/core';\n// import { Router } from '@angular/router';\n// import { BehaviorSubject, ignoreElements, map, Observable, tap } from 'rxjs';\n// import { LoginCredentials } from '../model';\n// import { User, UserWithToken } from '../model/user.interface';\n\n// const USER_LOCAL_STORAGE_KEY = 'userData';\n\n// @Injectable({\n//   providedIn: 'root',\n// })\n// export class AuthService {\n  \n//   private user = new BehaviorSubject<UserWithToken | null>(null);\n//   user$ = this.user.asObservable();\n//   isLoggedIn$: Observable<boolean> = this.user$.pipe(map(Boolean));\n\n//   constructor(private httpClient: HttpClient, private router: Router) {\n//     this.loadUserFromLocalStorage();\n//   }\n\n//   login(credentials: LoginCredentials): Observable<never> {\n//     return this.httpClient.post<string>('login', credentials).pipe(\n//       tap((userToken) => this.saveTokenToLocalStore(userToken)),\n//       tap((userToken) => this.pushNewUser(userToken)),\n//       tap(() => this.redirectToDashboard()),\n//       ignoreElements()\n//     );\n//   }\n\n//   logout(): void {\n//     this.removeUserFromLocalStorage();\n//     this.user.next(null);\n//     this.router.navigateByUrl('/login');\n//   }\n\n//   private redirectToDashboard(): void {\n//     this.router.navigateByUrl('/dashboard');\n//   }\n\n//   private pushNewUser(token: string) {\n//     this.user.next(this.decodeToken(token));\n//   }\n\n//   private decodeToken(userToken: string): UserWithToken {\n//     const userInfo = JSON.parse(window.atob(userToken)) as User;\n\n//     return { ...userInfo, token: userToken };\n//   }\n\n//   private loadUserFromLocalStorage(): void {\n//     const userFromLocal = localStorage.getItem(USER_LOCAL_STORAGE_KEY);\n\n//     userFromLocal && this.pushNewUser(userFromLocal);\n//   }\n//   private saveTokenToLocalStore(userToken: string): void {\n//     localStorage.setItem(USER_LOCAL_STORAGE_KEY, userToken);\n//   }\n\n//   private removeUserFromLocalStorage(): void {\n//     localStorage.removeItem(USER_LOCAL_STORAGE_KEY);\n//   }\n// }\n\n\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { GLOBAL } from '../config/GLOBAL';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n\n  public url;\n\n  constructor(private _http: HttpClient, private _router: Router) {\n    this.url = GLOBAL.url;\n  }\n\n\n  public isAuthenticated(allowRoles: string[]): boolean {\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const helper = new JwtHelperService();\n      const decodedToken = helper.decodeToken(token);\n\n      if (!decodedToken || !decodedToken['role']) {\n        localStorage.removeItem('token');\n        return false;\n      }\n      return allowRoles.includes(decodedToken['role']);\n    } catch (error) {\n      console.error('Error decoding token:', error);\n      localStorage.removeItem('token');\n      return false;\n    }\n  }\n\n  check_admin_exists(): Observable<any> {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.get<any>(this.url + 'check_admin_exists', { headers: headers });\n  }\n\n\n  createAdmin(data: any): Observable<any> {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.post(this.url + 'create_admin', data, { headers: headers });\n}\n\n\n  login_admin(data: { email: any; password: any }): Observable<any> {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.post(this.url + 'login_admin', data, {\n      headers: headers,\n    });\n  }\n\n  get_admin(token: any): Observable<any> {\n    let headers = new HttpHeaders({ 'Content-Type': 'application/json', 'Authorization': token });\n    return this._http.get(this.url + 'get_admin', { headers: headers });\n  }\n\n  logout(): void {\n    localStorage.removeItem('token');\n    this._router.navigate(['/login']);\n  }\n}\n\n// import { Injectable } from '@angular/core';\n\n// @Injectable({\n//   providedIn: 'root'\n// })\n// export class AuthService {\n\n//   constructor() { }\n// }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}