{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../core/auth/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport const isLoggedInGuard = (route, state) => {\n  return true;\n};\nclass LayoutGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(next, state) {\n    // Verifica si el usuario está autenticado o tiene los permisos necesarios para acceder al LayoutModule\n    if (this.authService.isAuthenticated()) {\n      return true;\n    } else {\n      // Si el usuario no está autenticado, redirige a la página de inicio de sesión o a la página que desees.\n      return this.router.createUrlTree(['/auth/login']);\n    }\n  }\n  static #_ = this.ɵfac = function LayoutGuard_Factory(t) {\n    return new (t || LayoutGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LayoutGuard,\n    factory: LayoutGuard.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { LayoutGuard };","map":{"version":3,"names":["isLoggedInGuard","route","state","LayoutGuard","constructor","authService","router","canActivate","next","isAuthenticated","createUrlTree","_","i0","ɵɵinject","i1","AuthService","i2","Router","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\core\\guards\\is-logged-in.guard.ts"],"sourcesContent":["import { CanActivateFn } from '@angular/router';\n\nexport const isLoggedInGuard: CanActivateFn = (route, state) => {\n  return true;\n};\n\nimport { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { AuthService } from '../../core/auth/auth.service'; // Asegúrate de que la ruta sea correcta\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LayoutGuard implements CanActivate {\n\n  constructor(\n    private authService: AuthService,\n    private router: Router\n  ) {}\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): boolean | UrlTree {\n    // Verifica si el usuario está autenticado o tiene los permisos necesarios para acceder al LayoutModule\n    if (this.authService.isAuthenticated()) {\n      return true;\n    } else {\n      // Si el usuario no está autenticado, redirige a la página de inicio de sesión o a la página que desees.\n      return this.router.createUrlTree(['/auth/login']);\n    }\n  }\n}\n"],"mappings":";;;AAEA,OAAO,MAAMA,eAAe,GAAkBA,CAACC,KAAK,EAAEC,KAAK,KAAI;EAC7D,OAAO,IAAI;AACb,CAAC;AAMD,MAGaC,WAAW;EAEtBC,YACUC,WAAwB,EACxBC,MAAc;IADd,KAAAD,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;EACb;EAEHC,WAAWA,CACTC,IAA4B,EAC5BN,KAA0B;IAC1B;IACA,IAAI,IAAI,CAACG,WAAW,CAACI,eAAe,EAAE,EAAE;MACtC,OAAO,IAAI;KACZ,MAAM;MACL;MACA,OAAO,IAAI,CAACH,MAAM,CAACI,aAAa,CAAC,CAAC,aAAa,CAAC,CAAC;;EAErD;EAAC,QAAAC,CAAA,G;qBAjBUR,WAAW,EAAAS,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXf,WAAW;IAAAgB,OAAA,EAAXhB,WAAW,CAAAiB,IAAA;IAAAC,UAAA,EAFV;EAAM;;SAEPlB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}