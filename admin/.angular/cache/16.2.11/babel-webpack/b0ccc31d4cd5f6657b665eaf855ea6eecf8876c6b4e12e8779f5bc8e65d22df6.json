{"ast":null,"code":"\"use strict\";\n\n// import { HttpClient } from '@angular/common/http';\n// import { Injectable } from '@angular/core';\n// import { Router } from '@angular/router';\n// import { BehaviorSubject, ignoreElements, map, Observable, tap } from 'rxjs';\n// import { LoginCredentials } from '../model';\n// import { User, UserWithToken } from '../model/user.interface';\n// const USER_LOCAL_STORAGE_KEY = 'userData';\n// @Injectable({\n//   providedIn: 'root',\n// })\n// export class AuthService {\n//   private user = new BehaviorSubject<UserWithToken | null>(null);\n//   user$ = this.user.asObservable();\n//   isLoggedIn$: Observable<boolean> = this.user$.pipe(map(Boolean));\n//   constructor(private httpClient: HttpClient, private router: Router) {\n//     this.loadUserFromLocalStorage();\n//   }\n//   login(credentials: LoginCredentials): Observable<never> {\n//     return this.httpClient.post<string>('login', credentials).pipe(\n//       tap((userToken) => this.saveTokenToLocalStore(userToken)),\n//       tap((userToken) => this.pushNewUser(userToken)),\n//       tap(() => this.redirectToDashboard()),\n//       ignoreElements()\n//     );\n//   }\n//   logout(): void {\n//     this.removeUserFromLocalStorage();\n//     this.user.next(null);\n//     this.router.navigateByUrl('/login');\n//   }\n//   private redirectToDashboard(): void {\n//     this.router.navigateByUrl('/dashboard');\n//   }\n//   private pushNewUser(token: string) {\n//     this.user.next(this.decodeToken(token));\n//   }\n//   private decodeToken(userToken: string): UserWithToken {\n//     const userInfo = JSON.parse(window.atob(userToken)) as User;\n//     return { ...userInfo, token: userToken };\n//   }\n//   private loadUserFromLocalStorage(): void {\n//     const userFromLocal = localStorage.getItem(USER_LOCAL_STORAGE_KEY);\n//     userFromLocal && this.pushNewUser(userFromLocal);\n//   }\n//   private saveTokenToLocalStore(userToken: string): void {\n//     localStorage.setItem(USER_LOCAL_STORAGE_KEY, userToken);\n//   }\n//   private removeUserFromLocalStorage(): void {\n//     localStorage.removeItem(USER_LOCAL_STORAGE_KEY);\n//   }\n// }\n// import { Injectable } from '@angular/core';\n// import { Observable } from 'rxjs';\n// import { GLOBAL } from '../config/GLOBAL';\n// import { HttpClient, HttpHeaders } from '@angular/common/http';\n// import { JwtHelperService } from '@auth0/angular-jwt';\n// import { Router } from '@angular/router';\n// @Injectable({\n//   providedIn: 'root',\n// })\n// export class AuthService {\n//   public url;\n//   constructor(private _http: HttpClient, private _router: Router) {\n//     this.url = GLOBAL.url;\n//   }\n//   getToken() {\n//     return localStorage.getItem('token');\n//   }\n//   public isAuthenticated(allowRoles: string[]): boolean {\n//     const token = localStorage.getItem('token');\n//     if (!token) {\n//       return false;\n//     }\n//     try {\n//       const helper = new JwtHelperService();\n//       const decodedToken = helper.decodeToken(token);\n//       if (!decodedToken || !decodedToken['role']) {\n//         localStorage.removeItem('token');\n//         return false;\n//       }\n//       return allowRoles.includes(decodedToken['role']);\n//     } catch (error) {\n//       console.error('Error decoding token:', error);\n//       localStorage.removeItem('token');\n//       return false;\n//     }\n//   }\n//   check_admin_exists(): Observable<any> {\n//     let headers = new HttpHeaders().set('Content-Type', 'application/json');\n//     return this._http.get<any>(this.url + 'check_admin_exists', { headers: headers });\n//   }\n//   createAdmin(data: any): Observable<any> {\n//     let headers = new HttpHeaders().set('Content-Type', 'application/json');\n//     return this._http.post(this.url + 'create_admin', data, { headers: headers });\n// }\n//   login_admin(data: { email: any; password: any }): Observable<any> {\n//     let headers = new HttpHeaders().set('Content-Type', 'application/json');\n//     return this._http.post(this.url + 'login_admin', data, {\n//       headers: headers,\n//     });\n//   }\n//   get_admin(token: any): Observable<any> {\n//     let headers = new HttpHeaders({ 'Content-Type': 'application/json', 'Authorization': token });\n//     return this._http.get(this.url + 'get_admin', { headers: headers });\n//   }\n//   logout(): void {\n//     localStorage.removeItem('token');\n//     this._router.navigate(['/login']);\n//   }\n// }\n// import { Injectable } from '@angular/core';\n// @Injectable({\n//   providedIn: 'root'\n// })\n// export class AuthService {\n//   constructor() { }\n// }","map":{"version":3,"names":[],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\core\\auth\\auth.service.ts"],"sourcesContent":["// import { HttpClient } from '@angular/common/http';\n// import { Injectable } from '@angular/core';\n// import { Router } from '@angular/router';\n// import { BehaviorSubject, ignoreElements, map, Observable, tap } from 'rxjs';\n// import { LoginCredentials } from '../model';\n// import { User, UserWithToken } from '../model/user.interface';\n\n// const USER_LOCAL_STORAGE_KEY = 'userData';\n\n// @Injectable({\n//   providedIn: 'root',\n// })\n// export class AuthService {\n  \n//   private user = new BehaviorSubject<UserWithToken | null>(null);\n//   user$ = this.user.asObservable();\n//   isLoggedIn$: Observable<boolean> = this.user$.pipe(map(Boolean));\n\n//   constructor(private httpClient: HttpClient, private router: Router) {\n//     this.loadUserFromLocalStorage();\n//   }\n\n//   login(credentials: LoginCredentials): Observable<never> {\n//     return this.httpClient.post<string>('login', credentials).pipe(\n//       tap((userToken) => this.saveTokenToLocalStore(userToken)),\n//       tap((userToken) => this.pushNewUser(userToken)),\n//       tap(() => this.redirectToDashboard()),\n//       ignoreElements()\n//     );\n//   }\n\n//   logout(): void {\n//     this.removeUserFromLocalStorage();\n//     this.user.next(null);\n//     this.router.navigateByUrl('/login');\n//   }\n\n//   private redirectToDashboard(): void {\n//     this.router.navigateByUrl('/dashboard');\n//   }\n\n//   private pushNewUser(token: string) {\n//     this.user.next(this.decodeToken(token));\n//   }\n\n//   private decodeToken(userToken: string): UserWithToken {\n//     const userInfo = JSON.parse(window.atob(userToken)) as User;\n\n//     return { ...userInfo, token: userToken };\n//   }\n\n//   private loadUserFromLocalStorage(): void {\n//     const userFromLocal = localStorage.getItem(USER_LOCAL_STORAGE_KEY);\n\n//     userFromLocal && this.pushNewUser(userFromLocal);\n//   }\n//   private saveTokenToLocalStore(userToken: string): void {\n//     localStorage.setItem(USER_LOCAL_STORAGE_KEY, userToken);\n//   }\n\n//   private removeUserFromLocalStorage(): void {\n//     localStorage.removeItem(USER_LOCAL_STORAGE_KEY);\n//   }\n// }\n\n\n\n\n// import { Injectable } from '@angular/core';\n// import { Observable } from 'rxjs';\n// import { GLOBAL } from '../config/GLOBAL';\n// import { HttpClient, HttpHeaders } from '@angular/common/http';\n// import { JwtHelperService } from '@auth0/angular-jwt';\n// import { Router } from '@angular/router';\n\n// @Injectable({\n//   providedIn: 'root',\n// })\n// export class AuthService {\n\n//   public url;\n\n//   constructor(private _http: HttpClient, private _router: Router) {\n//     this.url = GLOBAL.url;\n//   }\n\n//   getToken() {\n//     return localStorage.getItem('token');\n//   }\n\n//   public isAuthenticated(allowRoles: string[]): boolean {\n//     const token = localStorage.getItem('token');\n\n//     if (!token) {\n//       return false;\n//     }\n\n//     try {\n//       const helper = new JwtHelperService();\n//       const decodedToken = helper.decodeToken(token);\n\n//       if (!decodedToken || !decodedToken['role']) {\n//         localStorage.removeItem('token');\n//         return false;\n//       }\n//       return allowRoles.includes(decodedToken['role']);\n//     } catch (error) {\n//       console.error('Error decoding token:', error);\n//       localStorage.removeItem('token');\n//       return false;\n//     }\n//   }\n\n//   check_admin_exists(): Observable<any> {\n//     let headers = new HttpHeaders().set('Content-Type', 'application/json');\n//     return this._http.get<any>(this.url + 'check_admin_exists', { headers: headers });\n//   }\n\n\n//   createAdmin(data: any): Observable<any> {\n//     let headers = new HttpHeaders().set('Content-Type', 'application/json');\n//     return this._http.post(this.url + 'create_admin', data, { headers: headers });\n// }\n\n\n//   login_admin(data: { email: any; password: any }): Observable<any> {\n//     let headers = new HttpHeaders().set('Content-Type', 'application/json');\n//     return this._http.post(this.url + 'login_admin', data, {\n//       headers: headers,\n//     });\n//   }\n\n//   get_admin(token: any): Observable<any> {\n//     let headers = new HttpHeaders({ 'Content-Type': 'application/json', 'Authorization': token });\n//     return this._http.get(this.url + 'get_admin', { headers: headers });\n//   }\n\n//   logout(): void {\n//     localStorage.removeItem('token');\n//     this._router.navigate(['/login']);\n//   }\n// }\n\n// import { Injectable } from '@angular/core';\n\n// @Injectable({\n//   providedIn: 'root'\n// })\n// export class AuthService {\n\n//   constructor() { }\n// }\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA"},"metadata":{},"sourceType":"script","externalDependencies":[]}