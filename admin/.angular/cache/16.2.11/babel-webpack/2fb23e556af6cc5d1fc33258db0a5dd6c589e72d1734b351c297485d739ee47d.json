{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\modules\\account-settings\\profile\\profile.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { GLOBAL } from 'src/app/core/config/GLOBAL';\nimport { FormBuilder, FormGroup, Validators, FormControl } from \"@angular/forms\";\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/core/auth/auth.service';\nimport { ToastService } from 'src/app/shared/services/toast.service';\nimport { ProfileData } from 'src/app/core/model/profile-data';\nimport { GeoInfoService } from 'src/app/shared/services/geo-info.service';\nimport { switchMap, \n\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css'],\n})\nexport class ProfileComponent {\n  updateForm!: FormGroup;\n  submitted = false;\n\n  public user: any = {\n    data: {},\n    address: {\n      country: '',\n      state: '',\n    },\n  };\n  countries: any[] = [];\n  states: any[] = [];\n\n  constructor(\n    private _formBuilder: FormBuilder,\n    private _authService: AuthService,\n    private _router: Router,\n    private _toastService: ToastService,\n    private _geoInfoService: GeoInfoService\n  ) {\n    this.updateForm = this._formBuilder.group({\n      inputUserName: [\n        '',\n        [\n          Validators.required,\n          Validators.minLength(12),\n          Validators.maxLength(25),\n          Validators.pattern(/^\\S*$/),\n          Validators.pattern(/^[a-zA-Z0-9]*$/),\n        ],\n      ],\n      inputFirstName: [\n        '',\n        [\n          Validators.required,\n          Validators.minLength(3),\n          Validators.maxLength(25),\n          Validators.pattern('^[a-zA-Z0-9\\\\sñÑ]+$'),\n        ],\n      ],\n      inputLastName: [\n        '',\n        [\n          Validators.required,\n          Validators.minLength(3),\n          Validators.maxLength(25),\n          Validators.pattern('^[a-zA-Z0-9\\\\sñÑ]+$'),\n        ],\n      ],\n      inputOrganizationName: [\n        '',\n        [\n          Validators.required,\n          Validators.minLength(3),\n          Validators.maxLength(30),\n          Validators.pattern('^[a-zA-Z0-9\\\\sñÑ]+$'),\n        ],\n      ],\n      inputEmailAddress: ['', [Validators.required, Validators.email]],\n      inputAddress: this._formBuilder.group({\n        street1: ['', [Validators.required]],\n        street2: [''],\n        city: [''],\n        state: ['', [Validators.required]],\n        zip: [''],\n        country: ['', [Validators.required]],\n      }),\n      inputPhoneNumber: [\n        '',\n        [Validators.required, Validators.pattern('[0-9]+')],\n      ],\n      inputBirthday: ['', [Validators.required, this.validateDate.bind(this)]],\n      inputRole: [{ value: '', disabled: true }, [Validators.required]],\n      inputIdentification: [\n        { value: '', disabled: true },\n        [Validators.required],\n      ],\n      inputAdditionalInfo: [\n        '',\n        [\n          Validators.required,\n          Validators.minLength(10),\n          Validators.maxLength(50),\n          Validators.pattern('^[a-zA-Z0-9\\\\sñÑ]+$'),\n        ],\n      ],\n      inputProfileImage: ['', [Validators.required]],\n    });\n  }\n\n  ngOnInit(): void {\n    this.fetchUserData();\n    this.get_country();\n  }\n\n  fetchUserData() {\n    this._authService\n      .get_admin()\n      .pipe(\n        switchMap((user) => {\n          this.user = user;\n          // ... [resto del código para establecer los valores del formulario]\n          return this._geoInfoService.get_States();\n        }),\n        catchError((error) => {\n          console.error(error);\n          return throwError(error);\n        })\n      )\n      .subscribe((states) => {\n        // Filtra y asigna los estados aquí\n      });\n  }\n\n  // fetchUserData() {\n  //   this._authService.get_admin().subscribe(\n  //     (response) => {\n  //       this.user = response;\n  //       if (response.data === undefined) {\n  //         this._router.navigate(['']);\n  //       } else {\n  //         const {\n  //           userName,\n  //           firstName,\n  //           lastName,\n  //           organizationName,\n  //           emailAddress,\n  //           address,\n  //           phoneNumber,\n  //           birthday,\n  //           role,\n  //           identification,\n  //           additionalInfo,\n  //           profileImage,\n  //           createdAt,\n  //           updatedAt,\n  //         } = response.data;\n  //         const birthdayFormatted = this.convertDateFormat(\n  //           response.data.birthday\n  //         );\n  //         this.updateForm.patchValue({\n  //           inputUserName: userName,\n  //           inputFirstName: firstName,\n  //           inputLastName: lastName,\n  //           inputOrganizationName: organizationName,\n  //           inputEmailAddress: emailAddress,\n  //           inputPhoneNumber: phoneNumber,\n  //           inputBirthday: birthdayFormatted,\n  //           inputRole: role,\n  //           inputIdentification: identification,\n  //           inputAdditionalInfo: additionalInfo,\n  //           inputProfileImage: profileImage,\n  //           inputCreatedAt: createdAt,\n  //           inputUpdatedAt: updatedAt,\n  //           inputAddress: {\n  //             street1: address.street1,\n  //             street2: address.street2,\n  //             city: address.city,\n  //             state: address.state,\n  //             zip: address.zip,\n  //             country: address.country,\n  //           },\n  //         });\n  //         this.get_states();\n  //         console.log(\n  //           '🚀 ~ ProfileComponent ~ get_states ~ this.user.address:',\n  //           this.user\n  //         );\n  //       }\n  //     },\n  //     (error) => {\n  //       // Añade el tipo aquí si es necesario, por ejemplo (error: any)\n  //       console.error(error);\n  //     }\n  //   );\n  // }\n\n  get_country() {\n    this._geoInfoService.get_Countries().subscribe((response) => {\n      response.forEach((element: any) => {\n        this.countries.push({\n          country_id: element.id,\n          country_name: element.name,\n          country_abbrev: element.iso2,\n          country_phone_code: element.prefix,\n          country_divGeo: element.divGeo,\n        });\n      });\n      // Sort the countries array by country_name property\n      this.sortByProperty(this.countries, 'country_name');\n    });\n  }\n\n  get_states() {\n    // Verificar si el país está definido\n    if (!this.user || !this.user.address || !this.user.address.country) {\n      console.warn('País del usuario no definido.');\n      return;\n    }\n    this._geoInfoService.get_States().subscribe((response) => {\n      this.states = [];\n\n      response.forEach((element: any) => {\n        if (element.country_id == this.user.address.country) {\n          this.states.push({\n            country_id: element.country_id,\n            province_abbrev: element.province_abbrev,\n            province_name: element.province_name,\n          });\n        }\n      });\n\n      this.states.sort((a, b) =>\n        a.province_name.localeCompare(b.province_name)\n      );\n    });\n  }\n\n  onCountryChange() {}\n\n  private convertDateFormat(dateString: string): string {\n    const date = new Date(dateString);\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    return `${year}-${month}-${day}`;\n  }\n\n  private validateDate(control: FormControl): { [key: string]: any } | null {\n    const inputDateStr: string = control.value;\n    if (!/^\\d{4}-\\d{2}-\\d{2}$/.test(inputDateStr)) {\n      return { invalidDateFormat: true };\n    }\n    return null;\n  }\n\n  sortByProperty(arr: any[], property: string) {\n    return arr.sort((a, b) => a[property].localeCompare(b[property]));\n  }\n\n  update() {\n    this.submitted = true;\n  }\n}\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}