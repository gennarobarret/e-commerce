{"ast":null,"code":"import { throwError, Subject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { HttpHeaders } from '@angular/common/http';\nimport { GLOBAL } from '../config/GLOBAL';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nconst USER_LOCAL_STORAGE_KEY = 'xxx';\nclass AuthService {\n  constructor(_http, _router) {\n    this._http = _http;\n    this._router = _router;\n    this.loginSuccessSubject = new Subject();\n    this.loginSuccessObservable = this.loginSuccessSubject.asObservable();\n    this.url = GLOBAL.url;\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  isAuthenticated(allowRoles) {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      return false;\n    }\n    try {\n      const helper = new JwtHelperService();\n      const decodedToken = helper.decodeToken(token);\n      if (!decodedToken || !decodedToken['role']) {\n        localStorage.removeItem('token');\n        return false;\n      }\n      return allowRoles.includes(decodedToken['role']);\n    } catch (error) {\n      console.error('Error decoding token:', error);\n      localStorage.removeItem('token');\n      return false;\n    }\n  }\n  check_admin_exists() {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.get(this.url + 'check_admin_exists', {\n      headers: headers\n    });\n  }\n  createAdmin(data) {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.post(this.url + 'create_admin', data, {\n      headers: headers\n    });\n  }\n  login_admin(credentials) {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.post(this.url + 'login_admin', credentials, {\n      headers: headers\n    }).pipe(tap(response => {\n      if (response.token) {\n        localStorage.setItem('token', response.token);\n        this._router.navigate(['/']);\n        this.loginSuccessSubject.next(true);\n      }\n    }), catchError(error => {\n      let errorMessage = 'An error occurred during login';\n      if (error.error.message) {\n        errorMessage = error.error.message;\n      }\n      return throwError(() => new Error(errorMessage));\n    }));\n  }\n  get_admin(token) {\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: token\n    });\n    return this._http.get(this.url + 'get_admin', {\n      headers: headers\n    });\n  }\n  logout() {\n    localStorage.removeItem('token');\n    this._router.navigate(['/login']);\n  }\n  // private loadUserFromLocalStorage(): void {\n  //   const userFromLocal = localStorage.getItem(USER_LOCAL_STORAGE_KEY);\n  //   userFromLocal && this.pushNewUser(userFromLocal);\n  // }\n  saveTokenToLocalStore(userToken) {\n    localStorage.setItem(USER_LOCAL_STORAGE_KEY, userToken);\n  }\n  removeUserFromLocalStorage() {\n    localStorage.removeItem(USER_LOCAL_STORAGE_KEY);\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { AuthService };","map":{"version":3,"names":["throwError","Subject","tap","HttpHeaders","GLOBAL","JwtHelperService","catchError","USER_LOCAL_STORAGE_KEY","AuthService","constructor","_http","_router","loginSuccessSubject","loginSuccessObservable","asObservable","url","getToken","localStorage","getItem","isAuthenticated","allowRoles","token","helper","decodedToken","decodeToken","removeItem","includes","error","console","check_admin_exists","headers","set","get","createAdmin","data","post","login_admin","credentials","pipe","response","setItem","navigate","next","errorMessage","message","Error","get_admin","Authorization","logout","saveTokenToLocalStore","userToken","removeUserFromLocalStorage","_","i0","ɵɵinject","i1","HttpClient","i2","Router","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\core\\auth\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, throwError, Subject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { GLOBAL } from '../config/GLOBAL';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { catchError } from 'rxjs/operators';\nimport { LoginCredentials } from 'src/app/core/model';\nimport { ApiResponse } from '../model/api-response.interface';\n\n\nconst USER_LOCAL_STORAGE_KEY = 'xxx';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  public url;\n  private loginSuccessSubject = new Subject<boolean>();\n  public loginSuccessObservable = this.loginSuccessSubject.asObservable();\n\n  constructor(private _http: HttpClient, private _router: Router) {\n    this.url = GLOBAL.url;\n  }\n\n  getToken() {\n    return localStorage.getItem('token');\n  }\n\n  public isAuthenticated(allowRoles: string[]): boolean {\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const helper = new JwtHelperService();\n      const decodedToken = helper.decodeToken(token);\n\n      if (!decodedToken || !decodedToken['role']) {\n        localStorage.removeItem('token');\n        return false;\n      }\n      return allowRoles.includes(decodedToken['role']);\n    } catch (error) {\n      console.error('Error decoding token:', error);\n      localStorage.removeItem('token');\n      return false;\n    }\n  }\n\n  check_admin_exists(): Observable<any> {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.get<any>(this.url + 'check_admin_exists', {\n      headers: headers,\n    });\n  }\n\n  createAdmin(data: any): Observable<any> {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.post(this.url + 'create_admin', data, {\n      headers: headers,\n    });\n  }\n\n  login_admin(credentials: LoginCredentials): Observable<any> {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http\n      .post<ApiResponse>(this.url + 'login_admin', credentials, { headers: headers })\n      .pipe(\n        tap((response) => {\n          if (response.token) {\n            localStorage.setItem('token', response.token);\n            this._router.navigate(['/']);\n            this.loginSuccessSubject.next(true);\n          }\n        }),\n        catchError((error) => {\n        let errorMessage = 'An error occurred during login';\n        if (error.error.message) {\n          errorMessage = error.error.message;\n        }\n        return throwError(() => new Error(errorMessage));\n        })\n      );\n  }\n\n  get_admin(token: any): Observable<any> {\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: token,\n    });\n    return this._http.get(this.url + 'get_admin', { headers: headers });\n  }\n\n  logout(): void {\n    localStorage.removeItem('token');\n    this._router.navigate(['/login']);\n  }\n\n\n\n\n  // private loadUserFromLocalStorage(): void {\n  //   const userFromLocal = localStorage.getItem(USER_LOCAL_STORAGE_KEY);\n  //   userFromLocal && this.pushNewUser(userFromLocal);\n  // }\n\n\n  private saveTokenToLocalStore(userToken: string): void {\n    localStorage.setItem(USER_LOCAL_STORAGE_KEY, userToken);\n  }\n\n  private removeUserFromLocalStorage(): void {\n    localStorage.removeItem(USER_LOCAL_STORAGE_KEY);\n  }\n}\n"],"mappings":"AACA,SAAqBA,UAAU,EAAEC,OAAO,QAAQ,MAAM;AACtD,SAASC,GAAG,QAAQ,gBAAgB;AACpC,SAAqBC,WAAW,QAAQ,sBAAsB;AAE9D,SAASC,MAAM,QAAQ,kBAAkB;AACzC,SAASC,gBAAgB,QAAQ,oBAAoB;AACrD,SAASC,UAAU,QAAQ,gBAAgB;;;;AAK3C,MAAMC,sBAAsB,GAAG,KAAK;AAEpC,MAGaC,WAAW;EAKtBC,YAAoBC,KAAiB,EAAUC,OAAe;IAA1C,KAAAD,KAAK,GAALA,KAAK;IAAsB,KAAAC,OAAO,GAAPA,OAAO;IAH9C,KAAAC,mBAAmB,GAAG,IAAIX,OAAO,EAAW;IAC7C,KAAAY,sBAAsB,GAAG,IAAI,CAACD,mBAAmB,CAACE,YAAY,EAAE;IAGrE,IAAI,CAACC,GAAG,GAAGX,MAAM,CAACW,GAAG;EACvB;EAEAC,QAAQA,CAAA;IACN,OAAOC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACtC;EAEOC,eAAeA,CAACC,UAAoB;IACzC,MAAMC,KAAK,GAAGJ,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAE3C,IAAI,CAACG,KAAK,EAAE;MACV,OAAO,KAAK;;IAGd,IAAI;MACF,MAAMC,MAAM,GAAG,IAAIjB,gBAAgB,EAAE;MACrC,MAAMkB,YAAY,GAAGD,MAAM,CAACE,WAAW,CAACH,KAAK,CAAC;MAE9C,IAAI,CAACE,YAAY,IAAI,CAACA,YAAY,CAAC,MAAM,CAAC,EAAE;QAC1CN,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC;QAChC,OAAO,KAAK;;MAEd,OAAOL,UAAU,CAACM,QAAQ,CAACH,YAAY,CAAC,MAAM,CAAC,CAAC;KACjD,CAAC,OAAOI,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7CV,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC;MAChC,OAAO,KAAK;;EAEhB;EAEAI,kBAAkBA,CAAA;IAChB,IAAIC,OAAO,GAAG,IAAI3B,WAAW,EAAE,CAAC4B,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;IACvE,OAAO,IAAI,CAACrB,KAAK,CAACsB,GAAG,CAAM,IAAI,CAACjB,GAAG,GAAG,oBAAoB,EAAE;MAC1De,OAAO,EAAEA;KACV,CAAC;EACJ;EAEAG,WAAWA,CAACC,IAAS;IACnB,IAAIJ,OAAO,GAAG,IAAI3B,WAAW,EAAE,CAAC4B,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;IACvE,OAAO,IAAI,CAACrB,KAAK,CAACyB,IAAI,CAAC,IAAI,CAACpB,GAAG,GAAG,cAAc,EAAEmB,IAAI,EAAE;MACtDJ,OAAO,EAAEA;KACV,CAAC;EACJ;EAEAM,WAAWA,CAACC,WAA6B;IACvC,IAAIP,OAAO,GAAG,IAAI3B,WAAW,EAAE,CAAC4B,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;IACvE,OAAO,IAAI,CAACrB,KAAK,CACdyB,IAAI,CAAc,IAAI,CAACpB,GAAG,GAAG,aAAa,EAAEsB,WAAW,EAAE;MAAEP,OAAO,EAAEA;IAAO,CAAE,CAAC,CAC9EQ,IAAI,CACHpC,GAAG,CAAEqC,QAAQ,IAAI;MACf,IAAIA,QAAQ,CAAClB,KAAK,EAAE;QAClBJ,YAAY,CAACuB,OAAO,CAAC,OAAO,EAAED,QAAQ,CAAClB,KAAK,CAAC;QAC7C,IAAI,CAACV,OAAO,CAAC8B,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;QAC5B,IAAI,CAAC7B,mBAAmB,CAAC8B,IAAI,CAAC,IAAI,CAAC;;IAEvC,CAAC,CAAC,EACFpC,UAAU,CAAEqB,KAAK,IAAI;MACrB,IAAIgB,YAAY,GAAG,gCAAgC;MACnD,IAAIhB,KAAK,CAACA,KAAK,CAACiB,OAAO,EAAE;QACvBD,YAAY,GAAGhB,KAAK,CAACA,KAAK,CAACiB,OAAO;;MAEpC,OAAO5C,UAAU,CAAC,MAAM,IAAI6C,KAAK,CAACF,YAAY,CAAC,CAAC;IAChD,CAAC,CAAC,CACH;EACL;EAEAG,SAASA,CAACzB,KAAU;IAClB,IAAIS,OAAO,GAAG,IAAI3B,WAAW,CAAC;MAC5B,cAAc,EAAE,kBAAkB;MAClC4C,aAAa,EAAE1B;KAChB,CAAC;IACF,OAAO,IAAI,CAACX,KAAK,CAACsB,GAAG,CAAC,IAAI,CAACjB,GAAG,GAAG,WAAW,EAAE;MAAEe,OAAO,EAAEA;IAAO,CAAE,CAAC;EACrE;EAEAkB,MAAMA,CAAA;IACJ/B,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC;IAChC,IAAI,CAACd,OAAO,CAAC8B,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;EACnC;EAKA;EACA;EACA;EACA;EAGQQ,qBAAqBA,CAACC,SAAiB;IAC7CjC,YAAY,CAACuB,OAAO,CAACjC,sBAAsB,EAAE2C,SAAS,CAAC;EACzD;EAEQC,0BAA0BA,CAAA;IAChClC,YAAY,CAACQ,UAAU,CAAClB,sBAAsB,CAAC;EACjD;EAAC,QAAA6C,CAAA,G;qBApGU5C,WAAW,EAAA6C,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXnD,WAAW;IAAAoD,OAAA,EAAXpD,WAAW,CAAAqD,IAAA;IAAAC,UAAA,EAFV;EAAM;;SAEPtD,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}