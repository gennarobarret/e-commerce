{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { GLOBAL } from '../config/GLOBAL';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nclass AuthService {\n  constructor(_http, _router) {\n    this._http = _http;\n    this._router = _router;\n    this.user = new BehaviorSubject(null);\n    this.user$ = this.user.asObservable();\n    this.isLoggedIn$ = this.user$.pipe(map(user => !!user));\n    this.url = GLOBAL.url;\n    this.jwtHelper = new JwtHelperService();\n  }\n  isAuthenticated(allowRoles) {\n    const token = localStorage.getItem('token');\n    if (!token) return false;\n    try {\n      const decodedToken = this.jwtHelper.decodeToken(token);\n      const isValid = allowRoles.includes(decodedToken['role']);\n      if (isValid) {\n        this.user.next({\n          ...decodedToken,\n          token\n        });\n      } else {\n        this.user.next(null);\n      }\n      return isValid;\n    } catch (error) {\n      console.error('Error decoding token:', error);\n      localStorage.removeItem('token');\n      this.user.next(null);\n      return false;\n    }\n  }\n  // login(credentials: LoginCredentials): Observable<any> {\n  //   return this._http.post(this.url + 'login', credentials, {\n  //     headers: new HttpHeaders().set('Content-Type', 'application/json'),\n  //   }).pipe(\n  //     map(response => {\n  //       // Asumiendo que el token es parte de la respuesta\n  //       const token = response.token;\n  //       localStorage.setItem('token', token);\n  //       const userInfo = this.jwtHelper.decodeToken(token);\n  //       this.user.next({ ...userInfo, token });\n  //       return response;\n  //     })\n  //   );\n  // }\n  // login(credentials: LoginCredentials): Observable<UserWithToken> {\n  //   return this._http.post<User>(this.url + 'login', credentials, {\n  //     headers: new HttpHeaders().set('Content-Type', 'application/json'),\n  //   }).pipe(\n  //     map(response => {\n  //       const token = response.token;\n  //       const userWithToken: UserWithToken = { ...response.user, token };\n  //       // Almacenar token y actualizar el estado del usuario\n  //       localStorage.setItem('token', token);\n  //       this.user.next(userWithToken);\n  //       return userWithToken;\n  //     })\n  //   );\n  // }\n  logout() {\n    localStorage.removeItem('token');\n    this.user.next(null);\n    this._router.navigate(['/login']);\n  }\n  check_admin_exists() {\n    return this._http.get(this.url + 'check_admin_exists', {\n      headers: new HttpHeaders().set('Content-Type', 'application/json')\n    });\n  }\n  createAdmin(data) {\n    return this._http.post(this.url + 'create_admin', data, {\n      headers: new HttpHeaders().set('Content-Type', 'application/json')\n    });\n  }\n  get_admin(token) {\n    return this._http.get(this.url + 'get_admin', {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': token\n      })\n    });\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { AuthService };","map":{"version":3,"names":["HttpHeaders","BehaviorSubject","map","JwtHelperService","GLOBAL","AuthService","constructor","_http","_router","user","user$","asObservable","isLoggedIn$","pipe","url","jwtHelper","isAuthenticated","allowRoles","token","localStorage","getItem","decodedToken","decodeToken","isValid","includes","next","error","console","removeItem","logout","navigate","check_admin_exists","get","headers","set","createAdmin","data","post","get_admin","_","i0","ɵɵinject","i1","HttpClient","i2","Router","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\core\\auth\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { JwtHelperService } from '@auth0/angular-jwt';\n\nimport { GLOBAL } from '../config/GLOBAL';\nimport { User, UserWithToken } from '../model/user.interface';\nimport { LoginCredentials } from '../model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private url: string;\n  private jwtHelper: JwtHelperService;\n  private user = new BehaviorSubject<UserWithToken | null>(null);\n  public user$ = this.user.asObservable();\n  public isLoggedIn$: Observable<boolean> = this.user$.pipe(map(user => !!user));\n\n  constructor(private _http: HttpClient, private _router: Router) {\n    this.url = GLOBAL.url;\n    this.jwtHelper = new JwtHelperService();\n  }\n\n  public isAuthenticated(allowRoles: string[]): boolean {\n    const token = localStorage.getItem('token');\n    if (!token) return false;\n\n    try {\n      const decodedToken = this.jwtHelper.decodeToken(token);\n      const isValid = allowRoles.includes(decodedToken['role']);\n      if (isValid) {\n        this.user.next({ ...decodedToken, token });\n      } else {\n        this.user.next(null);\n      }\n      return isValid;\n    } catch (error) {\n      console.error('Error decoding token:', error);\n      localStorage.removeItem('token');\n      this.user.next(null);\n      return false;\n    }\n  }\n\n  // login(credentials: LoginCredentials): Observable<any> {\n  //   return this._http.post(this.url + 'login', credentials, {\n  //     headers: new HttpHeaders().set('Content-Type', 'application/json'),\n  //   }).pipe(\n  //     map(response => {\n  //       // Asumiendo que el token es parte de la respuesta\n  //       const token = response.token;\n  //       localStorage.setItem('token', token);\n  //       const userInfo = this.jwtHelper.decodeToken(token);\n  //       this.user.next({ ...userInfo, token });\n  //       return response;\n  //     })\n  //   );\n  // }\n\n  // login(credentials: LoginCredentials): Observable<UserWithToken> {\n  //   return this._http.post<User>(this.url + 'login', credentials, {\n  //     headers: new HttpHeaders().set('Content-Type', 'application/json'),\n  //   }).pipe(\n  //     map(response => {\n  //       const token = response.token;\n  //       const userWithToken: UserWithToken = { ...response.user, token };\n  //       // Almacenar token y actualizar el estado del usuario\n  //       localStorage.setItem('token', token);\n  //       this.user.next(userWithToken);\n  //       return userWithToken;\n  //     })\n  //   );\n  // }\n\n  logout(): void {\n    localStorage.removeItem('token');\n    this.user.next(null);\n    this._router.navigate(['/login']);\n  }\n\n  check_admin_exists(): Observable<any> {\n    return this._http.get<any>(this.url + 'check_admin_exists', { \n      headers: new HttpHeaders().set('Content-Type', 'application/json') \n    });\n  }\n\n  createAdmin(data: any): Observable<any> {\n    return this._http.post(this.url + 'create_admin', data, { \n      headers: new HttpHeaders().set('Content-Type', 'application/json') \n    });\n  }\n\n  get_admin(token: any): Observable<any> {\n    return this._http.get(this.url + 'get_admin', { \n      headers: new HttpHeaders({ 'Content-Type': 'application/json', 'Authorization': token }) \n    });\n  }\n}\n\n// import { Injectable } from '@angular/core';\n// import { Observable } from 'rxjs';\n// import { GLOBAL } from '../config/GLOBAL';\n// import { HttpClient, HttpHeaders } from '@angular/common/http';\n// import { JwtHelperService } from '@auth0/angular-jwt';\n// import { Router } from '@angular/router';\n\n// @Injectable({\n//   providedIn: 'root',\n// })\n// export class AuthService {\n\n//   public url;\n\n//   constructor(private _http: HttpClient, private _router: Router) {\n//     this.url = GLOBAL.url;\n//   }\n\n//   public isAuthenticated(allowRoles: string[]): boolean {\n//     const token = localStorage.getItem('token');\n\n//     if (!token) {\n//       return false;\n//     }\n\n//     try {\n//       const helper = new JwtHelperService();\n//       const decodedToken = helper.decodeToken(token);\n\n//       if (!decodedToken || !decodedToken['role']) {\n//         localStorage.removeItem('token');\n//         return false;\n//       }\n//       return allowRoles.includes(decodedToken['role']);\n//     } catch (error) {\n//       console.error('Error decoding token:', error);\n//       localStorage.removeItem('token');\n//       return false;\n//     }\n//   }\n\n//   check_admin_exists(): Observable<any> {\n//     let headers = new HttpHeaders().set('Content-Type', 'application/json');\n//     return this._http.get<any>(this.url + 'check_admin_exists', { headers: headers });\n//   }\n\n\n//   createAdmin(data: any): Observable<any> {\n//     let headers = new HttpHeaders().set('Content-Type', 'application/json');\n//     return this._http.post(this.url + 'create_admin', data, { headers: headers });\n// }\n\n\n//   login_admin(data: { email: any; password: any }): Observable<any> {\n//     let headers = new HttpHeaders().set('Content-Type', 'application/json');\n//     return this._http.post(this.url + 'login_admin', data, {\n//       headers: headers,\n//     });\n//   }\n\n//   get_admin(token: any): Observable<any> {\n//     let headers = new HttpHeaders({ 'Content-Type': 'application/json', 'Authorization': token });\n//     return this._http.get(this.url + 'get_admin', { headers: headers });\n//   }\n\n//   logout(): void {\n//     localStorage.removeItem('token');\n//     this._router.navigate(['/login']);\n//   }\n// }\n\n// import { Injectable } from '@angular/core';\n\n// @Injectable({\n//   providedIn: 'root'\n// })\n// export class AuthService {\n\n//   constructor() { }\n// }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}