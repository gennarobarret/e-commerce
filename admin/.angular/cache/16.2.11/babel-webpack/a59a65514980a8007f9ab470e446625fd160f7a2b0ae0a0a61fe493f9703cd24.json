{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\core\\auth\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { GLOBAL } from '../config/GLOBAL';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { Router } from '@angular/router';\n\nimport { LoginCredentials } from '../model';\nimport { User\n\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n\n  public url;\n\n  constructor(private _http: HttpClient, private _router: Router) {\n    this.url = GLOBAL.url;\n  }\n\n  getToken() {\n    return localStorage.getItem('token');\n  }\n\n  storeToken(token: string) {\n    localStorage.setItem('token', token);\n  }\n\n  public isAuthenticated(allowRoles: string[]): boolean {\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const helper = new JwtHelperService();\n      const decodedToken = helper.decodeToken(token);\n\n      if (!decodedToken || !decodedToken['role']) {\n        localStorage.removeItem('token');\n        return false;\n      }\n      return allowRoles.includes(decodedToken['role']);\n    } catch (error) {\n      console.error('Error decoding token:', error);\n      localStorage.removeItem('token');\n      return false;\n    }\n  }\n\n  check_admin_exists(): Observable<any> {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.get<any>(this.url + 'check_admin_exists', { headers: headers });\n  }\n\n  createAdmin(data: any): Observable<any> {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.post(this.url + 'create_admin', data, { headers: headers });\n}\n\n  login_admin(data: { email: any; password: any }): Observable<any> {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.post(this.url + 'login_admin', data, {\n      headers: headers,\n    });\n  }\n\n  get_admin(token: any): Observable<any> {\n    let headers = new HttpHeaders({ 'Content-Type': 'application/json', 'Authorization': token });\n    return this._http.get(this.url + 'get_admin', { headers: headers });\n  }\n\n  logout(): void {\n    localStorage.removeItem('token');\n    this._router.navigate(['/login']);\n  }\n\n\n  private redirectToDashboard(): void {\n    this._router.navigateByUrl('/dashboard');\n  }\n\n  private pushNewUser(token: string) {\n    this._user.next(this.decodeToken(token));\n  }\n\n  private decodeToken(userToken: string): UserWithToken {\n    const userInfo = JSON.parse(window.atob(userToken)) as User;\n    \n    return { ...userInfo, token: userToken };\n  }\n\n  private loadUserFromLocalStorage(): void {\n    const userFromLocal = localStorage.getItem(USER_LOCAL_STORAGE_KEY);\n\n    userFromLocal && this.pushNewUser(userFromLocal);\n  }\n  private saveTokenToLocalStore(userToken: string): void {\n    localStorage.setItem(USER_LOCAL_STORAGE_KEY, userToken);\n  }\n\n  private removeUserFromLocalStorage(): void {\n    localStorage.removeItem(USER_LOCAL_STORAGE_KEY);\n  }\n}"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}