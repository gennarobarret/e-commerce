{"ast":null,"code":"import { ignoreElements, tap } from 'rxjs';\nimport { GLOBAL } from '../config/GLOBAL';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nconst USER_LOCAL_STORAGE_KEY = 'userData';\nclass AuthService {\n  constructor(_http, _router) {\n    this._http = _http;\n    this._router = _router;\n    this.url = GLOBAL.url;\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  storeToken(token) {\n    localStorage.setItem('token', token);\n  }\n  check_admin_exists() {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.get(this.url + 'check_admin_exists', {\n      headers: headers\n    });\n  }\n  createAdmin(data) {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.post(this.url + 'create_admin', data, {\n      headers: headers\n    });\n  }\n  login_admin(credentials) {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.post(this.url + 'login_admin', credentials, {\n      headers: headers\n    }).pipe(tap(userToken => this.saveTokenToLocalStore(userToken)), tap(() => this.redirectToDashboard()), ignoreElements());\n  }\n  get_admin(token) {\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': token\n    });\n    return this._http.get(this.url + 'get_admin', {\n      headers: headers\n    });\n  }\n  logout() {\n    this.removeUserFromLocalStorage();\n    this._router.navigateByUrl('/login');\n  }\n  redirectToDashboard() {\n    this._router.navigateByUrl('/dashboard');\n  }\n  // private pushNewUser(token: string) {\n  //   this.user.next(this.decodeToken(token));\n  // }\n  // private decodeToken(userToken: string): UserWithToken {\n  //   const userInfo = JSON.parse(window.atob(userToken)) as User;\n  //   return { ...userInfo, token: userToken };\n  // }\n  // private loadUserFromLocalStorage(): void {\n  //   const userFromLocal = localStorage.getItem(USER_LOCAL_STORAGE_KEY);\n  //   userFromLocal && this.pushNewUser(userFromLocal);\n  // }\n  saveTokenToLocalStore(userToken) {\n    localStorage.setItem(USER_LOCAL_STORAGE_KEY, userToken);\n  }\n  removeUserFromLocalStorage() {\n    localStorage.removeItem(USER_LOCAL_STORAGE_KEY);\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { AuthService };","map":{"version":3,"names":["ignoreElements","tap","GLOBAL","HttpHeaders","USER_LOCAL_STORAGE_KEY","AuthService","constructor","_http","_router","url","getToken","localStorage","getItem","storeToken","token","setItem","check_admin_exists","headers","set","get","createAdmin","data","post","login_admin","credentials","pipe","userToken","saveTokenToLocalStore","redirectToDashboard","get_admin","logout","removeUserFromLocalStorage","navigateByUrl","removeItem","_","i0","ɵɵinject","i1","HttpClient","i2","Router","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\core\\auth\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, ignoreElements, map, Observable, tap } from 'rxjs';\nimport { GLOBAL } from '../config/GLOBAL';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { Router } from '@angular/router';\n\nimport { LoginCredentials } from '../model';\nimport { UserWithToken } from '../model/user.interface';\n\nconst USER_LOCAL_STORAGE_KEY = 'userData';\n\n\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n\n  public url;\n\n  constructor(private _http: HttpClient, private _router: Router) {\n    this.url = GLOBAL.url;\n  }\n\n  getToken() {\n    return localStorage.getItem('token');\n  }\n\n  storeToken(token: string) {\n    localStorage.setItem('token', token);\n  }\n\n  check_admin_exists(): Observable<any> {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.get<any>(this.url + 'check_admin_exists', { headers: headers });\n  }\n\n  createAdmin(data: any): Observable<any> {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.post(this.url + 'create_admin', data, { headers: headers });\n}\n\n  login_admin(credentials: LoginCredentials): Observable<any> {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.post<string>(this.url + 'login_admin', credentials, {\n      headers: headers,\n    }).pipe(\n      tap((userToken) => this.saveTokenToLocalStore(userToken)),\n      tap(() => this.redirectToDashboard()),\n      ignoreElements()\n    );\n  }\n\n  get_admin(token: any): Observable<any> {\n    let headers = new HttpHeaders({ 'Content-Type': 'application/json', 'Authorization': token });\n    return this._http.get(this.url + 'get_admin', { headers: headers });\n  }\n\n  logout(): void {\n    this.removeUserFromLocalStorage();\n    this._router.navigateByUrl('/login');\n  }\n\n  private redirectToDashboard(): void {\n    this._router.navigateByUrl('/dashboard');\n  }\n\n  // private pushNewUser(token: string) {\n  //   this.user.next(this.decodeToken(token));\n  // }\n\n  // private decodeToken(userToken: string): UserWithToken {\n  //   const userInfo = JSON.parse(window.atob(userToken)) as User;\n    \n  //   return { ...userInfo, token: userToken };\n  // }\n\n  // private loadUserFromLocalStorage(): void {\n  //   const userFromLocal = localStorage.getItem(USER_LOCAL_STORAGE_KEY);\n  //   userFromLocal && this.pushNewUser(userFromLocal);\n  // }\n  \n  private saveTokenToLocalStore(userToken: string): void {\n    localStorage.setItem(USER_LOCAL_STORAGE_KEY, userToken);\n  }\n\n  private removeUserFromLocalStorage(): void {\n    localStorage.removeItem(USER_LOCAL_STORAGE_KEY);\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}