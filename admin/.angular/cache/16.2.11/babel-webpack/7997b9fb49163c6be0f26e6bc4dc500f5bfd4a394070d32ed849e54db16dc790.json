{"ast":null,"code":"\"use strict\";\n\n//is-logged-in.guard.ts\n// import { Injectable } from '@angular/core';\n// import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\n// import { AuthService } from '../services/auth.service';\n// @Injectable({\n//   providedIn: 'root'\n// })\n// export class isLoggedInGuard implements CanActivate {\n//   constructor(\n//     private authService: AuthService,\n//     private router: Router\n//   ) { }\n//   canActivate(\n//     next: ActivatedRouteSnapshot,\n//     state: RouterStateSnapshot): boolean | UrlTree {\n//     // Verifica si el usuario está autenticado o tiene los permisos necesarios para acceder a las rutas del LayoutModule\n//     if (this.authService.isAuthenticated(['MasterAdministrator'])) {\n//       return true;\n//     } else {\n//       // Si el usuario no está autenticado, redirige a la página de inicio de sesión o a la página que desees.\n//       return this.router.createUrlTree(['/auth/login']);\n//     }\n//   }\n// }\n// import { Injectable } from '@angular/core';\n// import { CanActivate, Router } from '@angular/router';\n// import { Observable, of } from 'rxjs';\n// import { switchMap } from 'rxjs/operators';\n// import { AuthService } from '../services/auth.service';\n// import { InitialConfigService } from '../services/initial-config.service';\n// @Injectable({\n//   providedIn: 'root',\n// })\n// export class isLoggedInGuard implements CanActivate {\n//   constructor(\n//     private authService: AuthService,\n//     private initialConfigService: InitialConfigService,\n//     private router: Router\n//   ) { }\n//   canActivate(): Observable<boolean> {\n//     return this.initialConfigService.InitialCheck().pipe(\n//       switchMap(response => {\n//         if (!response.setupRequired) {\n//           this.router.navigate(['/initial-config']);\n//           return of(false);\n//         } else {\n//           if (this.authService.isAuthenticated(['MasterAdministrator'])) {\n//             return of(true);\n//           } else {\n//             this.router.navigate(['/auth/login']);\n//             return of(false);\n//           }\n//         }\n//       })\n//     );\n//   }\n// }","map":{"version":3,"names":[],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\core\\guards\\is-logged-in.guard.ts"],"sourcesContent":["//is-logged-in.guard.ts\n\n// import { Injectable } from '@angular/core';\n// import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\n// import { AuthService } from '../services/auth.service';\n\n// @Injectable({\n//   providedIn: 'root'\n// })\n\n// export class isLoggedInGuard implements CanActivate {\n\n//   constructor(\n//     private authService: AuthService,\n//     private router: Router\n//   ) { }\n\n//   canActivate(\n//     next: ActivatedRouteSnapshot,\n//     state: RouterStateSnapshot): boolean | UrlTree {\n//     // Verifica si el usuario está autenticado o tiene los permisos necesarios para acceder a las rutas del LayoutModule\n//     if (this.authService.isAuthenticated(['MasterAdministrator'])) {\n//       return true;\n//     } else {\n//       // Si el usuario no está autenticado, redirige a la página de inicio de sesión o a la página que desees.\n//       return this.router.createUrlTree(['/auth/login']);\n//     }\n//   }\n// }\n\n// import { Injectable } from '@angular/core';\n// import { CanActivate, Router } from '@angular/router';\n// import { Observable, of } from 'rxjs';\n// import { switchMap } from 'rxjs/operators';\n// import { AuthService } from '../services/auth.service';\n// import { InitialConfigService } from '../services/initial-config.service';\n\n// @Injectable({\n//   providedIn: 'root',\n// })\n// export class isLoggedInGuard implements CanActivate {\n//   constructor(\n//     private authService: AuthService,\n//     private initialConfigService: InitialConfigService,\n//     private router: Router\n//   ) { }\n\n//   canActivate(): Observable<boolean> {\n//     return this.initialConfigService.InitialCheck().pipe(\n//       switchMap(response => {\n//         if (!response.setupRequired) {\n//           this.router.navigate(['/initial-config']);\n//           return of(false);\n//         } else {\n//           if (this.authService.isAuthenticated(['MasterAdministrator'])) {\n//             return of(true);\n//           } else {\n//             this.router.navigate(['/auth/login']);\n//             return of(false);\n//           }\n//         }\n//       })\n//     );\n//   }\n// }\n"],"mappings":";;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"script","externalDependencies":[]}