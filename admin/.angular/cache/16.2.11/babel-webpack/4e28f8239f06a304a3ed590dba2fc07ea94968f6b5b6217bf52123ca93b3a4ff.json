{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { showToastMessage } from 'src/app/helpers/toast-messages';\n// import custom validator to validate that password and confirm password fields match\nimport { MustMatch } from 'src/app/helpers/must-match.validator';\nlet RegisterComponent = class RegisterComponent {\n  constructor(_formBuilder, _adminService, _router) {\n    this._formBuilder = _formBuilder;\n    this._adminService = _adminService;\n    this._router = _router;\n    this.submitted = false;\n  }\n  ngOnInit() {\n    this.registerForm = this._formBuilder.group({\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]],\n      confirmPassword: ['', Validators.required]\n      // acceptTerms: [false, Validators.requiredTrue]\n    }, {\n      validators: MustMatch('password', 'confirmPassword')\n    });\n  }\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.registerForm.controls;\n  }\n  register() {\n    this.submitted = true;\n    if (this.registerForm.invalid) {\n      return;\n    }\n    const newAdminFormValue = {\n      ...this.registerForm.value,\n      role: 'admin'\n    };\n    // alert('SUCCESS!! :-)\\n\\n' + JSON.stringify(this.registerForm.value, null, 4));\n    this._adminService.createAdmin(newAdminFormValue).subscribe(response => {\n      showToastMessage('success', 'Tu mensaje de éxito aquí');\n      this._router.navigate(['/login']);\n    }, error => {\n      showToastMessage('error', 'Tu mensaje de error aquí');\n      console.error(error);\n    });\n  }\n  onReset() {\n    this.submitted = false;\n    this.registerForm.reset();\n  }\n};\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})], RegisterComponent);\nexport { RegisterComponent };","map":{"version":3,"names":["Component","Validators","showToastMessage","MustMatch","RegisterComponent","constructor","_formBuilder","_adminService","_router","submitted","ngOnInit","registerForm","group","firstName","required","lastName","email","password","minLength","confirmPassword","validators","f","controls","register","invalid","newAdminFormValue","value","role","createAdmin","subscribe","response","navigate","error","console","onReset","reset","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\modules\\initial-config\\account-setup\\account-setup.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { showToastMessag\n\n\n@Component({\n  selector: 'app-account-setup',\n  templateUrl: './account-setup.component.html',\n  styleUrls: ['./account-setup.component.css']\n})\nexport class AccountSetupComponent {\n  registerForm!: FormGroup;\n  submitted = false;\n\n  constructor(private router: Router) { }\n\n  goToNextStep() {\n    this.router.navigate(['/initial-config/step2']);\n  }\n  goToPreviousStep() {\n    this.router.navigate(['/initial-config/step1']);\n  }\n\n}\n\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AdminService } from 'src/app/services/admin.service';\nimport { Router } from '@angular/router';\n\nimport { showToastMessage } from 'src/app/helpers/toast-messages';\n\n// import custom validator to validate that password and confirm password fields match\nimport { MustMatch } from 'src/app/helpers/must-match.validator';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css'],\n})\nexport class RegisterComponent implements OnInit {\n  registerForm!: FormGroup;\n  submitted = false;\n\n  constructor(\n    private _formBuilder: FormBuilder,\n    private _adminService: AdminService,\n    private _router: Router\n  ) { }\n\n  ngOnInit() {\n    this.registerForm = this._formBuilder.group(\n      {\n        firstName: ['', Validators.required],\n        lastName: ['', Validators.required],\n        email: ['', [Validators.required, Validators.email]],\n        password: ['', [Validators.required, Validators.minLength(6)]],\n        confirmPassword: ['', Validators.required],\n        // acceptTerms: [false, Validators.requiredTrue]\n      },\n      {\n        validators: MustMatch('password', 'confirmPassword'),\n      }\n    );\n  }\n\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.registerForm.controls;\n  }\n\n  register() {\n    this.submitted = true;\n\n    if (this.registerForm.invalid) {\n      return;\n    }\n\n    const newAdminFormValue = {\n      ...this.registerForm.value,\n      role: 'admin',\n    };\n    // alert('SUCCESS!! :-)\\n\\n' + JSON.stringify(this.registerForm.value, null, 4));\n\n    this._adminService.createAdmin(newAdminFormValue).subscribe(\n      (response) => {\n        showToastMessage('success', 'Tu mensaje de éxito aquí');\n        this._router.navigate(['/login']);\n      },\n      (error) => {\n        showToastMessage('error', 'Tu mensaje de error aquí');\n        console.error(error);\n      }\n    );\n  }\n\n  onReset() {\n    this.submitted = false;\n    this.registerForm.reset();\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAEzC,SAAiCC,UAAU,QAAQ,gBAAgB;AA6BnE,SAASC,gBAAgB,QAAQ,gCAAgC;AAEjE;AACA,SAASC,SAAS,QAAQ,sCAAsC;AAOhE,IAAaC,iBAAiB,GAA9B,MAAaA,iBAAiB;EAI5BC,YACUC,YAAyB,EACzBC,aAA2B,EAC3BC,OAAe;IAFf,KAAAF,YAAY,GAAZA,YAAY;IACZ,KAAAC,aAAa,GAAbA,aAAa;IACb,KAAAC,OAAO,GAAPA,OAAO;IALjB,KAAAC,SAAS,GAAG,KAAK;EAMb;EAEJC,QAAQA,CAAA;IACN,IAAI,CAACC,YAAY,GAAG,IAAI,CAACL,YAAY,CAACM,KAAK,CACzC;MACEC,SAAS,EAAE,CAAC,EAAE,EAAEZ,UAAU,CAACa,QAAQ,CAAC;MACpCC,QAAQ,EAAE,CAAC,EAAE,EAAEd,UAAU,CAACa,QAAQ,CAAC;MACnCE,KAAK,EAAE,CAAC,EAAE,EAAE,CAACf,UAAU,CAACa,QAAQ,EAAEb,UAAU,CAACe,KAAK,CAAC,CAAC;MACpDC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAChB,UAAU,CAACa,QAAQ,EAAEb,UAAU,CAACiB,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;MAC9DC,eAAe,EAAE,CAAC,EAAE,EAAElB,UAAU,CAACa,QAAQ;MACzC;KACD,EACD;MACEM,UAAU,EAAEjB,SAAS,CAAC,UAAU,EAAE,iBAAiB;KACpD,CACF;EACH;EAEA;EACA,IAAIkB,CAACA,CAAA;IACH,OAAO,IAAI,CAACV,YAAY,CAACW,QAAQ;EACnC;EAEAC,QAAQA,CAAA;IACN,IAAI,CAACd,SAAS,GAAG,IAAI;IAErB,IAAI,IAAI,CAACE,YAAY,CAACa,OAAO,EAAE;MAC7B;;IAGF,MAAMC,iBAAiB,GAAG;MACxB,GAAG,IAAI,CAACd,YAAY,CAACe,KAAK;MAC1BC,IAAI,EAAE;KACP;IACD;IAEA,IAAI,CAACpB,aAAa,CAACqB,WAAW,CAACH,iBAAiB,CAAC,CAACI,SAAS,CACxDC,QAAQ,IAAI;MACX5B,gBAAgB,CAAC,SAAS,EAAE,0BAA0B,CAAC;MACvD,IAAI,CAACM,OAAO,CAACuB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;IACnC,CAAC,EACAC,KAAK,IAAI;MACR9B,gBAAgB,CAAC,OAAO,EAAE,0BAA0B,CAAC;MACrD+B,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACtB,CAAC,CACF;EACH;EAEAE,OAAOA,CAAA;IACL,IAAI,CAACzB,SAAS,GAAG,KAAK;IACtB,IAAI,CAACE,YAAY,CAACwB,KAAK,EAAE;EAC3B;CACD;AA5DY/B,iBAAiB,GAAAgC,UAAA,EAL7BpC,SAAS,CAAC;EACTqC,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,0BAA0B;CACvC,CAAC,C,EACWnC,iBAAiB,CA4D7B;SA5DYA,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}