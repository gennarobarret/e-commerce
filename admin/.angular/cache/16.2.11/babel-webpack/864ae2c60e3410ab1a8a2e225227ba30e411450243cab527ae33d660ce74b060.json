{"ast":null,"code":"import { catchError, map, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/initial-config.service\";\nimport * as i2 from \"@angular/router\";\nclass RootGuard {\n  constructor(initialConfigService, router) {\n    this.initialConfigService = initialConfigService;\n    this.router = router;\n  }\n  canActivate() {\n    return this.initialConfigService.InitialCheck().pipe(map(response => {\n      if (response.data.setupRequired) {\n        // Redirige a la configuración inicial solo si estamos en una ruta diferente\n        if (this.router.url !== '/initial-config') {\n          this.router.navigate(['/initial-config']);\n        }\n        return false;\n      }\n      // Si no se necesita configuración inicial, permite la navegación\n      return true;\n    }), catchError(() => {\n      // En caso de error, puedes decidir qué hacer, como redirigir al login o mostrar un mensaje\n      this.router.navigate(['/auth/login']);\n      return of(false);\n    }));\n  }\n  static #_ = this.ɵfac = function RootGuard_Factory(t) {\n    return new (t || RootGuard)(i0.ɵɵinject(i1.InitialConfigService), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RootGuard,\n    factory: RootGuard.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { RootGuard };","map":{"version":3,"names":["catchError","map","of","RootGuard","constructor","initialConfigService","router","canActivate","InitialCheck","pipe","response","data","setupRequired","url","navigate","_","i0","ɵɵinject","i1","InitialConfigService","i2","Router","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\core\\guards\\root-guard.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { InitialConfigService } from '../services/initial-config.service';\nimport { Observable, catchError, map, of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RootGuard implements CanActivate {\n  constructor(\n    private initialConfigService: InitialConfigService,\n    private router: Router\n  ) { }\n\n  canActivate(): Observable<boolean> {\n    return this.initialConfigService.InitialCheck().pipe(\n      map(response => {\n        if (response.data.setupRequired) {\n          // Redirige a la configuración inicial solo si estamos en una ruta diferente\n          if (this.router.url !== '/initial-config') {\n            this.router.navigate(['/initial-config']);\n          }\n          return false;\n        }\n        // Si no se necesita configuración inicial, permite la navegación\n        return true;\n      }),\n      catchError(() => {\n        // En caso de error, puedes decidir qué hacer, como redirigir al login o mostrar un mensaje\n        this.router.navigate(['/auth/login']);\n        return of(false);\n      })\n    );\n  }\n}\n"],"mappings":"AAGA,SAAqBA,UAAU,EAAEC,GAAG,EAAEC,EAAE,QAAQ,MAAM;;;;AAEtD,MAGaC,SAAS;EACpBC,YACUC,oBAA0C,EAC1CC,MAAc;IADd,KAAAD,oBAAoB,GAApBA,oBAAoB;IACpB,KAAAC,MAAM,GAANA,MAAM;EACZ;EAEJC,WAAWA,CAAA;IACT,OAAO,IAAI,CAACF,oBAAoB,CAACG,YAAY,EAAE,CAACC,IAAI,CAClDR,GAAG,CAACS,QAAQ,IAAG;MACb,IAAIA,QAAQ,CAACC,IAAI,CAACC,aAAa,EAAE;QAC/B;QACA,IAAI,IAAI,CAACN,MAAM,CAACO,GAAG,KAAK,iBAAiB,EAAE;UACzC,IAAI,CAACP,MAAM,CAACQ,QAAQ,CAAC,CAAC,iBAAiB,CAAC,CAAC;;QAE3C,OAAO,KAAK;;MAEd;MACA,OAAO,IAAI;IACb,CAAC,CAAC,EACFd,UAAU,CAAC,MAAK;MACd;MACA,IAAI,CAACM,MAAM,CAACQ,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC;MACrC,OAAOZ,EAAE,CAAC,KAAK,CAAC;IAClB,CAAC,CAAC,CACH;EACH;EAAC,QAAAa,CAAA,G;qBAzBUZ,SAAS,EAAAa,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,oBAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;WAATnB,SAAS;IAAAoB,OAAA,EAATpB,SAAS,CAAAqB,IAAA;IAAAC,UAAA,EAFR;EAAM;;SAEPtB,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}