{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet LoginComponent = class LoginComponent {\n  constructor(_adminService, _router, formBuilder) {\n    this._adminService = _adminService;\n    this._router = _router;\n    this.formBuilder = formBuilder;\n    this.user = {};\n    this.token = '';\n    this.hidePassword = true;\n    this.token = this._adminService.getToken();\n    this.loginForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', Validators.required],\n      rememberMe: [false] // Remember me checkbox\n    });\n  }\n\n  ngOnInit() {\n    const rememberedEmail = localStorage.getItem('rememberedEmail');\n    if (rememberedEmail) {\n      this.loginForm.patchValue({\n        email: rememberedEmail\n      });\n    }\n    if (this.token) {\n      this._router.navigate(['']);\n    }\n  }\n  login() {\n    if (this.loginForm.valid) {\n      const {\n        email,\n        password,\n        rememberMe\n      } = this.loginForm.value;\n      const data = {\n        email,\n        password\n      };\n      this._adminService.login_admin(data).subscribe(response => {\n        if (!response.data) {\n          this.showErrorToast(response.message || 'There was an error during login');\n        } else {\n          this.handleSuccessfulLogin(response, rememberMe);\n        }\n      }, error => {\n        this.showErrorToast('There was an error during login');\n        console.error(error);\n      });\n    } else {\n      this.showErrorToast('Invalid form data');\n    }\n  }\n  handleSuccessfulLogin(response, remember) {\n    this.user = response.data;\n    localStorage.setItem('token', response.token || '');\n    if (remember) {\n      this.rememberUser(this.loginForm.value.email, true);\n    } else {\n      this.rememberUser('', false);\n    }\n    this._router.navigate(['/']);\n  }\n  rememberUser(email, remember) {\n    if (remember) {\n      localStorage.setItem('rememberedEmail', email);\n    } else {\n      localStorage.removeItem('rememberedEmail');\n    }\n  }\n  showErrorToast(message) {\n    iziToast.show({\n      title: 'ERROR',\n      titleColor: '#FF0000',\n      color: '#FFF',\n      class: 'text-Danger',\n      position: 'topRight',\n      message: message\n    });\n  }\n  togglePasswordVisibility() {\n    this.hidePassword = !this.hidePassword;\n  }\n  get passwordFieldType() {\n    return this.hidePassword ? 'password' : 'text';\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);\nexport { LoginComponent };\n// import { Component } from '@angular/core';\n// @Component({\n//   selector: 'app-login',\n//   templateUrl: './login.component.html',\n//   styleUrls: ['./login.component.css']\n// })\n// export class LoginComponent {\n// }","map":{"version":3,"names":["Component","Validators","LoginComponent","constructor","_adminService","_router","formBuilder","user","token","hidePassword","getToken","loginForm","group","email","required","password","rememberMe","ngOnInit","rememberedEmail","localStorage","getItem","patchValue","navigate","login","valid","value","data","login_admin","subscribe","response","showErrorToast","message","handleSuccessfulLogin","error","console","remember","setItem","rememberUser","removeItem","iziToast","show","title","titleColor","color","class","position","togglePasswordVisibility","passwordFieldType","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\modules\\auth\\login\\login.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/core/auth/auth.service';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\n\ndeclare var iziToast: any;\n\ninterface ApiResponse {\n  data?: any;\n  message?: string;\n  token?: string;\n}\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css'],\n})\nexport class LoginComponent implements OnInit {\n  public user: any = {};\n  public token: any = '';\n  public loginForm: FormGroup;\n\n  constructor(\n    private _adminService: AdminService,\n    private _router: Router,\n    private formBuilder: FormBuilder\n  ) {\n    this.token = this._adminService.getToken();\n    this.loginForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', Validators.required],\n      rememberMe: [false], // Remember me checkbox\n    });\n  }\n\n  ngOnInit(): void {\n    const rememberedEmail = localStorage.getItem('rememberedEmail');\n    if (rememberedEmail) {\n      this.loginForm.patchValue({\n        email: rememberedEmail,\n      });\n    }\n\n    if (this.token) {\n      this._router.navigate(['']);\n    }\n  }\n\n  login() {\n    if (this.loginForm.valid) {\n      const { email, password, rememberMe } = this.loginForm.value;\n      const data = { email, password };\n      this._adminService.login_admin(data).subscribe(\n        (response: ApiResponse) => {\n          if (!response.data) {\n            this.showErrorToast(\n              response.message || 'There was an error during login'\n            );\n          } else {\n            this.handleSuccessfulLogin(response, rememberMe);\n          }\n        },\n        (error) => {\n          this.showErrorToast('There was an error during login');\n          console.error(error);\n        }\n      );\n    } else {\n      this.showErrorToast('Invalid form data');\n    }\n  }\n\n  private handleSuccessfulLogin(response: ApiResponse, remember: boolean) {\n    this.user = response.data;\n    localStorage.setItem('token', response.token || '');\n\n    if (remember) {\n      this.rememberUser(this.loginForm.value.email, true);\n    } else {\n      this.rememberUser('', false);\n    }\n\n    this._router.navigate(['/']);\n  }\n\n  private rememberUser(email: string, remember: boolean) {\n    if (remember) {\n      localStorage.setItem('rememberedEmail', email);\n    } else {\n      localStorage.removeItem('rememberedEmail');\n    }\n  }\n\n  private showErrorToast(message: string) {\n    iziToast.show({\n      title: 'ERROR',\n      titleColor: '#FF0000',\n      color: '#FFF',\n      class: 'text-Danger',\n      position: 'topRight',\n      message: message,\n    });\n  }\n\n  hidePassword: boolean = true;\n  togglePasswordVisibility() {\n    this.hidePassword = !this.hidePassword;\n  }\n\n  get passwordFieldType() {\n    return this.hidePassword ? 'password' : 'text';\n  }\n}\n\n\n\n// import { Component } from '@angular/core';\n\n// @Component({\n//   selector: 'app-login',\n//   templateUrl: './login.component.html',\n//   styleUrls: ['./login.component.css']\n// })\n// export class LoginComponent {\n\n// }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}