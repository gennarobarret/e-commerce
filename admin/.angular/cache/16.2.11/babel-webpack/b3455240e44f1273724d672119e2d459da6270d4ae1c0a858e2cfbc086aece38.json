{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\modules\\account-settings\\profile\\profile.component.ts"],"sourcesContent":["import { Component } from \"@angular/core\";\nimport {\n  FormBuilder,\n  FormGroup,\n  Validators\n} from \"@angular/forms\";\nimport { Router } from \"@angular/router\";\nimport { AuthService } from \"src/app/core/auth/auth.service\";\nimport { ToastService } from \"src/app/shared/services/toast.service\";\nimport { ProfileData } from \"src/app/core/models/profile-data.interface\";\nimport { GeoInfoService } from \"src/app/shared/services/geo-info.service\";\n\nimport { DateService } from \"src/app/shared/services/date.service\";\nimport { GLOBAL } from \"src/app/core/config/GLOBAL\";\nimport { Renderer2, ViewChild, ElementRef } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { Country } from \"src/app/core/models/country.model\";\nimport { State } from \"src/app/core/models/state.model\";\nimport { user}\n\n@Component({\n  selector: \"app-profile\",\n  templateUrl: \"./profile.component.html\",\n  styleUrls: [\"./profile.component.css\"]\n})\nexport class ProfileComponent {\n  @ViewChild('fileInput') fileInput!: ElementRef;\n\n  updateForm!: FormGroup;\n  user: ProfileData | null = null;\n  countries: Country[] = [];\n  states: State[] = [];\n  filteredStates: State[] = [];\n  load_data: boolean = false;\n  load_btn: boolean = false;\n  imageUrl: any | ArrayBuffer = 'assets/img/illustrations/profiles/profile-2.png';\n  selectedFile: File | null = null;\n  url = GLOBAL.url;\n  private userName: string = '';\n  private userId: string = '';\n  private userRole: string = '';\n  private userIdentification: string = '';\n  private subscriptions = new Subscription();\n\n  constructor(\n    private _formBuilder: FormBuilder,\n    private _authService: AuthService,\n    private _router: Router,\n    private _toastService: ToastService,\n    private _geoInfoService: GeoInfoService,\n    private _dataService: DateService,\n    private _renderer: Renderer2\n  ) {\n    this.updateForm = this._formBuilder.group({\n      inputUserName: [\n        { value: \"\", disabled: true },\n        [Validators.required]\n      ],\n      inputFirstName: [\n        \"\",\n        [\n          Validators.required,\n          Validators.minLength(3),\n          Validators.maxLength(25),\n          Validators.pattern(\"^[a-zA-Z0-9\\\\sñÑ]+$\")\n        ]\n      ],\n      inputLastName: [\n        \"\",\n        [\n          Validators.required,\n          Validators.minLength(3),\n          Validators.maxLength(25),\n          Validators.pattern(\"^[a-zA-Z0-9\\\\sñÑ]+$\")\n        ]\n      ],\n      inputOrganizationName: [\n        \"\",\n        [\n          Validators.required,\n          Validators.minLength(3),\n          Validators.maxLength(30),\n          Validators.pattern(\"^[a-zA-Z0-9\\\\sñÑ]+$\")\n        ]\n      ],\n      inputEmailAddress: [\"\", [Validators.required, Validators.email]],\n      inputCountryAddress: [\"\", [Validators.required]],\n      inputStateAddress: [\"\", [Validators.required]],\n      inputPhoneNumber: [\n        \"\",\n        [Validators.required, Validators.pattern(\"[0-9]+\")]\n      ],\n      inputBirthday: [\n        \"\",\n        [Validators.required, this._dataService.validateDate.bind(this)]\n      ],\n      inputRole: [{ value: \"\", disabled: true }, [Validators.required]],\n      inputIdentification: [\n        { value: \"\", disabled: true },\n        [Validators.required]\n      ],\n      inputAdditionalInfo: [\n        \"\",\n        [\n          Validators.required,\n          Validators.minLength(10),\n          Validators.maxLength(50),\n          Validators.pattern(\"^[a-zA-Z0-9\\\\sñÑ]+$\")\n        ]\n      ],\n      inputProfileImage: [\"\"]\n    });\n  }\n\n  ngOnInit(): void {\n    this.fetchUserData();\n    this.loadCountries();\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n\n  private initUpdateForm() {\n    this.updateForm = this._formBuilder.group({\n\n    });\n  }\n\n  fetchUserData() {\n    this._authService.get_admin().subscribe(\n      response => {\n        if (response.data === undefined) {\n          this._router.navigate([\"\"]);\n        } else {\n          this.user = response.data as ProfileData;\n          if (!this.user._id) {\n            console.error('Error: _id is missing from the user data');\n            return;\n          }\n          this.userId = this.user._id;\n          this.userName = this.user.userName;\n          this.userRole = this.user.role;\n          this.userIdentification = this.user.identification;\n          this.updateFormWithUserData(this.user);\n          this.filterStatesByCountry(this.user.countryAddress);\n        }\n      },\n      error => {\n        console.error(error);\n      }\n    );\n  }\n\n  private updateFormWithUserData(userData: ProfileData) {\n    const birthdayFormatted = this._dataService.convertDateFormat(\n      userData.birthday\n    );\n    this.imageUrl = this.url + 'get_picture_profile/' + userData.profileImage;\n    this.updateForm.patchValue({\n      inputUserName: userData.userName,\n      inputFirstName: userData.firstName,\n      inputLastName: userData.lastName,\n      inputOrganizationName: userData.organizationName,\n      inputCountryAddress: userData.countryAddress,\n      inputStateAddress: userData.stateAddress,\n      inputEmailAddress: userData.emailAddress,\n      inputPhoneNumber: userData.phoneNumber,\n      inputBirthday: birthdayFormatted,\n      inputRole: userData.role,\n      inputIdentification: userData.identification,\n      inputAdditionalInfo: userData.additionalInfo,\n      inputCreatedAt: userData.createdAt,\n      inputUpdatedAt: userData.updatedAt,\n    });\n  }\n\n  private loadCountries() {\n    this._geoInfoService.get_Countries().subscribe(\n      data => {\n        this.countries = data.sort((a: Country, b: Country) =>\n          a.name.localeCompare(b.name)\n        );\n        this.loadStates();\n      },\n      error => {\n        console.error(\"Error loading countries\", error);\n      }\n    );\n  }\n\n  private loadStates() {\n    this._geoInfoService.get_States().subscribe(\n      data => {\n        this.states = data.sort((a: State, b: State) =>\n          a.province_name.localeCompare(b.province_name)\n        );\n      },\n      error => {\n        console.error(\"Error loading states\", error);\n      }\n    );\n  }\n\n  filterStatesByCountry(countryId: string | number) {\n    const numericCountryId = Number(countryId);\n    this.filteredStates = this.states.filter(\n      state => state.country_id === numericCountryId\n    );\n    const stateControl = this.updateForm.get(\"inputState\");\n    if (stateControl) {\n      stateControl.setValue(null);\n    }\n  }\n\n  onCountryChange(event: Event) {\n    const selectElement = event.target as HTMLSelectElement;\n    const countryId = selectElement.value;\n    this.filterStatesByCountry(countryId);\n    const stateControl = this.updateForm.get('inputStateAddress');\n    if (stateControl) {\n      stateControl.setValue(\"\");\n    }\n  }\n\n  fileChangeEvent(event: Event): void {\n    const inputElement = event.target as HTMLInputElement;\n\n    if (inputElement.files && inputElement.files.length > 0) {\n      this.selectedFile = inputElement.files[0];\n      this.validateAndUpdateImg(this.selectedFile);\n    }\n  }\n\n\n  private validateAndUpdateImg(file: File) {\n    if (!this.imageUrl && !file) {\n      this.updateForm.get('inputProfileImage')!.setErrors({ required: true });\n      return;\n    }\n    if (file) {\n      const errors = this.validateFileUpdate(file);\n      if (errors) {\n        this.updateForm.get('inputProfileImage')!.setErrors(errors);\n      }\n    }\n  }\n\n  private validateFileUpdate(file: File): { [key: string]: any } | null {\n    if (file) {\n      const validTypes = ['image/png', 'image/webp', 'image/jpg', 'image/gif', 'image/jpeg'];\n      if (validTypes.includes(file.type)) {\n        if (file.size <= 4000000) {\n          let reader = new FileReader();\n          reader.readAsDataURL(file);\n\n          reader.onload = () => {\n            if (reader.result !== null) {\n              this.imageUrl = reader.result as string;\n              this.updateForm.patchValue({\n                file: reader.result\n              });\n            }\n          }\n          return null;\n        } else {\n          console.error('error', 'The image cannot exceed 4 mb');\n          this._toastService.showToast('error', 'The image cannot exceed 4 mb');\n          return { invalidFileSize: true };\n        }\n      } else {\n        console.error('The file must be a PNG, WEBP, JPG, GIF, or JPEG image.');\n        this._toastService.showToast('error', 'The file must be a PNG, WEBP, JPG, GIF, or JPEG image.');\n        return { invalidFileType: true };\n      }\n    }\n\n    return null;\n  }\n\n  triggerFileInput(): void {\n    this._renderer.selectRootElement(this.fileInput.nativeElement).click();\n  }\n\n  update() {\n    if (this.updateForm.invalid) {\n      for (const control of Object.keys(this.updateForm.controls)) {\n        this.updateForm.controls[control].markAsTouched();\n      }\n      this.load_btn = false;\n      this._toastService.showToast('error', 'There are errors on the form. Please check the fields.');\n      return;\n    }\n\n    const formValue = this.updateForm.value;\n    // console.info('userName:', formValue.inputUserName);\n    // console.info('firstName:', formValue.inputFirstName);\n    // console.info('lastName:', formValue.inputLastName);\n    // console.info('organizationName:', formValue.inputOrganizationName);\n    // console.info('emailAddress:', formValue.inputEmailAddress);\n    // console.info('countryAddress:', formValue.inputCountryAddress);\n    // console.info('stateAddress:', formValue.inputStateAddress);\n    // console.info('phoneNumber:', formValue.inputPhoneNumber);\n    // console.info('birthday:', formValue.inputBirthday);\n    // console.info('role:', formValue.inputRole);\n    // console.info('identification:', formValue.inputIdentification);\n    // console.info('additionalInfo:', formValue.inputAdditionalInfo);\n    // console.info('file:', this.selectedFile);\n\n    const data: any = {};\n    if (this.selectedFile) {\n      data.profileImage = this.selectedFile;\n    }\n    data._id = this.userId;\n    data.userName = this.userName;\n    data.role = this.userRole;\n    data.identification = this.userIdentification;\n    data.firstName = formValue.inputFirstName;\n    data.lastName = formValue.inputLastName;\n    data.organizationName = formValue.inputOrganizationName;\n    data.emailAddress = formValue.inputEmailAddress;\n    data.countryAddress = formValue.inputCountryAddress;\n    data.stateAddress = formValue.inputStateAddress;\n    data.phoneNumber = formValue.inputPhoneNumber;\n    data.birthday = formValue.inputBirthday;\n    data.additionalInfo = formValue.inputAdditionalInfo;\n\n\n\n    // this.load_btn = true;\n    // this._authService.update_admin(data).subscribe(\n    //   response => {\n    //     this._toastService.showToast('success', 'New profile data has been successfully updated..');\n    //     this.load_btn = false;\n    //   },\n    //   error => {\n    //     if (error.status === 404 && error.error.message === 'Admin exists.') {\n    //       this._toastService.showToast('error', 'There is already another user associated with that name in the database');\n    //     } else {\n    //       this._toastService.showToast('error', 'Update failed');\n    //     }\n    //     this.load_btn = false;\n    //   }\n    // );\n  }\n\n}\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}