{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\modules\\account-settings\\profile\\profile.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { GLOBAL } from 'src/app/core/config/GLOBAL';\nimport { FormBuilder, FormGroup, Validators, FormControl } from \"@angular/forms\";\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/core/auth/auth.service';\nimport { ToastService } from 'src/app/shared/services/toast.service';\nimport { ProfileData } from 'src/app/core/model/profile-data';\nimport { geo\n\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})\nexport class ProfileComponent {\n  updateForm!: FormGroup;\n  public user: any = { data: {} };\n  submitted = false;\n\n\n  country: any[] = [];\n  countries: any[] = [];\n  countries_arr: any[] = [];\n  states: any[] = [];\n  country_divGeo: string = '';\n  country_phone_code: string = '';\n\n  constructor(\n    private _formBuilder: FormBuilder,\n    private _authService: AuthService,\n    private _router: Router,\n    private _toastService: ToastService\n  ) {\n    this.updateForm = this._formBuilder.group({\n      inputUserName: ['', [Validators.required, Validators.minLength(12), Validators.maxLength(25),  Validators.pattern(/^\\S*$/), Validators.pattern(/^[a-zA-Z0-9]*$/)]],\n      inputFirstName: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(25), Validators.pattern(\"^[a-zA-Z0-9\\\\sñÑ]+$\")]],\n      inputLastName: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(25), Validators.pattern(\"^[a-zA-Z0-9\\\\sñÑ]+$\")]],\n      inputOrganizationName: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(30), Validators.pattern(\"^[a-zA-Z0-9\\\\sñÑ]+$\")]],\n      inputEmailAddress: ['', [Validators.required, Validators.email]],\n      inputLocation: ['', [Validators.required]],\n      inputPhoneNumber: ['', [Validators.required, Validators.pattern(\"[0-9]+\")]],\n      inputBirthday: ['', [Validators.required, this.validateDate.bind(this)]],\n      inputRole: [{ value: '', disabled: true }, [Validators.required]],\n      inputIdentification: [{ value: '', disabled: true }, [Validators.required]],\n      inputAdditionalInfo: ['', [Validators.required, Validators.minLength(10), Validators.maxLength(50), Validators.pattern(\"^[a-zA-Z0-9\\\\sñÑ]+$\")]],\n      inputProfileImage: ['', [Validators.required]],\n    });\n  }\n\n  get f() {\n    return this.updateForm.controls;\n  }\n\n\n  ngOnInit(): void {\n    this.fetchUserData();\n}\n\n\n\n  fetchUserData() {\n    this._authService.get_admin().subscribe(\n      response => {\n        this.user = response;\n        console.log(\"🚀 ~ file: profile.component.ts:48 ~ ProfileComponent ~ fetchUserData ~ this.user:\", this.user)\n        if (response.data === undefined) {\n          this._router.navigate(['']);\n        } else {\n          const { userName, firstName, lastName, organizationName, emailAddress, location, phoneNumber, birthday, role, identification, additionalInfo, profileImage, createdAt, updatedAt } = response.data;\n          const birthdayFormatted = this.convertDateFormat(response.data.birthday);          \n          this.updateForm.patchValue({\n            inputUserName: userName,\n            inputFirstName: firstName,\n            inputLastName: lastName,\n            inputOrganizationName: organizationName,\n            inputEmailAddress: emailAddress,\n            inputLocation: location,\n            inputPhoneNumber: phoneNumber,\n            inputBirthday: birthdayFormatted,\n            inputRole: role,\n            inputIdentification: identification,\n            inputAdditionalInfo: additionalInfo,\n            inputProfileImage: profileImage,\n            inputCreatedAt: createdAt,\n            inputUpdatedAt: updatedAt,\n          });\n\n        }\n\n      },\n      error => {\n        console.error(error);\n      }\n    );\n  }\n\n\n  \n  onCountryChange() {\n\n    this.states = [];\n    this.countries_arr = [];\n\n\n    const { country } = this.proveedor;\n    const selectedCountryId = country;\n\n    this._proveedorService.get_States().subscribe(\n      (response) => {\n        response.forEach((element: any) => {\n\n          if (element.country_id == selectedCountryId) {\n            this.states.push({\n              country_id: element.country_id,\n              province_abbrev: element.province_abbrev,\n              province_name: element.province_name\n            });\n          }\n        });\n        this.states.sort((a, b) => a.province_name.localeCompare(b.province_name));\n      }\n    );\n\n    this._proveedorService.get_Countries().subscribe(\n      (response) => {\n        response.forEach((element: any) => {\n\n          if (selectedCountryId == element.id) {\n            this.countries_arr.push({\n              country_id: element.id,\n              country_abbrev: element.iso2,\n              country_phone_code: element.prefix,\n              country_divGeo: element.divGeo,\n            });\n          }\n        });\n        const firstElement = this.countries_arr[0];\n        this.country_divGeo = firstElement ? firstElement.country_divGeo : '';\n        this.country_phone_code = firstElement ? firstElement.country_phone_code : '';\n        this.proveedor.phone = this.country_phone_code + (this.proveedor.phone || '').replace(this.country_phone_code, '');\n\n      }\n    );\n  }\n\n\nprivate convertDateFormat(dateString: string): string {\n    const date = new Date(dateString);\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    return `${year}-${month}-${day}`;\n}\n\nprivate validateDate(control: FormControl): { [key: string]: any } | null {\n  const inputDateStr: string = control.value;\n  if (!/^\\d{4}-\\d{2}-\\d{2}$/.test(inputDateStr)) {\n      return { 'invalidDateFormat': true };\n  }\n  return null;\n}\n\n\n\n  update() {\n\n    this.submitted = true;\n  }\n\n\n}\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}