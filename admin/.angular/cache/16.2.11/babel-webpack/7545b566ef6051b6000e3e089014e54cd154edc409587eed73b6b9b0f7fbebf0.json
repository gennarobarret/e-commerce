{"ast":null,"code":"//is-logged-in.guard.ts\nimport { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nlet isLoggedInGuard = class isLoggedInGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(next, state) {\n    // Verifica si el usuario está autenticado o tiene los permisos necesarios para acceder a las rutas del LayoutModule\n    if (this.authService.isAuthenticated(['MasterAdministrator'])) {\n      return true;\n    } else {\n      // Si el usuario no está autenticado, redirige a la página de inicio de sesión o a la página que desees.\n      return this.router.createUrlTree(['/auth/login']);\n    }\n  }\n};\nisLoggedInGuard = __decorate([Injectable({\n  providedIn: 'root'\n})], isLoggedInGuard);\nexport { isLoggedInGuard };\n// import { Injectable } from '@angular/core';\n// import { CanActivate, Router } from '@angular/router';\n// import { Observable, of } from 'rxjs';\n// import { switchMap } from 'rxjs/operators';\n// import { AuthService } from '../services/auth.service';\n// import { InitialConfigService } from '../services/initial-config.service';\n// @Injectable({\n//   providedIn: 'root',\n// })\n// export class isLoggedInGuard implements CanActivate {\n//   constructor(\n//     private authService: AuthService,\n//     private initialConfigService: InitialConfigService,\n//     private router: Router\n//   ) { }\n//   canActivate(): Observable<boolean> {\n//     return this.initialConfigService.InitialCheck().pipe(\n//       switchMap(response => {\n//         if (!response.setupRequired) {\n//           this.router.navigate(['/initial-config']);\n//           return of(false);\n//         } else {\n//           if (this.authService.isAuthenticated(['MasterAdministrator'])) {\n//             return of(true);\n//           } else {\n//             this.router.navigate(['/auth/login']);\n//             return of(false);\n//           }\n//         }\n//       })\n//     );\n//   }\n// }","map":{"version":3,"names":["Injectable","isLoggedInGuard","constructor","authService","router","canActivate","next","state","isAuthenticated","createUrlTree","__decorate","providedIn"],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\core\\auth\\guards\\is-logged-in.guard.ts"],"sourcesContent":["//is-logged-in.guard.ts\n\nimport { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class isLoggedInGuard implements CanActivate {\n\n  constructor(\n    private authService: AuthService,\n    private router: Router\n  ) { }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): boolean | UrlTree {\n    // Verifica si el usuario está autenticado o tiene los permisos necesarios para acceder a las rutas del LayoutModule\n    if (this.authService.isAuthenticated(['MasterAdministrator'])) {\n      return true;\n    } else {\n      // Si el usuario no está autenticado, redirige a la página de inicio de sesión o a la página que desees.\n      return this.router.createUrlTree(['/auth/login']);\n    }\n  }\n}\n\n// import { Injectable } from '@angular/core';\n// import { CanActivate, Router } from '@angular/router';\n// import { Observable, of } from 'rxjs';\n// import { switchMap } from 'rxjs/operators';\n// import { AuthService } from '../services/auth.service';\n// import { InitialConfigService } from '../services/initial-config.service';\n\n// @Injectable({\n//   providedIn: 'root',\n// })\n// export class isLoggedInGuard implements CanActivate {\n//   constructor(\n//     private authService: AuthService,\n//     private initialConfigService: InitialConfigService,\n//     private router: Router\n//   ) { }\n\n//   canActivate(): Observable<boolean> {\n//     return this.initialConfigService.InitialCheck().pipe(\n//       switchMap(response => {\n//         if (!response.setupRequired) {\n//           this.router.navigate(['/initial-config']);\n//           return of(false);\n//         } else {\n//           if (this.authService.isAuthenticated(['MasterAdministrator'])) {\n//             return of(true);\n//           } else {\n//             this.router.navigate(['/auth/login']);\n//             return of(false);\n//           }\n//         }\n//       })\n//     );\n//   }\n// }\n"],"mappings":"AAAA;;AAEA,SAASA,UAAU,QAAQ,eAAe;AAQ1C,IAAaC,eAAe,GAA5B,MAAaA,eAAe;EAE1BC,YACUC,WAAwB,EACxBC,MAAc;IADd,KAAAD,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;EACZ;EAEJC,WAAWA,CACTC,IAA4B,EAC5BC,KAA0B;IAC1B;IACA,IAAI,IAAI,CAACJ,WAAW,CAACK,eAAe,CAAC,CAAC,qBAAqB,CAAC,CAAC,EAAE;MAC7D,OAAO,IAAI;KACZ,MAAM;MACL;MACA,OAAO,IAAI,CAACJ,MAAM,CAACK,aAAa,CAAC,CAAC,aAAa,CAAC,CAAC;;EAErD;CACD;AAlBYR,eAAe,GAAAS,UAAA,EAJ3BV,UAAU,CAAC;EACVW,UAAU,EAAE;CACb,CAAC,C,EAEWV,eAAe,CAkB3B;SAlBYA,eAAe;AAoB5B;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}