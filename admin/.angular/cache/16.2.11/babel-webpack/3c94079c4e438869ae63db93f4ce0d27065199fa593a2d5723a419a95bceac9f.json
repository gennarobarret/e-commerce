{"ast":null,"code":"import { JwtHelperService } from '@auth0/angular-jwt';\nimport { GLOBAL } from '../config/GLOBAL';\nimport { throwError, Subject, EMPTY } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nclass AuthService {\n  constructor(_http, _router) {\n    this._http = _http;\n    this._router = _router;\n    this.url = GLOBAL.url;\n    this.loginSuccessSubject = new Subject();\n    this.loginSuccessObservable = this.loginSuccessSubject.asObservable();\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  isAuthenticated(allowRoles) {\n    const token = this.getToken();\n    if (!token) return false;\n    try {\n      const helper = new JwtHelperService();\n      const decodedToken = helper.decodeToken(token);\n      if (!decodedToken || !decodedToken['role']) {\n        this.logout();\n        return false;\n      }\n      return allowRoles.includes(decodedToken['role']);\n    } catch (error) {\n      this.logout();\n      return false;\n    }\n  }\n  login_admin(credentials) {\n    return this._http.post(`${this.url}login_admin`, credentials).pipe(tap(response => {\n      if (response.token) {\n        this.storeToken(response.token);\n        this._router.navigate(['/']);\n        this.loginSuccessSubject.next(true);\n      }\n    }), catchError(error => this.handleError(error)));\n  }\n  logout() {\n    this.removeToken();\n    this._router.navigate(['/auth/login']);\n  }\n  get_admin() {\n    const token = this.getToken();\n    if (!token) {\n      this._router.navigate(['/auth/login']);\n      return EMPTY;\n    }\n    const authHeaders = this.getHeaders(token);\n    return this._http.get(`${this.url}get_admin`);\n  }\n  check_admin_exists() {\n    return this._http.get(`${this.url}check_admin_exists`);\n  }\n  createAdmin(data) {\n    return this._http.post(`${this.url}create_admin`, data);\n  }\n  handleError(error) {\n    let errorMessage = error.error.message || 'An error occurred';\n    return throwError(() => new Error(errorMessage));\n  }\n  storeToken(token) {\n    localStorage.setItem('token', token);\n  }\n  removeToken() {\n    localStorage.removeItem('token');\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { AuthService };","map":{"version":3,"names":["JwtHelperService","GLOBAL","throwError","Subject","EMPTY","tap","catchError","AuthService","constructor","_http","_router","url","loginSuccessSubject","loginSuccessObservable","asObservable","getToken","localStorage","getItem","isAuthenticated","allowRoles","token","helper","decodedToken","decodeToken","logout","includes","error","login_admin","credentials","post","pipe","response","storeToken","navigate","next","handleError","removeToken","get_admin","authHeaders","getHeaders","get","check_admin_exists","createAdmin","data","errorMessage","message","Error","setItem","removeItem","_","i0","ɵɵinject","i1","HttpClient","i2","Router","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\core\\auth\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { LoginCredentials } from 'src/app/core/model';\nimport { GLOBAL } from '../config/GLOBAL';\nimport { Observable, throwError, Subject, EMPTY } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\n\n\nexport class AuthService {\n  private url: string = GLOBAL.url;\n  \n\n  private loginSuccessSubject = new Subject<boolean>();\n  public loginSuccessObservable = this.loginSuccessSubject.asObservable();\n\n  constructor(private _http: HttpClient, private _router: Router) { }\n\n  \n  getToken(): string | null {\n    return localStorage.getItem('token');\n  }\n\n\n  isAuthenticated(allowRoles: string[]): boolean {\n    const token = this.getToken();\n    if (!token) return false;\n\n    try {\n      const helper = new JwtHelperService();\n      const decodedToken = helper.decodeToken(token);\n      if (!decodedToken || !decodedToken['role']) {\n        this.logout();\n        return false;\n      }\n      return allowRoles.includes(decodedToken['role']);\n    } catch (error) {\n      this.logout();\n      return false;\n    }\n  }\n\n  login_admin(credentials: LoginCredentials): Observable<any> {\n    return this._http\n      .post<any>(`${this.url}login_admin`, credentials)\n      .pipe(\n        tap(response => {\n          if (response.token) {\n            this.storeToken(response.token);\n            this._router.navigate(['/']);\n            this.loginSuccessSubject.next(true);\n          }\n        }),\n        catchError(error => this.handleError(error))\n      );\n  }\n  \n\n  logout(): void {\n    this.removeToken();\n    this._router.navigate(['/auth/login']);\n  }\n\n  get_admin(): Observable<any> {\n    const token = this.getToken();\n    if (!token) {\n      this._router.navigate(['/auth/login']);\n      return EMPTY;\n    }\n    const authHeaders = this.getHeaders(token);\n    return this._http.get(`${this.url}get_admin`, );\n  }\n  \n\n  check_admin_exists(): Observable<any> {\n    return this._http.get<any>(`${this.url}check_admin_exists`);\n  }\n\n  createAdmin(data: any): Observable<any> {\n    return this._http.post(`${this.url}create_admin`, data);\n  }\n  \n\n  private handleError(error: any): Observable<never> {\n    let errorMessage = error.error.message || 'An error occurred';\n    return throwError(() => new Error(errorMessage));\n  }\n\n\n\n  private storeToken(token: string): void {\n    localStorage.setItem('token', token);\n  }\n\n  private removeToken(): void {\n    localStorage.removeItem('token');\n  }\n\n}\n\n\n\n\n\n\n\n\n\n// import { Injectable } from '@angular/core';\n// import { Observable, throwError, Subject } from 'rxjs';\n// import { tap, catchError } from 'rxjs/operators';\n// import { HttpClient, HttpHeaders } from '@angular/common/http';\n// import { Router } from '@angular/router';\n// import { JwtHelperService } from '@auth0/angular-jwt';\n// import { LoginCredentials } from 'src/app/core/model';\n// import { ApiResponse } from '../model/api-response.interface';\n// import { GLOBAL } from '../config/GLOBAL';\n\n\n// @Injectable({\n//   providedIn: 'root',\n// })\n// export class AuthService {\n//   private url: string = GLOBAL.url;\n//   private headers: HttpHeaders = new HttpHeaders({\n//     'Content-Type': 'application/json',\n//   });\n\n//   private loginSuccessSubject = new Subject<boolean>();\n//   public loginSuccessObservable = this.loginSuccessSubject.asObservable();\n\n//   constructor(private _http: HttpClient, private _router: Router) {}\n\n//   private storeToken(token: string): void {\n//     localStorage.setItem('token', token);\n//   }\n\n//   private removeToken(): void {\n//     localStorage.removeItem('token');\n//   }\n\n//   private redirectTo(path: string): void {\n//     this._router.navigate([path]);\n//   }\n\n//   getToken(): string | null {\n//     return localStorage.getItem('token');\n//   }\n\n//   private handleError(error: any): Observable<never> {\n//     let errorMessage = 'An error occurred during the operation';\n//     if (error.error.message) {\n//       errorMessage = error.error.message;\n//     }\n//     console.error('Error:', errorMessage);\n//     return throwError(() => new Error(errorMessage));\n//   }\n\n//   isAuthenticated(allowRoles: string[]): boolean {\n//     const token = this.getToken();\n\n\n//     if (!token) {\n//       return false;\n//     }\n\n//     try {\n//       const helper = new JwtHelperService();\n//       const decodedToken = helper.decodeToken(token);\n\n//       if (!decodedToken || !decodedToken['role']) {\n//         this.removeToken();\n//         return false;\n//       }\n//       return allowRoles.includes(decodedToken['role']);\n//     } catch (error) {\n//       console.error('Error decoding token:', error);\n//       this.removeToken();\n//       return false;\n//     }\n//   }\n\n//   check_admin_exists(): Observable<any> {\n//     return this._http.get<any>(`${this.url}check_admin_exists`, {\n//       headers: this.headers,\n//     });\n//   }\n\n//   createAdmin(data: any): Observable<any> {\n//     return this._http.post(`${this.url}create_admin`, data, {\n//       headers: this.headers,\n//     });\n//   }\n\n//   login_admin(credentials: LoginCredentials): Observable<any> {\n//     return this._http\n//       .post<ApiResponse>(`${this.url}login_admin`, credentials, {\n//         headers: this.headers,\n//       })\n//       .pipe(\n//         tap((response) => {\n//           if (response.token) {\n//             this.storeToken(response.token);\n//             this.redirectTo('/');\n//             this.loginSuccessSubject.next(true);\n//           }\n//         }),\n//         catchError((error) => this.handleError(error))\n//       );\n//   }\n\n//   get_admin(token: any): Observable<any> {\n//     const authHeaders = this.headers.set('Authorization', token);\n//     return this._http.get(`${this.url}get_admin`, { headers: authHeaders });\n//   }\n\n//   logout(): void {\n//     this.removeToken();\n//     this.redirectTo('auth/login');\n//   }\n// }\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}