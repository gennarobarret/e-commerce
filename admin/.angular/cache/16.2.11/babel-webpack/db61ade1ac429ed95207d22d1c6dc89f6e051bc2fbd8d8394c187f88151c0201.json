{"ast":null,"code":"export {};\n// import { Injectable } from '@angular/core';\n// import { Observable, throwError, Subject } from 'rxjs';\n// import { tap, catchError } from 'rxjs/operators';\n// import { HttpClient, HttpHeaders } from '@angular/common/http';\n// import { Router } from '@angular/router';\n// import { JwtHelperService } from '@auth0/angular-jwt';\n// import { LoginCredentials } from 'src/app/core/model';\n// import { ApiResponse } from '../model/api-response.interface';\n// import { GLOBAL } from '../config/GLOBAL';\n// @Injectable({\n//   providedIn: 'root',\n// })\n// export class AuthService {\n//   private url: string = GLOBAL.url;\n//   private headers: HttpHeaders = new HttpHeaders({\n//     'Content-Type': 'application/json',\n//   });\n//   private loginSuccessSubject = new Subject<boolean>();\n//   public loginSuccessObservable = this.loginSuccessSubject.asObservable();\n//   constructor(private _http: HttpClient, private _router: Router) {}\n//   private storeToken(token: string): void {\n//     localStorage.setItem('token', token);\n//   }\n//   private removeToken(): void {\n//     localStorage.removeItem('token');\n//   }\n//   private redirectTo(path: string): void {\n//     this._router.navigate([path]);\n//   }\n//   getToken(): string | null {\n//     return localStorage.getItem('token');\n//   }\n//   private handleError(error: any): Observable<never> {\n//     let errorMessage = 'An error occurred during the operation';\n//     if (error.error.message) {\n//       errorMessage = error.error.message;\n//     }\n//     console.error('Error:', errorMessage);\n//     return throwError(() => new Error(errorMessage));\n//   }\n//   isAuthenticated(allowRoles: string[]): boolean {\n//     const token = this.getToken();\n//     if (!token) {\n//       return false;\n//     }\n//     try {\n//       const helper = new JwtHelperService();\n//       const decodedToken = helper.decodeToken(token);\n//       if (!decodedToken || !decodedToken['role']) {\n//         this.removeToken();\n//         return false;\n//       }\n//       return allowRoles.includes(decodedToken['role']);\n//     } catch (error) {\n//       console.error('Error decoding token:', error);\n//       this.removeToken();\n//       return false;\n//     }\n//   }\n//   check_admin_exists(): Observable<any> {\n//     return this._http.get<any>(`${this.url}check_admin_exists`, {\n//       headers: this.headers,\n//     });\n//   }\n//   createAdmin(data: any): Observable<any> {\n//     return this._http.post(`${this.url}create_admin`, data, {\n//       headers: this.headers,\n//     });\n//   }\n//   login_admin(credentials: LoginCredentials): Observable<any> {\n//     return this._http\n//       .post<ApiResponse>(`${this.url}login_admin`, credentials, {\n//         headers: this.headers,\n//       })\n//       .pipe(\n//         tap((response) => {\n//           if (response.token) {\n//             this.storeToken(response.token);\n//             this.redirectTo('/');\n//             this.loginSuccessSubject.next(true);\n//           }\n//         }),\n//         catchError((error) => this.handleError(error))\n//       );\n//   }\n//   get_admin(token: any): Observable<any> {\n//     const authHeaders = this.headers.set('Authorization', token);\n//     return this._http.get(`${this.url}get_admin`, { headers: authHeaders });\n//   }\n//   logout(): void {\n//     this.removeToken();\n//     this.redirectTo('auth/login');\n//   }\n// }","map":{"version":3,"names":[],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\core\\auth\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { LoginCredentials } from 'src/app/core/model';\nimport { GLOBAL } from '../config/GLOBAL';\nimport { Observable, throwError, Subject, BehaviorSubject, map } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport { User, UserWithToken\n\n@Injectable({\n  providedIn: 'root',\n})\n\n\nexport class AuthService {\n  private url: string = GLOBAL.url;\n  private headers: HttpHeaders = new HttpHeaders({\n    'Content-Type': 'application/json',\n  });\n\n  private user = new BehaviorSubject<UserWithToken | null>(null);\n  user$ = this.user.asObservable();\n  isLoggedIn$: Observable<boolean> = this.user$.pipe(map(Boolean));\n\n  private loginSuccessSubject = new Subject<boolean>();\n  public loginSuccessObservable = this.loginSuccessSubject.asObservable();\n\n  constructor(private _http: HttpClient, private _router: Router) { }\n\n  private storeToken(token: string): void {\n    localStorage.setItem('token', token);\n  }\n\n  private removeToken(): void {\n    localStorage.removeItem('token');\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem('token');\n  }\n\n  isAuthenticated(allowRoles: string[]): boolean {\n    const token = this.getToken();\n    if (!token) return false;\n\n    try {\n      const helper = new JwtHelperService();\n      const decodedToken = helper.decodeToken(token);\n      if (!decodedToken || !decodedToken['role']) {\n        this.logout();\n        return false;\n      }\n      return allowRoles.includes(decodedToken['role']);\n    } catch (error) {\n      this.logout();\n      return false;\n    }\n  }\n\n  login_admin(credentials: LoginCredentials): Observable<any> {\n    return this._http\n      .post<any>(`${this.url}login_admin`, credentials, { headers: this.headers })\n      .pipe(\n        tap(response => {\n          if (response.token) {\n            this.storeToken(response.token);\n            this._router.navigate(['/']);\n            this.loginSuccessSubject.next(true);\n          }\n        }),\n        catchError(error => this.handleError(error))\n      );\n  }\n\n  logout(): void {\n    this.removeToken();\n    this._router.navigate(['/auth/login']);\n  }\n\n  get_admin(token: any): Observable<any> {\n    const authHeaders = this.headers.set('Authorization', token);\n    return this._http.get(`${this.url}get_admin`, { headers: authHeaders });\n  }\n\n  check_admin_exists(): Observable<any> {\n    return this._http.get<any>(`${this.url}check_admin_exists`, {\n      headers: this.headers,\n    });\n  }\n\n  createAdmin(data: any): Observable<any> {\n    return this._http.post(`${this.url}create_admin`, data, {\n      headers: this.headers,\n    });\n  }\n\n  private handleError(error: any): Observable<never> {\n    let errorMessage = error.error.message || 'An error occurred';\n    return throwError(() => new Error(errorMessage));\n  }\n}\n\n\n// import { Injectable } from '@angular/core';\n// import { Observable, throwError, Subject } from 'rxjs';\n// import { tap, catchError } from 'rxjs/operators';\n// import { HttpClient, HttpHeaders } from '@angular/common/http';\n// import { Router } from '@angular/router';\n// import { JwtHelperService } from '@auth0/angular-jwt';\n// import { LoginCredentials } from 'src/app/core/model';\n// import { ApiResponse } from '../model/api-response.interface';\n// import { GLOBAL } from '../config/GLOBAL';\n\n\n// @Injectable({\n//   providedIn: 'root',\n// })\n// export class AuthService {\n//   private url: string = GLOBAL.url;\n//   private headers: HttpHeaders = new HttpHeaders({\n//     'Content-Type': 'application/json',\n//   });\n\n//   private loginSuccessSubject = new Subject<boolean>();\n//   public loginSuccessObservable = this.loginSuccessSubject.asObservable();\n\n//   constructor(private _http: HttpClient, private _router: Router) {}\n\n//   private storeToken(token: string): void {\n//     localStorage.setItem('token', token);\n//   }\n\n//   private removeToken(): void {\n//     localStorage.removeItem('token');\n//   }\n\n//   private redirectTo(path: string): void {\n//     this._router.navigate([path]);\n//   }\n\n//   getToken(): string | null {\n//     return localStorage.getItem('token');\n//   }\n\n//   private handleError(error: any): Observable<never> {\n//     let errorMessage = 'An error occurred during the operation';\n//     if (error.error.message) {\n//       errorMessage = error.error.message;\n//     }\n//     console.error('Error:', errorMessage);\n//     return throwError(() => new Error(errorMessage));\n//   }\n\n//   isAuthenticated(allowRoles: string[]): boolean {\n//     const token = this.getToken();\n\n\n//     if (!token) {\n//       return false;\n//     }\n\n//     try {\n//       const helper = new JwtHelperService();\n//       const decodedToken = helper.decodeToken(token);\n\n//       if (!decodedToken || !decodedToken['role']) {\n//         this.removeToken();\n//         return false;\n//       }\n//       return allowRoles.includes(decodedToken['role']);\n//     } catch (error) {\n//       console.error('Error decoding token:', error);\n//       this.removeToken();\n//       return false;\n//     }\n//   }\n\n//   check_admin_exists(): Observable<any> {\n//     return this._http.get<any>(`${this.url}check_admin_exists`, {\n//       headers: this.headers,\n//     });\n//   }\n\n//   createAdmin(data: any): Observable<any> {\n//     return this._http.post(`${this.url}create_admin`, data, {\n//       headers: this.headers,\n//     });\n//   }\n\n//   login_admin(credentials: LoginCredentials): Observable<any> {\n//     return this._http\n//       .post<ApiResponse>(`${this.url}login_admin`, credentials, {\n//         headers: this.headers,\n//       })\n//       .pipe(\n//         tap((response) => {\n//           if (response.token) {\n//             this.storeToken(response.token);\n//             this.redirectTo('/');\n//             this.loginSuccessSubject.next(true);\n//           }\n//         }),\n//         catchError((error) => this.handleError(error))\n//       );\n//   }\n\n//   get_admin(token: any): Observable<any> {\n//     const authHeaders = this.headers.set('Authorization', token);\n//     return this._http.get(`${this.url}get_admin`, { headers: authHeaders });\n//   }\n\n//   logout(): void {\n//     this.removeToken();\n//     this.redirectTo('auth/login');\n//   }\n// }\n\n"],"mappings":";AAwGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}