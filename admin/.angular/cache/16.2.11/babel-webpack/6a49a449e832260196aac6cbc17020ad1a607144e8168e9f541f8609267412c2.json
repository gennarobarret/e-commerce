{"ast":null,"code":"import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, first, switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../core/auth/auth.service\";\nimport * as i2 from \"@angular/router\";\nclass AuthTokenInterceptor {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  intercept(req, next) {\n    return this.authService.isLoggedIn$.pipe(first(), switchMap(isLoggedIn => {\n      let modifiedReq = req;\n      if (isLoggedIn) {\n        const token = this.authService.getToken();\n        if (token) {\n          const headers = req.headers.append('Authorization', `Bearer ${token}`);\n          modifiedReq = req.clone({\n            headers\n          });\n        }\n      }\n      return next.handle(modifiedReq).pipe(catchError(error => {\n        if (error.status === 401 || error.status === 403) {\n          this.authService.logout();\n          this.router.navigate(['/auth/login']);\n        }\n        return throwError(error);\n      }));\n    }));\n  }\n  static #_ = this.ɵfac = function AuthTokenInterceptor_Factory(t) {\n    return new (t || AuthTokenInterceptor)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthTokenInterceptor,\n    factory: AuthTokenInterceptor.ɵfac\n  });\n}\nexport { AuthTokenInterceptor };\nexport const combinedAuthInterceptorProvider = {\n  provide: HTTP_INTERCEPTORS,\n  useClass: CombinedAuthInterceptor,\n  multi: true\n};","map":{"version":3,"names":["HTTP_INTERCEPTORS","throwError","catchError","first","switchMap","AuthTokenInterceptor","constructor","authService","router","intercept","req","next","isLoggedIn$","pipe","isLoggedIn","modifiedReq","token","getToken","headers","append","clone","handle","error","status","logout","navigate","_","i0","ɵɵinject","i1","AuthService","i2","Router","_2","factory","ɵfac","combinedAuthInterceptorProvider","provide","useClass","CombinedAuthInterceptor","multi"],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\interceptors\\auth-token.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpInterceptor,\n  HttpHandler,\n  HttpRequest,\n  HttpErrorResponse,\n  HTTP_INTERCEPTORS\n} from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, first, switchMap } from 'rxjs/operators';\nimport { AuthService } from '../core/auth/auth.service';\nimport { Router } from '@angular/router';\n\n@Injectable()\nexport class AuthTokenInterceptor implements HttpInterceptor {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return this.authService.isLoggedIn$.pipe(\n      first(),\n      switchMap(isLoggedIn => {\n        let modifiedReq = req;\n        if (isLoggedIn) {\n          const token = this.authService.getToken();\n          if (token) {\n            const headers = req.headers.append('Authorization', `Bearer ${token}`);\n            modifiedReq = req.clone({ headers });\n          }\n        }\n        return next.handle(modifiedReq).pipe(\n          catchError((error: HttpErrorResponse) => {\n            if (error.status === 401 || error.status === 403) {\n              this.authService.logout();\n              this.router.navigate(['/auth/login']);\n            }\n            return throwError(error);\n          })\n        );\n      })\n    );\n  }\n}\n\nexport const combinedAuthInterceptorProvider = {\n  provide: HTTP_INTERCEPTORS,\n  useClass: CombinedAuthInterceptor,\n  multi: true,\n};\n\n\n// import { Injectable } from '@angular/core';\n// import {\n//   HttpRequest,\n//   HttpHandler,\n//   HttpEvent,\n//   HttpInterceptor,\n//   HttpErrorResponse\n// } from '@angular/common/http';\n// import { Observable, throwError } from 'rxjs';\n// import { catchError } from 'rxjs/operators';\n// import { Router } from '@angular/router';\n\n\n// @Injectable()\n// export class AuthTokenInterceptor implements HttpInterceptor {\n\n//   constructor(private router: Router) {}\n\n//   intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n//     return next.handle(request).pipe(\n//       catchError((error: HttpErrorResponse) => {\n//         if (error.status === 401 || error.status === 403) {\n//           localStorage.removeItem('token');\n//           this.router.navigate(['/auth/login']);\n//         }\n//         return throwError(error);\n//       })\n//     );\n//   }\n// }\n"],"mappings":"AACA,SAMEA,iBAAiB,QACZ,sBAAsB;AAC7B,SAAqBC,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,EAAEC,KAAK,EAAEC,SAAS,QAAQ,gBAAgB;;;;AAI7D,MACaC,oBAAoB;EAC/BC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,MAAM,GAANA,MAAM;EAAW;EAEvEC,SAASA,CAACC,GAAqB,EAAEC,IAAiB;IAChD,OAAO,IAAI,CAACJ,WAAW,CAACK,WAAW,CAACC,IAAI,CACtCV,KAAK,EAAE,EACPC,SAAS,CAACU,UAAU,IAAG;MACrB,IAAIC,WAAW,GAAGL,GAAG;MACrB,IAAII,UAAU,EAAE;QACd,MAAME,KAAK,GAAG,IAAI,CAACT,WAAW,CAACU,QAAQ,EAAE;QACzC,IAAID,KAAK,EAAE;UACT,MAAME,OAAO,GAAGR,GAAG,CAACQ,OAAO,CAACC,MAAM,CAAC,eAAe,EAAE,UAAUH,KAAK,EAAE,CAAC;UACtED,WAAW,GAAGL,GAAG,CAACU,KAAK,CAAC;YAAEF;UAAO,CAAE,CAAC;;;MAGxC,OAAOP,IAAI,CAACU,MAAM,CAACN,WAAW,CAAC,CAACF,IAAI,CAClCX,UAAU,CAAEoB,KAAwB,IAAI;QACtC,IAAIA,KAAK,CAACC,MAAM,KAAK,GAAG,IAAID,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;UAChD,IAAI,CAAChB,WAAW,CAACiB,MAAM,EAAE;UACzB,IAAI,CAAChB,MAAM,CAACiB,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC;;QAEvC,OAAOxB,UAAU,CAACqB,KAAK,CAAC;MAC1B,CAAC,CAAC,CACH;IACH,CAAC,CAAC,CACH;EACH;EAAC,QAAAI,CAAA,G;qBA1BUrB,oBAAoB,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;WAApB5B,oBAAoB;IAAA6B,OAAA,EAApB7B,oBAAoB,CAAA8B;EAAA;;SAApB9B,oBAAoB;AA6BjC,OAAO,MAAM+B,+BAA+B,GAAG;EAC7CC,OAAO,EAAErC,iBAAiB;EAC1BsC,QAAQ,EAAEC,uBAAuB;EACjCC,KAAK,EAAE;CACR"},"metadata":{},"sourceType":"module","externalDependencies":[]}