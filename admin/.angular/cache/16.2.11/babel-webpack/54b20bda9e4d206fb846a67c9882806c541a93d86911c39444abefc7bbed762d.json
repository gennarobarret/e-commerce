{"ast":null,"code":"// auth.service.ts\nexport {};","map":{"version":3,"names":[],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\core\\auth\\auth.service.ts"],"sourcesContent":["// auth.service.ts\n\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { LoginCredentials } from 'src/app/core/models';\nimport { GLOBAL } from '../config/GLOBAL';\nimport { Observable, throwError, Subject, EMPTY } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport { ApiResponse } from '../models/api-response.interface';\nimport {}\n@Injectable({\n  providedIn: 'root',\n})\n\n\nexport class AuthService {\n  private url: string = GLOBAL.url;\n  private loginSuccessSubject = new Subject<boolean>();\n  public loginSuccessObservable = this.loginSuccessSubject.asObservable();\n\n  constructor(private _http: HttpClient, private _router: Router) { }\n\n  getToken(): string | null {\n    return localStorage.getItem('token');\n  }\n\n  isAuthenticated(allowRoles: string[]): boolean {\n    const token = this.getToken();\n    if (!token) return false;\n\n    try {\n      const helper = new JwtHelperService();\n      const decodedToken = helper.decodeToken(token);\n      if (!decodedToken || !decodedToken['role']) {\n        this.logout();\n        return false;\n      }\n      return allowRoles.includes(decodedToken['role']);\n    } catch (error) {\n      this.logout();\n      return false;\n    }\n  }\n\n  loginUser(credentials: LoginCredentials): Observable<any> {\n    return this._http\n      .post<any>(`${this.url}loginUser`, credentials)\n      .pipe(\n        tap(response => {\n          if (response.data && response.data.token) {\n            this.storeToken(response.data.token);\n            this._router.navigate(['/']);\n            this.loginSuccessSubject.next(true);\n          }\n        }),\n        catchError(error => this.handleError(error))\n      );\n  }\n\n\n  logout(): void {\n    this.removeToken();\n    this._router.navigate(['/auth/login']);\n  }\n\n  private handleError(error: any): Observable<never> {\n    let errorMessage = error.error.message || 'An error occurred';\n    return throwError(() => new Error(errorMessage));\n  }\n\n  private storeToken(token: string): void {\n    localStorage.setItem('token', token);\n  }\n\n  private removeToken(): void {\n    localStorage.removeItem('token');\n  }\n\n}\n"],"mappings":"AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}