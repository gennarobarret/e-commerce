{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"src/app/core/services/validation.service\";\nimport * as i4 from \"src/app/core/services/initial-config.service\";\nclass ActivationComponent {\n  constructor(route, router, formBuilder, _validationService, _initialConfigService) {\n    this.route = route;\n    this.router = router;\n    this.formBuilder = formBuilder;\n    this._validationService = _validationService;\n    this._initialConfigService = _initialConfigService;\n  }\n  ngOnInit() {\n    this.activationForm = this.formBuilder.group({\n      inputPassword: ['', [Validators.required, Validators.minLength(8)]],\n      inputConfirmPassword: ['', [Validators.required]]\n    }, {\n      validator: this._validationService.mustMatch('inputPassword', 'inputConfirmPassword') // Aplica la validaci√≥n mustMatch\n    });\n\n    this.route.params.subscribe(params => {\n      this.token = params['token'];\n    });\n  }\n  onActivate() {\n    if (this.activationForm.valid) {\n      const password = this.activationForm.value.inputPassword;\n      console.log(\"üöÄ ~ ActivationComponent ~ onActivate ~ password:\", password);\n      // Llama a tu servicio para activar la cuenta\n      this._initialConfigService.activateAccount(this.token).subscribe(response => {\n        // Maneja la respuesta exitosa\n        // Redirige a una p√°gina de √©xito o a donde sea necesario\n        this.router.navigate(['/initial-config/activation-success']);\n      }, error => {\n        // Maneja los errores, por ejemplo, muestra un mensaje de error en la p√°gina\n        console.error('Error al activar la cuenta:', error);\n      });\n    }\n  }\n  static #_ = this.…µfac = function ActivationComponent_Factory(t) {\n    return new (t || ActivationComponent)(i0.…µ…µdirectiveInject(i1.ActivatedRoute), i0.…µ…µdirectiveInject(i1.Router), i0.…µ…µdirectiveInject(i2.FormBuilder), i0.…µ…µdirectiveInject(i3.ValidationService), i0.…µ…µdirectiveInject(i4.InitialConfigService));\n  };\n  static #_2 = this.…µcmp = /*@__PURE__*/i0.…µ…µdefineComponent({\n    type: ActivationComponent,\n    selectors: [[\"app-activation\"]],\n    decls: 7,\n    vars: 0,\n    consts: [[1, \"activation-container\"], [3, \"click\"]],\n    template: function ActivationComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.…µ…µelementStart(0, \"div\", 0)(1, \"h1\");\n        i0.…µ…µtext(2, \"Activaci\\u00F3n de Cuenta\");\n        i0.…µ…µelementEnd();\n        i0.…µ…µelementStart(3, \"p\");\n        i0.…µ…µtext(4, \"Por favor, haz clic en el bot\\u00F3n de abajo para activar tu cuenta.\");\n        i0.…µ…µelementEnd();\n        i0.…µ…µelementStart(5, \"button\", 1);\n        i0.…µ…µlistener(\"click\", function ActivationComponent_Template_button_click_5_listener() {\n          return ctx.activateAccount();\n        });\n        i0.…µ…µtext(6, \"Activar Cuenta\");\n        i0.…µ…µelementEnd()();\n      }\n    },\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}\nexport { ActivationComponent };","map":{"version":3,"names":["Validators","ActivationComponent","constructor","route","router","formBuilder","_validationService","_initialConfigService","ngOnInit","activationForm","group","inputPassword","required","minLength","inputConfirmPassword","validator","mustMatch","params","subscribe","token","onActivate","valid","password","value","console","log","activateAccount","response","navigate","error","_","i0","…µ…µdirectiveInject","i1","ActivatedRoute","Router","i2","FormBuilder","i3","ValidationService","i4","InitialConfigService","_2","selectors","decls","vars","consts","template","ActivationComponent_Template","rf","ctx","…µ…µelementStart","…µ…µtext","…µ…µelementEnd","…µ…µlistener","ActivationComponent_Template_button_click_5_listener"],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\modules\\initial-config\\activation\\activation.component.ts","C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\modules\\initial-config\\activation\\activation.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { InitialConfigService } from 'src/app/core/services/initial-config.service';\nimport { ValidationService } from 'src/app/core/services/validation.service'; // Importa el servicio de validaci√≥n\n\n\n@Component({\n  selector: 'app-activation',\n  templateUrl: './activation.component.html',\n  styleUrls: ['./activation.component.css']\n})\n\nexport class ActivationComponent implements OnInit {\n  activationForm!: FormGroup; // Usa \"!\" para indicar que ser√° inicializada en ngOnInit\n  token!: string; // Usa \"!\" para indicar que ser√° inicializada en ngOnInit\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private formBuilder: FormBuilder,\n    private _validationService: ValidationService,\n    private _initialConfigService: InitialConfigService\n  ) { }\n\n  ngOnInit(): void {\n    this.activationForm = this.formBuilder.group({\n      inputPassword: ['', [Validators.required, Validators.minLength(8)]],\n      inputConfirmPassword: ['', [Validators.required]]\n    }, {\n      validator: this._validationService.mustMatch('inputPassword', 'inputConfirmPassword') // Aplica la validaci√≥n mustMatch\n    });\n\n    this.route.params.subscribe(params => {\n      this.token = params['token'];\n    });\n  }\n\n  onActivate() {\n    if (this.activationForm.valid) {\n      const password = this.activationForm.value.inputPassword;\n      console.log(\"üöÄ ~ ActivationComponent ~ onActivate ~ password:\", password)\n\n      // Llama a tu servicio para activar la cuenta\n      this._initialConfigService.activateAccount(this.token).subscribe(\n        response => {\n          // Maneja la respuesta exitosa\n          // Redirige a una p√°gina de √©xito o a donde sea necesario\n          this.router.navigate(['/initial-config/activation-success']);\n        },\n        error => {\n          // Maneja los errores, por ejemplo, muestra un mensaje de error en la p√°gina\n          console.error('Error al activar la cuenta:', error);\n        }\n      );\n    }\n  }\n\n}","<div class=\"activation-container\">\n    <h1>Activaci√≥n de Cuenta</h1>\n    <p>Por favor, haz clic en el bot√≥n de abajo para activar tu cuenta.</p>\n    <button (click)=\"activateAccount()\">Activar Cuenta</button>\n</div>"],"mappings":"AAEA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;;;AAKnE,MAMaC,mBAAmB;EAI9BC,YACUC,KAAqB,EACrBC,MAAc,EACdC,WAAwB,EACxBC,kBAAqC,EACrCC,qBAA2C;IAJ3C,KAAAJ,KAAK,GAALA,KAAK;IACL,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,WAAW,GAAXA,WAAW;IACX,KAAAC,kBAAkB,GAAlBA,kBAAkB;IAClB,KAAAC,qBAAqB,GAArBA,qBAAqB;EAC3B;EAEJC,QAAQA,CAAA;IACN,IAAI,CAACC,cAAc,GAAG,IAAI,CAACJ,WAAW,CAACK,KAAK,CAAC;MAC3CC,aAAa,EAAE,CAAC,EAAE,EAAE,CAACX,UAAU,CAACY,QAAQ,EAAEZ,UAAU,CAACa,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;MACnEC,oBAAoB,EAAE,CAAC,EAAE,EAAE,CAACd,UAAU,CAACY,QAAQ,CAAC;KACjD,EAAE;MACDG,SAAS,EAAE,IAAI,CAACT,kBAAkB,CAACU,SAAS,CAAC,eAAe,EAAE,sBAAsB,CAAC,CAAC;KACvF,CAAC;;IAEF,IAAI,CAACb,KAAK,CAACc,MAAM,CAACC,SAAS,CAACD,MAAM,IAAG;MACnC,IAAI,CAACE,KAAK,GAAGF,MAAM,CAAC,OAAO,CAAC;IAC9B,CAAC,CAAC;EACJ;EAEAG,UAAUA,CAAA;IACR,IAAI,IAAI,CAACX,cAAc,CAACY,KAAK,EAAE;MAC7B,MAAMC,QAAQ,GAAG,IAAI,CAACb,cAAc,CAACc,KAAK,CAACZ,aAAa;MACxDa,OAAO,CAACC,GAAG,CAAC,mDAAmD,EAAEH,QAAQ,CAAC;MAE1E;MACA,IAAI,CAACf,qBAAqB,CAACmB,eAAe,CAAC,IAAI,CAACP,KAAK,CAAC,CAACD,SAAS,CAC9DS,QAAQ,IAAG;QACT;QACA;QACA,IAAI,CAACvB,MAAM,CAACwB,QAAQ,CAAC,CAAC,oCAAoC,CAAC,CAAC;MAC9D,CAAC,EACDC,KAAK,IAAG;QACN;QACAL,OAAO,CAACK,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACrD,CAAC,CACF;;EAEL;EAAC,QAAAC,CAAA,G;qBA3CU7B,mBAAmB,EAAA8B,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,cAAA,GAAAH,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAE,MAAA,GAAAJ,EAAA,CAAAC,iBAAA,CAAAI,EAAA,CAAAC,WAAA,GAAAN,EAAA,CAAAC,iBAAA,CAAAM,EAAA,CAAAC,iBAAA,GAAAR,EAAA,CAAAC,iBAAA,CAAAQ,EAAA,CAAAC,oBAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAnBzC,mBAAmB;IAAA0C,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,6BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCbhClB,EAAA,CAAAoB,cAAA,aAAkC;QAC1BpB,EAAA,CAAAqB,MAAA,gCAAoB;QAAArB,EAAA,CAAAsB,YAAA,EAAK;QAC7BtB,EAAA,CAAAoB,cAAA,QAAG;QAAApB,EAAA,CAAAqB,MAAA,4EAAgE;QAAArB,EAAA,CAAAsB,YAAA,EAAI;QACvEtB,EAAA,CAAAoB,cAAA,gBAAoC;QAA5BpB,EAAA,CAAAuB,UAAA,mBAAAC,qDAAA;UAAA,OAASL,GAAA,CAAAxB,eAAA,EAAiB;QAAA,EAAC;QAACK,EAAA,CAAAqB,MAAA,qBAAc;QAAArB,EAAA,CAAAsB,YAAA,EAAS;;;;;;SDUlDpD,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}