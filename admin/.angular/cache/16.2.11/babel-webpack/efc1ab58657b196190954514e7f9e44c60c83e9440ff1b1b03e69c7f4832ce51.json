{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../auth.service\";\nimport * as i2 from \"@angular/router\";\nclass IsLoggedInGuard {\n  constructor(_adminService, _router) {\n    this._adminService = _adminService;\n    this._router = _router;\n  }\n  canActivate() {\n    return this._adminService.check_admin_exists().pipe(map(response => {\n      if (response.setupRequired) {\n        this._router.navigate(['/register']);\n        return false;\n      } else {\n        if (!this._adminService.isAuthenticated(['admin'])) {\n          this._router.navigate(['/login']);\n          return false;\n        }\n      }\n      return true;\n    }));\n  }\n  static #_ = this.ɵfac = function IsLoggedInGuard_Factory(t) {\n    return new (t || IsLoggedInGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: IsLoggedInGuard,\n    factory: IsLoggedInGuard.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { IsLoggedInGuard };","map":{"version":3,"names":["map","IsLoggedInGuard","constructor","_adminService","_router","canActivate","check_admin_exists","pipe","response","setupRequired","navigate","isAuthenticated","_","i0","ɵɵinject","i1","AuthService","i2","Router","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\core\\auth\\guards\\is-logged-in.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { CanActivate, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { AuthService } from '../auth.service';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class IsLoggedInGuard implements CanActivate {\n    constructor(private _adminService: AuthService, private _router: Router) { }\n\n    canActivate(): Observable<boolean> | Promise<boolean> | boolean {\n        return this._adminService.check_admin_exists().pipe(\n            map((response) => {\n                if (response.setupRequired) {\n                    this._router.navigate(['/register']);\n                    return false;\n                } else {\n                    if (!this._adminService.isAuthenticated(['admin'])) {\n                        this._router.navigate(['/login']);\n                        return false;\n                    }\n                }\n                return true;\n            })\n        );\n    }\n}\n\n\n\n// import { Injectable } from '@angular/core';\n// import { CanMatch, Router, UrlTree, Route } from '@angular/router';\n// import { Observable } from 'rxjs';\n// import { map } from 'rxjs/operators';\n// import { AuthService } from '../auth.service';\n\n// @Injectable({\n//   providedIn: 'root',\n// })\n// export class IsLoggedInGuard implements CanMatch {\n//   constructor(\n//     private authService: AuthService,\n//     private router: Router\n//     ) {}\n\n//   canMatch(route: Route): Observable<boolean | UrlTree> {\n//     return this.authService.isLoggedIn$.pipe(\n//       map((isLoggedIn) => isLoggedIn || this.router.createUrlTree(['/login']))\n//     );\n//   }\n// }\n\n// import { CanActivateFn } from '@angular/router';\n\n// export const isLoggedInGuard: CanActivateFn = (route, state) => {\n//   return true;\n// };\n"],"mappings":"AAIA,SAASA,GAAG,QAAQ,gBAAgB;;;;AAGpC,MAGaC,eAAe;EACxBC,YAAoBC,aAA0B,EAAUC,OAAe;IAAnD,KAAAD,aAAa,GAAbA,aAAa;IAAuB,KAAAC,OAAO,GAAPA,OAAO;EAAY;EAE3EC,WAAWA,CAAA;IACP,OAAO,IAAI,CAACF,aAAa,CAACG,kBAAkB,EAAE,CAACC,IAAI,CAC/CP,GAAG,CAAEQ,QAAQ,IAAI;MACb,IAAIA,QAAQ,CAACC,aAAa,EAAE;QACxB,IAAI,CAACL,OAAO,CAACM,QAAQ,CAAC,CAAC,WAAW,CAAC,CAAC;QACpC,OAAO,KAAK;OACf,MAAM;QACH,IAAI,CAAC,IAAI,CAACP,aAAa,CAACQ,eAAe,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE;UAChD,IAAI,CAACP,OAAO,CAACM,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;UACjC,OAAO,KAAK;;;MAGpB,OAAO,IAAI;IACf,CAAC,CAAC,CACL;EACL;EAAC,QAAAE,CAAA,G;qBAlBQX,eAAe,EAAAY,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAflB,eAAe;IAAAmB,OAAA,EAAfnB,eAAe,CAAAoB,IAAA;IAAAC,UAAA,EAFZ;EAAM;;SAETrB,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}