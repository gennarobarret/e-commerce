{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n// Asegúrate de actualizar la ruta de importación correctamente\nlet AuthTokenInterceptor = class AuthTokenInterceptor {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  getHeaders(token) {\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    if (token) {\n      headers = headers.set('Authorization', token);\n    }\n    return headers;\n  }\n  intercept(request, next) {\n    const token = this.authService.getToken();\n    let authRequest = request;\n    if (token) {\n      authRequest = request.clone({\n        headers: this.getHeaders(token)\n      });\n    }\n    return next.handle(authRequest).pipe(catchError(error => {\n      if (error.status === 401 || error.status === 403) {\n        this.authService.logout();\n        this.router.navigate(['/auth/login']);\n      }\n      return throwError(error);\n    }));\n  }\n};\nAuthTokenInterceptor = __decorate([Injectable()], AuthTokenInterceptor);\nexport { AuthTokenInterceptor };\n0;\n// import { Injectable } from '@angular/core';\n// import {\n//   HttpRequest,\n//   HttpHandler,\n//   HttpEvent,\n//   HttpInterceptor,\n//   HttpErrorResponse\n// } from '@angular/common/http';\n// import { Observable, throwError } from 'rxjs';\n// import { catchError } from 'rxjs/operators';\n// import { Router } from '@angular/router';\n// @Injectable()\n// export class AuthTokenInterceptor implements HttpInterceptor {\n//   constructor(private router: Router) {}\n//   intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n//     return next.handle(request).pipe(\n//       catchError((error: HttpErrorResponse) => {\n//         if (error.status === 401 || error.status === 403) {\n//           localStorage.removeItem('token');\n//           this.router.navigate(['/auth/login']);\n//         }\n//         return throwError(error);\n//       })\n//     );\n//   }\n// }","map":{"version":3,"names":["Injectable","HttpHeaders","throwError","catchError","AuthTokenInterceptor","constructor","authService","router","getHeaders","token","headers","set","intercept","request","next","getToken","authRequest","clone","handle","pipe","error","status","logout","navigate","__decorate"],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\interceptors\\auth-token.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpErrorResponse,\n  HttpHeaders\n} from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { Router } from '@angular/router';\n // Asegúrate de actualizar la ruta de importación correctamente\n\n@Injectable()\nexport class AuthTokenInterceptor implements HttpInterceptor {\n\n  constructor(private authService: AuthService, private router: Router) {}\n\n  public getHeaders(token?: string): HttpHeaders {\n    let headers = new HttpHeaders({'Content-Type': 'application/json'});\n    if (token) {\n      headers = headers.set('Authorization', token);\n    }\n    return headers;\n  }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const token = this.authService.getToken();\n    let authRequest = request;\n    if (token) {\n      authRequest = request.clone({\n        headers: this.getHeaders(token)\n      });\n    }\n\n    return next.handle(authRequest).pipe(\n      catchError((error: HttpErrorResponse) => {\n        if (error.status === 401 || error.status === 403) {\n          this.authService.logout();\n          this.router.navigate(['/auth/login']);\n        }\n        return throwError(error);\n      })\n    );\n  }\n}\n0\n\n// import { Injectable } from '@angular/core';\n// import {\n//   HttpRequest,\n//   HttpHandler,\n//   HttpEvent,\n//   HttpInterceptor,\n//   HttpErrorResponse\n// } from '@angular/common/http';\n// import { Observable, throwError } from 'rxjs';\n// import { catchError } from 'rxjs/operators';\n// import { Router } from '@angular/router';\n\n\n// @Injectable()\n// export class AuthTokenInterceptor implements HttpInterceptor {\n\n//   constructor(private router: Router) {}\n\n//   intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n//     return next.handle(request).pipe(\n//       catchError((error: HttpErrorResponse) => {\n//         if (error.status === 401 || error.status === 403) {\n//           localStorage.removeItem('token');\n//           this.router.navigate(['/auth/login']);\n//         }\n//         return throwError(error);\n//       })\n//     );\n//   }\n// }\n"],"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAMEC,WAAW,QACN,sBAAsB;AAC7B,SAAqBC,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;AAE1C;AAGD,IAAaC,oBAAoB,GAAjC,MAAaA,oBAAoB;EAE/BC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,MAAM,GAANA,MAAM;EAAW;EAEhEC,UAAUA,CAACC,KAAc;IAC9B,IAAIC,OAAO,GAAG,IAAIT,WAAW,CAAC;MAAC,cAAc,EAAE;IAAkB,CAAC,CAAC;IACnE,IAAIQ,KAAK,EAAE;MACTC,OAAO,GAAGA,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEF,KAAK,CAAC;;IAE/C,OAAOC,OAAO;EAChB;EAEAE,SAASA,CAACC,OAAyB,EAAEC,IAAiB;IACpD,MAAML,KAAK,GAAG,IAAI,CAACH,WAAW,CAACS,QAAQ,EAAE;IACzC,IAAIC,WAAW,GAAGH,OAAO;IACzB,IAAIJ,KAAK,EAAE;MACTO,WAAW,GAAGH,OAAO,CAACI,KAAK,CAAC;QAC1BP,OAAO,EAAE,IAAI,CAACF,UAAU,CAACC,KAAK;OAC/B,CAAC;;IAGJ,OAAOK,IAAI,CAACI,MAAM,CAACF,WAAW,CAAC,CAACG,IAAI,CAClChB,UAAU,CAAEiB,KAAwB,IAAI;MACtC,IAAIA,KAAK,CAACC,MAAM,KAAK,GAAG,IAAID,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;QAChD,IAAI,CAACf,WAAW,CAACgB,MAAM,EAAE;QACzB,IAAI,CAACf,MAAM,CAACgB,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC;;MAEvC,OAAOrB,UAAU,CAACkB,KAAK,CAAC;IAC1B,CAAC,CAAC,CACH;EACH;CACD;AA/BYhB,oBAAoB,GAAAoB,UAAA,EADhCxB,UAAU,EAAE,C,EACAI,oBAAoB,CA+BhC;SA/BYA,oBAAoB;AAgCjC,CAAC;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}