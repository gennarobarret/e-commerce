{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"../services/initial-config.service\";\nimport * as i3 from \"@angular/router\";\nclass AdminExistenceAndLoginGuard {\n  constructor(authService, initialConfigService, router) {\n    this.authService = authService;\n    this.initialConfigService = initialConfigService;\n    this.router = router;\n  }\n  canActivate(next, state) {\n    // Resto de la implementación...\n  }\n  static #_ = this.ɵfac = function AdminExistenceAndLoginGuard_Factory(t) {\n    return new (t || AdminExistenceAndLoginGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.InitialConfigService), i0.ɵɵinject(i3.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AdminExistenceAndLoginGuard,\n    factory: AdminExistenceAndLoginGuard.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { AdminExistenceAndLoginGuard };","map":{"version":3,"names":["AdminExistenceAndLoginGuard","constructor","authService","initialConfigService","router","canActivate","next","state","_","i0","ɵɵinject","i1","AuthService","i2","InitialConfigService","i3","Router","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\core\\guards\\is-logged-in.guard.ts"],"sourcesContent":["//is-logged-in.guard.ts\n\n// import { Injectable } from '@angular/core';\n// import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\n// import { AuthService } from '../services/auth.service';\n\n// @Injectable({\n//   providedIn: 'root'\n// })\n\n// export class isLoggedInGuard implements CanActivate {\n\n//   constructor(\n//     private authService: AuthService,\n//     private router: Router\n//   ) { }\n\n//   canActivate(\n//     next: ActivatedRouteSnapshot,\n//     state: RouterStateSnapshot): boolean | UrlTree {\n//     // Verifica si el usuario está autenticado o tiene los permisos necesarios para acceder a las rutas del LayoutModule\n//     if (this.authService.isAuthenticated(['MasterAdministrator'])) {\n//       return true;\n//     } else {\n//       // Si el usuario no está autenticado, redirige a la página de inicio de sesión o a la página que desees.\n//       return this.router.createUrlTree(['/auth/login']);\n//     }\n//   }\n// }\n\nimport { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\nimport { InitialConfigService } from '../services/initial-config.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AdminExistenceAndLoginGuard implements CanActivate {\n  constructor(\n    private authService: AuthService,\n    private initialConfigService: InitialConfigService,\n    private router: Router\n  ) { }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): boolean | UrlTree {\n    // Resto de la implementación...\n  }\n}\n\n\n"],"mappings":";;;;AAmCA,MAGaA,2BAA2B;EACtCC,YACUC,WAAwB,EACxBC,oBAA0C,EAC1CC,MAAc;IAFd,KAAAF,WAAW,GAAXA,WAAW;IACX,KAAAC,oBAAoB,GAApBA,oBAAoB;IACpB,KAAAC,MAAM,GAANA,MAAM;EACZ;EAEJC,WAAWA,CACTC,IAA4B,EAC5BC,KAA0B;IAE1B;EAAA;EACD,QAAAC,CAAA,G;qBAZUR,2BAA2B,EAAAS,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,oBAAA,GAAAL,EAAA,CAAAC,QAAA,CAAAK,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;WAA3BjB,2BAA2B;IAAAkB,OAAA,EAA3BlB,2BAA2B,CAAAmB,IAAA;IAAAC,UAAA,EAF1B;EAAM;;SAEPpB,2BAA2B"},"metadata":{},"sourceType":"module","externalDependencies":[]}