{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { GLOBAL } from '../config/GLOBAL';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nclass AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.url = GLOBAL.url;\n    this.jwtHelper = new JwtHelperService();\n    this.user = new BehaviorSubject(null);\n    this.user$ = this.user.asObservable();\n    this.isLoggedIn$ = this.user$.pipe(map(user => !!user));\n  }\n  getHttpHeaders() {\n    return new HttpHeaders().set('Content-Type', 'application/json');\n  }\n  isLoggedIn() {\n    const token = localStorage.getItem('token');\n    return token ? !this.jwtHelper.isTokenExpired(token) : false;\n  }\n  isAuthenticated(allowRoles) {\n    const token = localStorage.getItem('token');\n    if (!token) return false;\n    try {\n      const decodedToken = this.jwtHelper.decodeToken(token);\n      if (allowRoles.includes(decodedToken['role'])) {\n        this.user.next({\n          ...decodedToken,\n          token\n        });\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Error decoding token:', error);\n      this.logout();\n      return false;\n    }\n  }\n  login(credentials) {\n    return this.http.post(this.url + 'login', credentials, {\n      headers: this.getHttpHeaders()\n    }).pipe(map(response => {\n      const token = response.token;\n      localStorage.setItem('token', token);\n      const userInfo = this.jwtHelper.decodeToken(token);\n      this.user.next({\n        ...userInfo,\n        token\n      });\n      return response;\n    }));\n  }\n  logout() {\n    localStorage.removeItem('token');\n    this.user.next(null);\n    this.router.navigate(['/login']);\n  }\n  check_admin_exists() {\n    return this.http.get(this.url + 'check_admin_exists', {\n      headers: this.getHttpHeaders()\n    });\n  }\n  createAdmin(data) {\n    return this.http.post(this.url + 'create_admin', data, {\n      headers: this.getHttpHeaders()\n    });\n  }\n  get_admin(token) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': token\n    });\n    return this.http.get(this.url + 'get_admin', {\n      headers\n    });\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { AuthService };","map":{"version":3,"names":["HttpHeaders","BehaviorSubject","map","JwtHelperService","GLOBAL","AuthService","constructor","http","router","url","jwtHelper","user","user$","asObservable","isLoggedIn$","pipe","getHttpHeaders","set","isLoggedIn","token","localStorage","getItem","isTokenExpired","isAuthenticated","allowRoles","decodedToken","decodeToken","includes","next","error","console","logout","login","credentials","post","headers","response","setItem","userInfo","removeItem","navigate","check_admin_exists","get","createAdmin","data","get_admin","_","i0","ɵɵinject","i1","HttpClient","i2","Router","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\core\\auth\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { JwtHelperService } from '@auth0/angular-jwt';\n\nimport { GLOBAL } from '../config/GLOBAL';\nimport { UserWithToken } from '../model/user.interface';\nimport { LoginCredentials } from '../model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private url = GLOBAL.url;\n  private jwtHelper = new JwtHelperService();\n  private user = new BehaviorSubject<UserWithToken | null>(null);\n  public user$ = this.user.asObservable();\n  public isLoggedIn$: Observable<boolean> = this.user$.pipe(map(user => !!user));\n\n  constructor(private http: HttpClient, private router: Router) {}\n\n  private getHttpHeaders() {\n    return new HttpHeaders().set('Content-Type', 'application/json');\n  }\n\n  public isLoggedIn(): boolean {\n    const token = localStorage.getItem('token');\n    return token ? !this.jwtHelper.isTokenExpired(token) : false;\n  }\n\n  public isAuthenticated(allowRoles: string[]): boolean {\n    const token = localStorage.getItem('token');\n    if (!token) return false;\n\n    try {\n      const decodedToken = this.jwtHelper.decodeToken(token);\n      if (allowRoles.includes(decodedToken['role'])) {\n        this.user.next({ ...decodedToken, token });\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Error decoding token:', error);\n      this.logout();\n      return false;\n    }\n  }\n\n  login(credentials: LoginCredentials): Observable<any> {\n    return this.http.post(this.url + 'login', credentials, { headers: this.getHttpHeaders() })\n      .pipe(map((response: any) => {\n        const token = response.token;\n        localStorage.setItem('token', token);\n        const userInfo = this.jwtHelper.decodeToken(token);\n        this.user.next({ ...userInfo, token });\n        return response;\n      }));\n  }\n\n  logout(): void {\n    localStorage.removeItem('token');\n    this.user.next(null);\n    this.router.navigate(['/login']);\n  }\n\n  check_admin_exists(): Observable<any> {\n    return this.http.get<any>(this.url + 'check_admin_exists', { headers: this.getHttpHeaders() });\n  }\n\n  createAdmin(data: any): Observable<any> {\n    return this.http.post(this.url + 'create_admin', data, { headers: this.getHttpHeaders() });\n  }\n\n  get_admin(token: string): Observable<any> {\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json', 'Authorization': token });\n    return this.http.get(this.url + 'get_admin', { headers });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}