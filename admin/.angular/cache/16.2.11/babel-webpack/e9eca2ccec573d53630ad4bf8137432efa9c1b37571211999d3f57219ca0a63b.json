{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../auth.service\";\nimport * as i2 from \"@angular/router\";\nclass IsLoggedInGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    const isLoggedIn = this.authService.isLoggedIn$(); // authService.isLoggedIn() debe verificar el estado de la sesión del usuario\n    if (!isLoggedIn) {\n      // Si el usuario no está autenticado, redirige a la página de login u otra página\n      this.router.navigate(['auth/login']); // Ajusta la ruta según tu configuración\n      return false;\n    }\n    return true; // Si el usuario está autenticado, permite la activación de la ruta\n  }\n  static #_ = this.ɵfac = function IsLoggedInGuard_Factory(t) {\n    return new (t || IsLoggedInGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: IsLoggedInGuard,\n    factory: IsLoggedInGuard.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { IsLoggedInGuard };","map":{"version":3,"names":["IsLoggedInGuard","constructor","authService","router","canActivate","route","state","isLoggedIn","isLoggedIn$","navigate","_","i0","ɵɵinject","i1","AuthService","i2","Router","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\core\\auth\\guards\\is-logged-in.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../auth.service'; // Asume que tienes un servicio de autenticación\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IsLoggedInGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n\n    const isLoggedIn = this.authService.isLoggedIn$(); // authService.isLoggedIn() debe verificar el estado de la sesión del usuario\n\n    if (!isLoggedIn) {\n      // Si el usuario no está autenticado, redirige a la página de login u otra página\n      this.router.navigate(['auth/login']); // Ajusta la ruta según tu configuración\n      return false;\n    }\n\n    return true; // Si el usuario está autenticado, permite la activación de la ruta\n  }\n}\n\n\n// import { Injectable } from '@angular/core';\n// import { CanMatch, Router, UrlTree, Route } from '@angular/router';\n// import { Observable } from 'rxjs';\n// import { map } from 'rxjs/operators';\n// import { AuthService } from '../auth.service';\n\n// @Injectable({\n//   providedIn: 'root',\n// })\n// export class IsLoggedInGuard implements CanMatch {\n//   constructor(\n//     private authService: AuthService, \n//     private router: Router\n//     ) {}\n\n//   canMatch(route: Route): Observable<boolean | UrlTree> {\n//     return this.authService.isLoggedIn$.pipe(\n//       map((isLoggedIn) => isLoggedIn || this.router.createUrlTree(['auth/login']))\n//     );\n//   }\n// }\n\n// import { CanActivateFn } from '@angular/router';\n\n// export const isLoggedInGuard: CanActivateFn = (route, state) => {\n//   return true;\n// };\n"],"mappings":";;;AAKA,MAGaA,eAAe;EAC1BC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,MAAM,GAANA,MAAM;EAAW;EAEvEC,WAAWA,CACTC,KAA6B,EAC7BC,KAA0B;IAE1B,MAAMC,UAAU,GAAG,IAAI,CAACL,WAAW,CAACM,WAAW,EAAE,CAAC,CAAC;IAEnD,IAAI,CAACD,UAAU,EAAE;MACf;MACA,IAAI,CAACJ,MAAM,CAACM,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;MACtC,OAAO,KAAK;;IAGd,OAAO,IAAI,CAAC,CAAC;EACf;EAAC,QAAAC,CAAA,G;qBAhBUV,eAAe,EAAAW,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAfjB,eAAe;IAAAkB,OAAA,EAAflB,eAAe,CAAAmB,IAAA;IAAAC,UAAA,EAFd;EAAM;;SAEPpB,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}