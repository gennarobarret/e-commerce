{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\modules\\account-settings\\profile\\profile.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport {\n  FormBuilder,\n  FormGroup,\n  Validators,\n  FormControl,\n} from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/core/auth/auth.service';\nimport { ToastService } from 'src/app/shared/services/toast.service';\nimport { ProfileData } from 'src/app/core/models/profile-data.interface';\nimport { GeoInfoService } from 'src/app/shared/services/geo-info.service';\nimport { Country } from 'src/app/core/models/country.model';\nimport { State } from 'src/app/core/models/state.model';\nimport {da}\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css'],\n})\nexport class ProfileComponent {\n  updateForm!: FormGroup;\n  submitted = false;\n  public user: ProfileData | null = null;\n  countries: Country[] = [];\n  states: State[] = [];\n  filteredStates: State[] = [];\n\n\n  constructor(\n    private _formBuilder: FormBuilder,\n    private _authService: AuthService,\n    private _router: Router,\n    private _toastService: ToastService,\n    private _geoInfoService: GeoInfoService\n  ) {\n    this.updateForm = this._formBuilder.group({\n      inputUserName: [\n        '',\n        [\n          Validators.required,\n          Validators.minLength(12),\n          Validators.maxLength(25),\n          Validators.pattern(/^\\S*$/),\n          Validators.pattern(/^[a-zA-Z0-9]*$/),\n        ],\n      ],\n      inputFirstName: [\n        '',\n        [\n          Validators.required,\n          Validators.minLength(3),\n          Validators.maxLength(25),\n          Validators.pattern('^[a-zA-Z0-9\\\\sñÑ]+$'),\n        ],\n      ],\n      inputLastName: [\n        '',\n        [\n          Validators.required,\n          Validators.minLength(3),\n          Validators.maxLength(25),\n          Validators.pattern('^[a-zA-Z0-9\\\\sñÑ]+$'),\n        ],\n      ],\n      inputOrganizationName: [\n        '',\n        [\n          Validators.required,\n          Validators.minLength(3),\n          Validators.maxLength(30),\n          Validators.pattern('^[a-zA-Z0-9\\\\sñÑ]+$'),\n        ],\n      ],\n      inputEmailAddress: ['', [Validators.required, Validators.email]],\n      inputAddress: this._formBuilder.group({\n        street1: ['', [Validators.required]],\n        street2: [''],\n        city: [''],\n        state: ['', [Validators.required]],\n        zip: [''],\n        country: ['', [Validators.required]],\n      }),\n      inputPhoneNumber: [\n        '',\n        [Validators.required, Validators.pattern('[0-9]+')],\n      ],\n      inputBirthday: ['', [Validators.required, this.validateDate.bind(this)]],\n      inputRole: [{ value: '', disabled: true }, [Validators.required]],\n      inputIdentification: [\n        { value: '', disabled: true },\n        [Validators.required],\n      ],\n      inputAdditionalInfo: [\n        '',\n        [\n          Validators.required,\n          Validators.minLength(10),\n          Validators.maxLength(50),\n          Validators.pattern('^[a-zA-Z0-9\\\\sñÑ]+$'),\n        ],\n      ],\n      inputProfileImage: ['', [Validators.required]],\n    });\n  }\n\n  ngOnInit(): void {\n    this.fetchUserData();\n    this.loadCountries();\n  }\n\n  fetchUserData() {\n    this._authService.get_admin().subscribe(\n      (response) => {\n        if (response.data === undefined) {\n          this._router.navigate(['']);\n        } else {\n          this.user = response.data as ProfileData;\n          this.updateFormWithUserData(this.user);\n          this.filterStatesByCountry(this.user.address.country);\n        }\n      },\n      (error) => {\n        console.error(error);\n      }\n    );\n  }\n\n\n  private updateFormWithUserData(userData: ProfileData) {\n    const birthdayFormatted = this.convertDateFormat(userData.birthday);\n    this.updateForm.patchValue({\n      inputUserName: userData.userName,\n      inputFirstName: userData.firstName,\n      inputLastName: userData.lastName,\n      inputOrganizationName: userData.organizationName,\n      inputEmailAddress: userData.emailAddress,\n      inputPhoneNumber: userData.phoneNumber,\n      inputBirthday: birthdayFormatted,\n      inputRole: userData.role,\n      inputIdentification: userData.identification,\n      inputAdditionalInfo: userData.additionalInfo,\n      inputProfileImage: userData.profileImage,\n      inputCreatedAt: userData.createdAt,\n      inputUpdatedAt: userData.updatedAt,\n      inputAddress: {\n        street1: userData.address.street1,\n        street2: userData.address.street2,\n        city: userData.address.city,\n        state: userData.address.state,\n        zip: userData.address.zip,\n        country: userData.address.country,\n      },\n    });\n  }\n\n  private loadCountries() {\n    this._geoInfoService.get_Countries().subscribe(\n      data => {\n        this.countries = data.sort((a: Country, b: Country) => a.name.localeCompare(b.name)); this.loadStates();\n      },\n      error => {\n        console.error('Error loading countries', error);\n      }\n    );\n  }\n\n  private loadStates() {\n    this._geoInfoService.get_States().subscribe(\n      data => {\n        this.states = data.sort((a: State, b: State) => a.province_name.localeCompare(b.province_name));\n      },\n      error => {\n        console.error('Error loading states', error);\n      }\n    );\n  }\n\n  filterStatesByCountry(countryId: string | number) {\n    const numericCountryId = Number(countryId);\n    this.filteredStates = this.states.filter(state => state.country_id === numericCountryId);\n    const stateControl = this.updateForm.get('inputState');\n    if (stateControl) {\n      stateControl.setValue(null);\n    }\n  }\n\n  onCountryChange(event: Event) {\n    const selectElement = event.target as HTMLSelectElement;\n    const countryId = selectElement.value;\n    this.filterStatesByCountry(countryId);\n\n  }\n\n  private convertDateFormat(dateString: string): string {\n    const date = new Date(dateString);\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    return `${year}-${month}-${day}`;\n  }\n\n  private validateDate(control: FormControl): { [key: string]: any } | null {\n    const inputDateStr: string = control.value;\n    if (!/^\\d{4}-\\d{2}-\\d{2}$/.test(inputDateStr)) {\n      return { invalidDateFormat: true };\n    }\n    return null;\n  }\n\n  sortByProperty(arr: any[], property: string) {\n    return arr.sort((a, b) => a[property].localeCompare(b[property]));\n  }\n\n  update() {\n    this.submitted = true;\n  }\n\n}"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}