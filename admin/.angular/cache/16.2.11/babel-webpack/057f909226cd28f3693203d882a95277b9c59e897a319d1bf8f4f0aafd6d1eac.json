{"ast":null,"code":"\"use strict\";\n\n// import { Component } from '@angular/core';\n// @Component({\n//   selector: 'app-login',\n//   templateUrl: './login.component.html',\n//   styleUrls: ['./login.component.css']\n// })\n// export class LoginComponent {\n// }\n// import { Component, OnInit } from '@angular/core';\n// import { Router } from '@angular/router';\n// import { AdminService } from 'src/app/services/admin.service';\n// import { FormGroup, FormBuilder, Validators } from '@angular/forms';\n// declare var iziToast: any;\n// interface ApiResponse {\n//   data?: any;\n//   message?: string;\n//   token?: string;\n// }\n// @Component({\n//   selector: 'app-login',\n//   templateUrl: './login.component.html',\n//   styleUrls: ['./login.component.css'],\n// })\n// export class LoginComponent implements OnInit {\n//   public user: any = {};\n//   public token: any = '';\n//   public loginForm: FormGroup;\n//   constructor(\n//     private _adminService: AdminService,\n//     private _router: Router,\n//     private formBuilder: FormBuilder\n//   ) {\n//     this.token = this._adminService.getToken();\n//     this.loginForm = this.formBuilder.group({\n//       email: ['', [Validators.required, Validators.email]],\n//       password: ['', Validators.required],\n//       rememberMe: [false], // Remember me checkbox\n//     });\n//   }\n//   ngOnInit(): void {\n//     const rememberedEmail = localStorage.getItem('rememberedEmail');\n//     if (rememberedEmail) {\n//       this.loginForm.patchValue({\n//         email: rememberedEmail,\n//       });\n//     }\n//     if (this.token) {\n//       this._router.navigate(['']);\n//     }\n//   }\n//   login() {\n//     if (this.loginForm.valid) {\n//       const { email, password, rememberMe } = this.loginForm.value;\n//       const data = { email, password };\n//       this._adminService.login_admin(data).subscribe(\n//         (response: ApiResponse) => {\n//           if (!response.data) {\n//             this.showErrorToast(\n//               response.message || 'There was an error during login'\n//             );\n//           } else {\n//             this.handleSuccessfulLogin(response, rememberMe);\n//           }\n//         },\n//         (error) => {\n//           this.showErrorToast('There was an error during login');\n//           console.error(error);\n//         }\n//       );\n//     } else {\n//       this.showErrorToast('Invalid form data');\n//     }\n//   }\n//   private handleSuccessfulLogin(response: ApiResponse, remember: boolean) {\n//     this.user = response.data;\n//     localStorage.setItem('token', response.token || '');\n//     if (remember) {\n//       this.rememberUser(this.loginForm.value.email, true);\n//     } else {\n//       this.rememberUser('', false);\n//     }\n//     this._router.navigate(['/']);\n//   }\n//   private rememberUser(email: string, remember: boolean) {\n//     if (remember) {\n//       localStorage.setItem('rememberedEmail', email);\n//     } else {\n//       localStorage.removeItem('rememberedEmail');\n//     }\n//   }\n//   private showErrorToast(message: string) {\n//     iziToast.show({\n//       title: 'ERROR',\n//       titleColor: '#FF0000',\n//       color: '#FFF',\n//       class: 'text-Danger',\n//       position: 'topRight',\n//       message: message,\n//     });\n//   }\n//   hidePassword: boolean = true;\n//   togglePasswordVisibility() {\n//     this.hidePassword = !this.hidePassword;\n//   }\n//   get passwordFieldType() {\n//     return this.hidePassword ? 'password' : 'text';\n//   }\n// }","map":{"version":3,"names":[],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\modules\\auth\\login\\login.component.ts"],"sourcesContent":["// import { Component } from '@angular/core';\n\n// @Component({\n//   selector: 'app-login',\n//   templateUrl: './login.component.html',\n//   styleUrls: ['./login.component.css']\n// })\n// export class LoginComponent {\n\n// }\n\n// import { Component, OnInit } from '@angular/core';\n// import { Router } from '@angular/router';\n// import { AdminService } from 'src/app/services/admin.service';\n// import { FormGroup, FormBuilder, Validators } from '@angular/forms';\n\n// declare var iziToast: any;\n\n// interface ApiResponse {\n//   data?: any;\n//   message?: string;\n//   token?: string;\n// }\n\n// @Component({\n//   selector: 'app-login',\n//   templateUrl: './login.component.html',\n//   styleUrls: ['./login.component.css'],\n// })\n// export class LoginComponent implements OnInit {\n//   public user: any = {};\n//   public token: any = '';\n//   public loginForm: FormGroup;\n\n//   constructor(\n//     private _adminService: AdminService,\n//     private _router: Router,\n//     private formBuilder: FormBuilder\n//   ) {\n//     this.token = this._adminService.getToken();\n//     this.loginForm = this.formBuilder.group({\n//       email: ['', [Validators.required, Validators.email]],\n//       password: ['', Validators.required],\n//       rememberMe: [false], // Remember me checkbox\n//     });\n//   }\n\n//   ngOnInit(): void {\n//     const rememberedEmail = localStorage.getItem('rememberedEmail');\n//     if (rememberedEmail) {\n//       this.loginForm.patchValue({\n//         email: rememberedEmail,\n//       });\n//     }\n\n//     if (this.token) {\n//       this._router.navigate(['']);\n//     }\n//   }\n\n//   login() {\n//     if (this.loginForm.valid) {\n//       const { email, password, rememberMe } = this.loginForm.value;\n//       const data = { email, password };\n//       this._adminService.login_admin(data).subscribe(\n//         (response: ApiResponse) => {\n//           if (!response.data) {\n//             this.showErrorToast(\n//               response.message || 'There was an error during login'\n//             );\n//           } else {\n//             this.handleSuccessfulLogin(response, rememberMe);\n//           }\n//         },\n//         (error) => {\n//           this.showErrorToast('There was an error during login');\n//           console.error(error);\n//         }\n//       );\n//     } else {\n//       this.showErrorToast('Invalid form data');\n//     }\n//   }\n\n//   private handleSuccessfulLogin(response: ApiResponse, remember: boolean) {\n//     this.user = response.data;\n//     localStorage.setItem('token', response.token || '');\n\n//     if (remember) {\n//       this.rememberUser(this.loginForm.value.email, true);\n//     } else {\n//       this.rememberUser('', false);\n//     }\n\n//     this._router.navigate(['/']);\n//   }\n\n//   private rememberUser(email: string, remember: boolean) {\n//     if (remember) {\n//       localStorage.setItem('rememberedEmail', email);\n//     } else {\n//       localStorage.removeItem('rememberedEmail');\n//     }\n//   }\n\n//   private showErrorToast(message: string) {\n//     iziToast.show({\n//       title: 'ERROR',\n//       titleColor: '#FF0000',\n//       color: '#FFF',\n//       class: 'text-Danger',\n//       position: 'topRight',\n//       message: message,\n//     });\n//   }\n\n//   hidePassword: boolean = true;\n//   togglePasswordVisibility() {\n//     this.hidePassword = !this.hidePassword;\n//   }\n\n//   get passwordFieldType() {\n//     return this.hidePassword ? 'password' : 'text';\n//   }\n// }\n"],"mappings},"metadata":{},"sourceType":"script","externalDependencies":[]}