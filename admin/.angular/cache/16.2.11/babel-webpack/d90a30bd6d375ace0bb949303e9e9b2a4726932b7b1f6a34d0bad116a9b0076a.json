{"ast":null,"code":"import { ignoreElements, tap } from 'rxjs';\nimport { GLOBAL } from '../config/GLOBAL';\nimport { HttpHeaders } from '@angular/common/http';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nconst USER_LOCAL_STORAGE_KEY = 'token';\nclass AuthService {\n  constructor(_http, _router) {\n    this._http = _http;\n    this._router = _router;\n    this.url = GLOBAL.url;\n  }\n  isAuthenticated(allowRoles) {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      return false;\n    }\n    try {\n      const helper = new JwtHelperService();\n      const decodedToken = helper.decodeToken(token);\n      if (!decodedToken || !decodedToken['role']) {\n        localStorage.removeItem('token');\n        return false;\n      }\n      return allowRoles.includes(decodedToken['role']);\n    } catch (error) {\n      console.error('Error decoding token:', error);\n      localStorage.removeItem('token');\n      return false;\n    }\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  storeToken(token) {\n    localStorage.setItem('token', token);\n  }\n  check_admin_exists() {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.get(this.url + 'check_admin_exists', {\n      headers: headers\n    });\n  }\n  createAdmin(data) {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.post(this.url + 'create_admin', data, {\n      headers: headers\n    });\n  }\n  login_admin(credentials) {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.post(this.url + 'login_admin', credentials, {\n      headers: headers\n    }).pipe(tap(response => {\n      if (response && response.token) {\n        this.storeToken(response.token);\n      }\n    }),\n    // tap((userToken) => this.saveTokenToLocalStore(userToken)),\n    // tap(() => this.redirectToDashboard()),\n    ignoreElements());\n  }\n  get_admin(token) {\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': token\n    });\n    return this._http.get(this.url + 'get_admin', {\n      headers: headers\n    });\n  }\n  logout() {\n    this.removeUserFromLocalStorage();\n    this._router.navigateByUrl('/login');\n  }\n  redirectToDashboard() {\n    this._router.navigateByUrl('/dashboard');\n  }\n  // private pushNewUser(token: string) {\n  //   this.user.next(this.decodeToken(token));\n  // }\n  // private decodeToken(userToken: string): UserWithToken {\n  //   const userInfo = JSON.parse(window.atob(userToken)) as User;\n  //   return { ...userInfo, token: userToken };\n  // }\n  // private loadUserFromLocalStorage(): void {\n  //   const userFromLocal = localStorage.getItem(USER_LOCAL_STORAGE_KEY);\n  //   userFromLocal && this.pushNewUser(userFromLocal);\n  // }\n  saveTokenToLocalStore(userToken) {\n    localStorage.setItem(USER_LOCAL_STORAGE_KEY, userToken);\n  }\n  removeUserFromLocalStorage() {\n    localStorage.removeItem(USER_LOCAL_STORAGE_KEY);\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { AuthService };","map":{"version":3,"names":["ignoreElements","tap","GLOBAL","HttpHeaders","JwtHelperService","USER_LOCAL_STORAGE_KEY","AuthService","constructor","_http","_router","url","isAuthenticated","allowRoles","token","localStorage","getItem","helper","decodedToken","decodeToken","removeItem","includes","error","console","getToken","storeToken","setItem","check_admin_exists","headers","set","get","createAdmin","data","post","login_admin","credentials","pipe","response","get_admin","logout","removeUserFromLocalStorage","navigateByUrl","redirectToDashboard","saveTokenToLocalStore","userToken","_","i0","ɵɵinject","i1","HttpClient","i2","Router","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\core\\auth\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, ignoreElements, map, Observable, tap } from 'rxjs';\nimport { GLOBAL } from '../config/GLOBAL';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { Router } from '@angular/router';\n\nimport { LoginCredentials } from '../model';\nimport { UserWithToken } from '../model/user.interface';\n\nconst USER_LOCAL_STORAGE_KEY = 'token';\n\n\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n\n  public url;\n\n  constructor(private _http: HttpClient, private _router: Router) {\n    this.url = GLOBAL.url;\n  }\n\n  \n  public isAuthenticated(allowRoles: string[]): boolean {\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const helper = new JwtHelperService();\n      const decodedToken = helper.decodeToken(token);\n\n      if (!decodedToken || !decodedToken['role']) {\n        localStorage.removeItem('token');\n        return false;\n      }\n      return allowRoles.includes(decodedToken['role']);\n    } catch (error) {\n      console.error('Error decoding token:', error);\n      localStorage.removeItem('token');\n      return false;\n    }\n  }\n\n\n  getToken() {\n    return localStorage.getItem('token');\n  }\n\n  storeToken(token: string) {\n    localStorage.setItem('token', token);\n  }\n\n  check_admin_exists(): Observable<any> {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.get<any>(this.url + 'check_admin_exists', { headers: headers });\n  }\n\n  createAdmin(data: any): Observable<any> {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.post(this.url + 'create_admin', data, { headers: headers });\n}\n\n  login_admin(credentials: LoginCredentials): Observable<any> {\n    let headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._http.post(this.url + 'login_admin', credentials, {\n      headers: headers,\n    }).pipe(\n      tap(response => {\n        if (response && response.token) {\n          this.storeToken(response.token);\n        }),\n      // tap((userToken) => this.saveTokenToLocalStore(userToken)),\n      // tap(() => this.redirectToDashboard()),\n      ignoreElements()\n    );\n  }\n\n  get_admin(token: any): Observable<any> {\n    let headers = new HttpHeaders({ 'Content-Type': 'application/json', 'Authorization': token });\n    return this._http.get(this.url + 'get_admin', { headers: headers });\n  }\n\n  logout(): void {\n    this.removeUserFromLocalStorage();\n    this._router.navigateByUrl('/login');\n  }\n\n  private redirectToDashboard(): void {\n    this._router.navigateByUrl('/dashboard');\n  }\n\n  // private pushNewUser(token: string) {\n  //   this.user.next(this.decodeToken(token));\n  // }\n\n  // private decodeToken(userToken: string): UserWithToken {\n  //   const userInfo = JSON.parse(window.atob(userToken)) as User;\n    \n  //   return { ...userInfo, token: userToken };\n  // }\n\n  // private loadUserFromLocalStorage(): void {\n  //   const userFromLocal = localStorage.getItem(USER_LOCAL_STORAGE_KEY);\n  //   userFromLocal && this.pushNewUser(userFromLocal);\n  // }\n  \n  private saveTokenToLocalStore(userToken: string): void {\n    localStorage.setItem(USER_LOCAL_STORAGE_KEY, userToken);\n  }\n\n  private removeUserFromLocalStorage(): void {\n    localStorage.removeItem(USER_LOCAL_STORAGE_KEY);\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}