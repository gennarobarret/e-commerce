{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet LoginComponent = class LoginComponent {\n  constructor(formBuilder, authService, router, toastService, _authGoogleService) {\n    this.formBuilder = formBuilder;\n    this.authService = authService;\n    this.router = router;\n    this.toastService = toastService;\n    this._authGoogleService = _authGoogleService;\n    this.submitted = false;\n    this.loginForm = this.formBuilder.group({\n      userName: ['', [Validators.required]],\n      password: ['', Validators.required]\n    });\n  }\n  get f() {\n    return this.loginForm.controls;\n  }\n  ngOnInit() {\n    this.renderButton();\n    if (this.authService.getToken()) {\n      this.router.navigate(['']);\n    }\n  }\n  renderButton() {\n    google.accounts.id.initialize({\n      client_id: \"142003720401-scrooc5tq3p8ht8m377p67kdrt3ablei.apps.googleusercontent.com\",\n      callback: this.onSignIn\n    });\n    google.accounts.id.renderButton(document.getElementById(\"g_id_onload\"),\n    // El elemento donde se renderizará el botón\n    {\n      theme: \"outline\",\n      size: \"large\"\n    } // Opciones de personalización\n    );\n\n    google.accounts.id.prompt(); // Mostrar el prompt de sesión si es necesario\n  }\n\n  onSignIn(response) {\n    // Lógica para manejar la respuesta de inicio de sesión\n    console.log('Usuario ha iniciado sesión:', response);\n  }\n  // initGoogleSignIn() {\n  //   this._authGoogleService.login();\n  // }\n  login() {\n    this.submitted = true;\n    if (this.loginForm.valid) {\n      this.authService.loginUser(this.loginForm.value).subscribe(response => {}, error => {\n        let errorMessage = 'Invalid credentials';\n        if (error.error && error.error.message) {\n          errorMessage = error.error.message;\n        }\n        this.toastService.showToast('error', errorMessage);\n      });\n      this.handleSuccessfulLogin();\n    } else {\n      this.toastService.showToast('error', 'Missing form data');\n    }\n  }\n  handleSuccessfulLogin() {\n    this.authService.loginSuccessObservable.subscribe(success => {\n      if (success) {\n        this.toastService.showToast('success', 'Welcome ' + this.loginForm.value.userName);\n      }\n    });\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"names":["Component","ChangeDetectionStrategy","Validators","LoginComponent","constructor","formBuilder","authService","router","toastService","_authGoogleService","submitted","loginForm","group","userName","required","password","f","controls","ngOnInit","renderButton","getToken","navigate","google","accounts","id","initialize","client_id","callback","onSignIn","document","getElementById","theme","size","prompt","response","console","log","login","valid","loginUser","value","subscribe","error","errorMessage","message","showToast","handleSuccessfulLogin","loginSuccessObservable","success","__decorate","selector","templateUrl","styleUrls","changeDetection","OnPush"],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\modules\\auth\\login\\login.component.ts"],"sourcesContent":["import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/core/services/auth.service';\nimport { ToastService } from 'src/app/shared/services/toast.service';\nimport { LoginCredentials } from 'src/app/core/models';\nimport { AuthGoogleService } from 'src/app/core/services/auth-google.service';\n\ndeclare var google: any;\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LoginComponent implements OnInit {\n  public loginForm: FormGroup;\n  submitted = false;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private authService: AuthService,\n    private router: Router,\n    private toastService: ToastService,\n    private _authGoogleService: AuthGoogleService,\n  ) {\n\n    this.loginForm = this.formBuilder.group({\n      userName: ['', [Validators.required]],\n      password: ['', Validators.required],\n    });\n\n  }\n\n  get f() {\n    return this.loginForm.controls;\n  }\n\n  ngOnInit(): void {\n    this.renderButton();\n    if (this.authService.getToken()) {\n      this.router.navigate(['']);\n\n    }\n  }\n\n  renderButton() {\n    google.accounts.id.initialize({\n      client_id: \"142003720401-scrooc5tq3p8ht8m377p67kdrt3ablei.apps.googleusercontent.com\",\n      callback: this.onSignIn,\n    });\n\n    google.accounts.id.renderButton(\n      document.getElementById(\"g_id_onload\"), // El elemento donde se renderizará el botón\n      { theme: \"outline\", size: \"large\" }  // Opciones de personalización\n    );\n\n    google.accounts.id.prompt(); // Mostrar el prompt de sesión si es necesario\n  }\n\n  onSignIn(response: any) {\n    // Lógica para manejar la respuesta de inicio de sesión\n    console.log('Usuario ha iniciado sesión:', response);\n  }\n\n\n\n\n\n\n  // initGoogleSignIn() {\n  //   this._authGoogleService.login();\n  // }\n\n  login() {\n    this.submitted = true;\n    if (this.loginForm.valid) {\n      this.authService\n        .loginUser(this.loginForm.value as LoginCredentials)\n        .subscribe(\n          (response) => {\n          },\n          (error: HttpErrorResponse) => {\n            let errorMessage = 'Invalid credentials';\n            if (error.error && error.error.message) {\n              errorMessage = error.error.message;\n            }\n            this.toastService.showToast('error', errorMessage);\n          }\n        );\n      this.handleSuccessfulLogin();\n\n    } else {\n      this.toastService.showToast('error', 'Missing form data');\n    }\n  }\n\n  private handleSuccessfulLogin() {\n    this.authService.loginSuccessObservable.subscribe((success: boolean) => {\n      if (success) {\n        this.toastService.showToast(\n          'success',\n          'Welcome ' + this.loginForm.value.userName\n        );\n      }\n    });\n  }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}