{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { ViewChild } from '@angular/core';\nimport { forkJoin } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nlet BusinessSetupComponent = class BusinessSetupComponent {\n  constructor(formBuilder, _renderer, _router, _toastService, _geoInfoService, _businessService, _sharedDataBetweenStepService, validationService) {\n    this.formBuilder = formBuilder;\n    this._renderer = _renderer;\n    this._router = _router;\n    this._toastService = _toastService;\n    this._geoInfoService = _geoInfoService;\n    this._businessService = _businessService;\n    this._sharedDataBetweenStepService = _sharedDataBetweenStepService;\n    this.validationService = validationService;\n    this.countries = [];\n    this.states = [];\n    this.filteredStates = [];\n    this.load_data = false;\n    this.load_btn = false;\n    this.loading = false;\n    this.imageUrl = 'assets/img/illustrations/your-logo-here.png';\n    this.selectedFile = null;\n  }\n  ngOnInit() {\n    this.load_data = true;\n    this.loadCountriesAndStates().subscribe(([countries, states]) => {\n      if (countries) {\n        this.countries = countries.sort((a, b) => a.name.localeCompare(b.name));\n      }\n      if (states) {\n        this.states = states.sort((a, b) => a.province_name.localeCompare(b.province_name));\n      }\n      this.restoreFormData();\n      this.load_data = false;\n    });\n    this.businessSetupForm = this.formBuilder.group({\n      inputBusinessName: ['', [Validators.required, Validators.maxLength(100)]],\n      inputCountryAddress: ['', [Validators.required]],\n      inputStateAddress: ['', [Validators.required]],\n      taxId: ['', [Validators.required, Validators.pattern('[A-Z0-9]+')]],\n      paymentGateway: ['', Validators.required],\n      physicalLocation: ['', Validators.required],\n      shippingService: ['', Validators.required],\n      companyEmail: ['', [Validators.required, Validators.email]],\n      customerServiceEmail: ['', [Validators.required, Validators.email]],\n      returnsEmail: ['', [Validators.required, Validators.email]],\n      currency: ['', Validators.required],\n      inputLogo: [null]\n    });\n  }\n  restoreFormData() {\n    const savedData = this._sharedDataBetweenStepService.getStepData('accountSetup');\n    if (!savedData) {\n      // this._router.navigate([\"\"]);\n    } else {\n      this.businessSetupForm.patchValue(savedData);\n      if (savedData.inputCountryAddress) {\n        this.filterStatesByCountry(savedData.inputCountryAddress);\n        this.businessSetupForm.get('inputStateAddress')?.setValue(savedData.inputStateAddress);\n      }\n    }\n  }\n  loadCountriesAndStates() {\n    return forkJoin([this.loadCountries(), this.loadStates()]).pipe(catchError(error => {\n      console.error(\"Error loading data\", error);\n      return [[], []];\n    }));\n  }\n  loadCountries() {\n    return this._geoInfoService.get_Countries().pipe(catchError(error => {\n      console.error(\"Error loading countries\", error);\n      return [];\n    }));\n  }\n  loadStates() {\n    return this._geoInfoService.get_States().pipe(catchError(error => {\n      console.error(\"Error loading states\", error);\n      return [];\n    }));\n  }\n  filterStatesByCountry(countryId) {\n    const numericCountryId = Number(countryId);\n    this.filteredStates = this.states.filter(state => state.country_id === numericCountryId);\n  }\n  onCountryChange(event) {\n    const selectElement = event.target;\n    const countryId = selectElement.value;\n    this.filterStatesByCountry(countryId);\n  }\n  // Modifica la función fileChangeEvent para utilizar la validación\n  fileChangeEvent(event) {\n    const inputElement = event.target;\n    if (inputElement.files && inputElement.files.length > 0) {\n      const file = inputElement.files[0];\n      const validationErrors = this.validationService.validateLogo(file);\n      if (validationErrors) {\n        // Procesa los errores de validación aquí. Por ejemplo, podrías mostrar un mensaje de error.\n        console.error('Validation errors:', validationErrors);\n        this._toastService.showToast('error', 'There is an error with the selected file.');\n        return;\n      }\n      // Si el archivo es válido, procede con tu lógica existente para actualizar la vista previa, etc.\n      this.selectedFile = file;\n      this.updatePreview(file);\n    }\n  }\n  // Función para actualizar la vista previa del logo\n  updatePreview(file) {\n    const reader = new FileReader();\n    reader.onload = () => {\n      this.imageUrl = reader.result;\n    };\n    reader.readAsDataURL(file);\n  }\n  // fileChangeEvent(event: Event): void {\n  //   const inputElement = event.target as HTMLInputElement;\n  //   if (inputElement.files && inputElement.files.length > 0) {\n  //     this.selectedFile = inputElement.files[0];\n  //     this.validateAndUpdateImg(this.selectedFile);\n  //   }\n  // }\n  validateAndUpdateImg(file) {\n    if (!this.imageUrl && !file) {\n      this.businessSetupForm.get('inputLogo').setErrors({\n        required: true\n      });\n      return;\n    }\n    if (file) {\n      const errors = this.validateFileUpdate(file);\n      if (errors) {\n        this.businessSetupForm.get('inputLogo').setErrors(errors);\n      }\n    }\n  }\n  validateFileUpdate(file) {\n    if (file) {\n      const validTypes = ['image/png', 'image/webp', 'image/jpg', 'image/gif', 'image/jpeg'];\n      if (validTypes.includes(file.type)) {\n        if (file.size <= 4000000) {\n          let reader = new FileReader();\n          reader.readAsDataURL(file);\n          reader.onload = () => {\n            if (reader.result !== null) {\n              this.imageUrl = reader.result;\n              this.businessSetupForm.patchValue({\n                file: reader.result\n              });\n            }\n          };\n          return null;\n        } else {\n          console.error('error', 'The image cannot exceed 4 mb');\n          this._toastService.showToast('error', 'The image cannot exceed 4 mb');\n          return {\n            invalidFileSize: true\n          };\n        }\n      } else {\n        console.error('The file must be a PNG, WEBP, JPG, GIF, or JPEG image.');\n        this._toastService.showToast('error', 'The file must be a PNG, WEBP, JPG, GIF, or JPEG image.');\n        return {\n          invalidFileType: true\n        };\n      }\n    }\n    return null;\n  }\n  triggerFileInput() {\n    this._renderer.selectRootElement(this.fileInput.nativeElement).click();\n  }\n  onFileChange(event) {\n    if (event.target.files.length > 0) {\n      const file = event.target.files[0];\n      this.businessSetupForm.patchValue({\n        logo: file\n      });\n    }\n  }\n  submitBusinessDetails() {\n    if (this.businessSetupForm.invalid) {\n      this._toastService.showToast('error', 'Please fill all required fields correctly.');\n      return;\n    }\n    this.loading = true;\n    // Aquí iría la lógica para enviar los datos al servidor, incluyendo la carga del archivo del logo\n    // Simulamos una llamada al servicio de negocio\n    this._businessService.saveBusinessConfig(this.businessSetupForm.value).subscribe({\n      next: response => {\n        this._toastService.showToast('success', 'Business details saved successfully.');\n        this._router.navigate(['/next-step-route']);\n      },\n      error: error => {\n        this._toastService.showToast('error', 'An error occurred while saving business details.');\n        console.error('Error saving business details:', error);\n      },\n      complete: () => this.loading = false\n    });\n  }\n  goToPreviousStep() {\n    // this._sharedDataBetweenStepService.setStepData('preferences', this.preferencesForm.value);\n    this._router.navigate(['/initial-config/step1']);\n  }\n  goToNextStep() {\n    if (this.businessSetupForm.valid) {\n      this._sharedDataBetweenStepService.setStepData('accountSetup', this.businessSetupForm.value);\n      this._router.navigate(['/initial-config/step3']);\n    } else {\n      Object.keys(this.businessSetupForm.controls).forEach(field => {\n        const control = this.businessSetupForm.get(field);\n        control?.markAsTouched({\n          onlySelf: true\n        });\n      });\n      this._toastService.showToast('error', 'Please fill all required fields');\n    }\n  }\n};\n__decorate([ViewChild('fileInput')], BusinessSetupComponent.prototype, \"fileInput\", void 0);\nBusinessSetupComponent = __decorate([Component({\n  selector: 'app-business-setup',\n  templateUrl: './business-setup.component.html',\n  styleUrls: ['./business-setup.component.css']\n})], BusinessSetupComponent);\nexport { BusinessSetupComponent };","map":{"version":3,"names":["Component","Validators","ViewChild","forkJoin","catchError","BusinessSetupComponent","constructor","formBuilder","_renderer","_router","_toastService","_geoInfoService","_businessService","_sharedDataBetweenStepService","validationService","countries","states","filteredStates","load_data","load_btn","loading","imageUrl","selectedFile","ngOnInit","loadCountriesAndStates","subscribe","sort","a","b","name","localeCompare","province_name","restoreFormData","businessSetupForm","group","inputBusinessName","required","maxLength","inputCountryAddress","inputStateAddress","taxId","pattern","paymentGateway","physicalLocation","shippingService","companyEmail","email","customerServiceEmail","returnsEmail","currency","inputLogo","savedData","getStepData","patchValue","filterStatesByCountry","get","setValue","loadCountries","loadStates","pipe","error","console","get_Countries","get_States","countryId","numericCountryId","Number","filter","state","country_id","onCountryChange","event","selectElement","target","value","fileChangeEvent","inputElement","files","length","file","validationErrors","validateLogo","showToast","updatePreview","reader","FileReader","onload","result","readAsDataURL","validateAndUpdateImg","setErrors","errors","validateFileUpdate","validTypes","includes","type","size","invalidFileSize","invalidFileType","triggerFileInput","selectRootElement","fileInput","nativeElement","click","onFileChange","logo","submitBusinessDetails","invalid","saveBusinessConfig","next","response","navigate","complete","goToPreviousStep","goToNextStep","valid","setStepData","Object","keys","controls","forEach","field","control","markAsTouched","onlySelf","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\modules\\initial-config\\business-setup\\business-setup.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { GeoInfoService } from 'src/app/shared/services/geo-info.service';\nimport { ToastService } from 'src/app/shared/services/toast.service';\nimport { BusinessConfigService } from 'src/app/core/services/business-config.service';\nimport { SharedDataBetweenStepService } from 'src/app/core/services/shared-data-between-step.service';\nimport { Renderer2, ViewChild, ElementRef } from '@angular/core';\nimport { Country } from 'src/app/core/models/country.model';\nimport { State } from 'src/app/core/models/state.model';\nimport { forkJoin } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-business-setup',\n  templateUrl: './business-setup.component.html',\n  styleUrls: ['./business-setup.component.css']\n})\nexport class BusinessSetupComponent implements OnInit {\n  @ViewChild('fileInput') fileInput!: ElementRef;\n\n  businessSetupForm!: FormGroup;\n  countries: Country[] = [];\n  states: State[] = [];\n  filteredStates: State[] = [];\n  load_data: boolean = false;\n  load_btn: boolean = false;\n  loading: boolean = false;\n  imageUrl: any | ArrayBuffer = 'assets/img/illustrations/your-logo-here.png';\n  selectedFile: File | null = null;\n\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private _renderer: Renderer2,\n    private _router: Router,\n    private _toastService: ToastService,\n    private _geoInfoService: GeoInfoService,\n    private _businessService: BusinessConfigService,\n    private _sharedDataBetweenStepService: SharedDataBetweenStepService,\n    private validationService: ValidationService,\n  ) { }\n\n  ngOnInit(): void {\n    this.load_data = true;\n    this.loadCountriesAndStates().subscribe(([countries, states]) => {\n      if (countries) {\n        this.countries = countries.sort((a: Country, b: Country) =>\n          a.name.localeCompare(b.name)\n        );\n      }\n      if (states) {\n        this.states = states.sort((a: State, b: State) => a.province_name.localeCompare(b.province_name));\n      }\n      this.restoreFormData();\n      this.load_data = false;\n    });\n    this.businessSetupForm = this.formBuilder.group({\n      inputBusinessName: ['', [Validators.required, Validators.maxLength(100)]],\n      inputCountryAddress: ['', [Validators.required]],\n      inputStateAddress: ['', [Validators.required]],\n      taxId: ['', [Validators.required, Validators.pattern('[A-Z0-9]+')]],\n      paymentGateway: ['', Validators.required],\n      physicalLocation: ['', Validators.required],\n      shippingService: ['', Validators.required],\n      companyEmail: ['', [Validators.required, Validators.email]],\n      customerServiceEmail: ['', [Validators.required, Validators.email]],\n      returnsEmail: ['', [Validators.required, Validators.email]],\n      currency: ['', Validators.required],\n      inputLogo: [null]\n    });\n  }\n\n  restoreFormData() {\n    const savedData = this._sharedDataBetweenStepService.getStepData('accountSetup');\n    if (!savedData) {\n      // this._router.navigate([\"\"]);\n    } else {\n      this.businessSetupForm.patchValue(savedData);\n      if (savedData.inputCountryAddress) {\n        this.filterStatesByCountry(savedData.inputCountryAddress);\n        this.businessSetupForm.get('inputStateAddress')?.setValue(savedData.inputStateAddress);\n      }\n    }\n  }\n\n  private loadCountriesAndStates() {\n    return forkJoin([\n      this.loadCountries(),\n      this.loadStates()\n    ]).pipe(\n      catchError(error => {\n        console.error(\"Error loading data\", error);\n        return [[], []];\n      })\n    );\n  }\n\n  private loadCountries() {\n    return this._geoInfoService.get_Countries()\n      .pipe(\n        catchError(error => {\n          console.error(\"Error loading countries\", error);\n          return [];\n        })\n      );\n  }\n\n  private loadStates() {\n    return this._geoInfoService.get_States()\n      .pipe(\n        catchError(error => {\n          console.error(\"Error loading states\", error);\n          return [];\n        })\n      );\n  }\n\n  filterStatesByCountry(countryId: string | number) {\n    const numericCountryId = Number(countryId);\n    this.filteredStates = this.states.filter(\n      state => state.country_id === numericCountryId\n    );\n  }\n\n  onCountryChange(event: Event) {\n    const selectElement = event.target as HTMLSelectElement;\n    const countryId = selectElement.value;\n    this.filterStatesByCountry(countryId);\n  }\n\n\n\n\n\n  // Modifica la función fileChangeEvent para utilizar la validación\n  fileChangeEvent(event: Event): void {\n    const inputElement = event.target as HTMLInputElement;\n    if (inputElement.files && inputElement.files.length > 0) {\n      const file = inputElement.files[0];\n      const validationErrors = this.validationService.validateLogo(file);\n\n      if (validationErrors) {\n        // Procesa los errores de validación aquí. Por ejemplo, podrías mostrar un mensaje de error.\n        console.error('Validation errors:', validationErrors);\n        this._toastService.showToast('error', 'There is an error with the selected file.');\n        return;\n      }\n\n      // Si el archivo es válido, procede con tu lógica existente para actualizar la vista previa, etc.\n      this.selectedFile = file;\n      this.updatePreview(file);\n    }\n  }\n\n  // Función para actualizar la vista previa del logo\n  private updatePreview(file: File) {\n    const reader = new FileReader();\n    reader.onload = () => {\n      this.imageUrl = reader.result as string;\n    };\n    reader.readAsDataURL(file);\n  }\n\n\n  // fileChangeEvent(event: Event): void {\n  //   const inputElement = event.target as HTMLInputElement;\n  //   if (inputElement.files && inputElement.files.length > 0) {\n  //     this.selectedFile = inputElement.files[0];\n  //     this.validateAndUpdateImg(this.selectedFile);\n  //   }\n  // }\n\n  private validateAndUpdateImg(file: File) {\n    if (!this.imageUrl && !file) {\n      this.businessSetupForm.get('inputLogo')!.setErrors({ required: true });\n      return;\n    }\n    if (file) {\n      const errors = this.validateFileUpdate(file);\n      if (errors) {\n        this.businessSetupForm.get('inputLogo')!.setErrors(errors);\n      }\n    }\n  }\n\n  private validateFileUpdate(file: File): { [key: string]: any } | null {\n    if (file) {\n      const validTypes = ['image/png', 'image/webp', 'image/jpg', 'image/gif', 'image/jpeg'];\n      if (validTypes.includes(file.type)) {\n        if (file.size <= 4000000) {\n          let reader = new FileReader();\n          reader.readAsDataURL(file);\n          reader.onload = () => {\n            if (reader.result !== null) {\n              this.imageUrl = reader.result as string;\n              this.businessSetupForm.patchValue({\n                file: reader.result\n              });\n            }\n          }\n          return null;\n        } else {\n          console.error('error', 'The image cannot exceed 4 mb');\n          this._toastService.showToast('error', 'The image cannot exceed 4 mb');\n          return { invalidFileSize: true };\n        }\n      } else {\n        console.error('The file must be a PNG, WEBP, JPG, GIF, or JPEG image.');\n        this._toastService.showToast('error', 'The file must be a PNG, WEBP, JPG, GIF, or JPEG image.');\n        return { invalidFileType: true };\n      }\n    }\n\n    return null;\n  }\n\n  triggerFileInput(): void {\n    this._renderer.selectRootElement(this.fileInput.nativeElement).click();\n  }\n\n  onFileChange(event: any) {\n    if (event.target.files.length > 0) {\n      const file = event.target.files[0];\n      this.businessSetupForm.patchValue({\n        logo: file\n      });\n    }\n  }\n\n  submitBusinessDetails() {\n    if (this.businessSetupForm.invalid) {\n      this._toastService.showToast('error', 'Please fill all required fields correctly.');\n      return;\n    }\n\n    this.loading = true;\n    // Aquí iría la lógica para enviar los datos al servidor, incluyendo la carga del archivo del logo\n    // Simulamos una llamada al servicio de negocio\n    this._businessService.saveBusinessConfig(this.businessSetupForm.value).subscribe({\n      next: (response) => {\n        this._toastService.showToast('success', 'Business details saved successfully.');\n        this._router.navigate(['/next-step-route']);\n      },\n      error: (error) => {\n        this._toastService.showToast('error', 'An error occurred while saving business details.');\n        console.error('Error saving business details:', error);\n      },\n      complete: () => this.loading = false\n    });\n  }\n\n  goToPreviousStep() {\n    // this._sharedDataBetweenStepService.setStepData('preferences', this.preferencesForm.value);\n    this._router.navigate(['/initial-config/step1']);\n  }\n\n  goToNextStep() {\n    if (this.businessSetupForm.valid) {\n      this._sharedDataBetweenStepService.setStepData('accountSetup', this.businessSetupForm.value);\n      this._router.navigate(['/initial-config/step3']);\n    } else {\n      Object.keys(this.businessSetupForm.controls).forEach(field => {\n        const control = this.businessSetupForm.get(field);\n        control?.markAsTouched({ onlySelf: true });\n      });\n      this._toastService.showToast('error', 'Please fill all required fields');\n    }\n  }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}