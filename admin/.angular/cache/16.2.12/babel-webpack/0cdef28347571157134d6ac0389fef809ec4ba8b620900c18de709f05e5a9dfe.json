{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet CreateMasterAdminComponent = class CreateMasterAdminComponent {\n  constructor(_router, _formBuilder, _validationService, _renderer, _toastService, _initialConfigService) {\n    this._router = _router;\n    this._formBuilder = _formBuilder;\n    this._validationService = _validationService;\n    this._renderer = _renderer;\n    this._toastService = _toastService;\n    this._initialConfigService = _initialConfigService;\n    this.user = null;\n    this.load_data = false;\n    this.load_btn = false;\n    this.createMasterAdminForm = this._formBuilder.group({\n      inputUserName: [\"\", [Validators.required, Validators.minLength(5), Validators.maxLength(20), Validators.pattern(\"^[a-zA-Z0-9]+$\")]],\n      inputFirstName: [\"\", [Validators.required, Validators.minLength(3), Validators.maxLength(25), Validators.pattern(\"^[a-zA-Z0-9\\\\sñÑ]+$\")]],\n      inputLastName: [\"\", [Validators.required, Validators.minLength(3), Validators.maxLength(25), Validators.pattern(\"^[a-zA-Z0-9\\\\sñÑ]+$\")]],\n      inputEmailAddress: [\"\", [Validators.required, Validators.email]],\n      inputPassword: [\"\", [Validators.required, Validators.minLength(8)]],\n      inputConfirmPassword: [\"\", [Validators.required]],\n      inputRole: [{\n        value: 'MasterAdministrator',\n        disabled: true\n      }, [Validators.required]]\n    }, {\n      validator: this._validationService.mustMatch('inputPassword', 'inputConfirmPassword')\n    });\n  }\n  ngOnInit() {}\n  createUserFromForm(formData) {\n    return {\n      _id: '',\n      userName: formData.inputUserName,\n      firstName: formData.inputFirstName,\n      lastName: formData.inputLastName,\n      emailAddress: formData.inputEmailAddress,\n      role: 'MasterAdministrator',\n      countryAddress: '',\n      stateAddress: ''\n    };\n  }\n  onSubmit() {\n    this.load_btn = true;\n    if (this.createMasterAdminForm.valid) {\n      const formData = this.createMasterAdminForm.getRawValue();\n      const user = this.createUserFromForm(formData);\n      this._initialConfigService.createMasterAdmin(user).subscribe(response => {\n        this._toastService.showToast('success', 'An email has been sent to ' + user.emailAddress);\n        this._router.navigate(['/initial-config/verification-pending']);\n        this.load_btn = false;\n      }, error => {\n        this.handleError(error);\n      });\n    } else {\n      this.markFormAsTouched();\n      this.load_btn = false;\n    }\n  }\n  markFormAsTouched() {\n    Object.keys(this.createMasterAdminForm.controls).forEach(field => {\n      const control = this.createMasterAdminForm.get(field);\n      control?.markAsTouched({\n        onlySelf: true\n      });\n    });\n    this._toastService.showToast('error', 'Please fill all required fields');\n  }\n  handleError(error) {\n    this._router.navigate(['/initial-config/step1']);\n    if (error.status === 400 && error.error.message === 'A Master Administrator is already registered.') {\n      this._toastService.showToast('error', 'A Master Administrator is already registered.');\n    } else {\n      this._toastService.showToast('error', `Error: ${error.message}`);\n    }\n    this.load_btn = false;\n  }\n};\nCreateMasterAdminComponent = __decorate([Component({\n  selector: 'app-create-master-admin',\n  templateUrl: './create-master-admin.component.html',\n  styleUrls: ['./create-master-admin.component.css']\n})], CreateMasterAdminComponent);\nexport { CreateMasterAdminComponent };","map":{"version":3,"names":["Component","Validators","CreateMasterAdminComponent","constructor","_router","_formBuilder","_validationService","_renderer","_toastService","_initialConfigService","user","load_data","load_btn","createMasterAdminForm","group","inputUserName","required","minLength","maxLength","pattern","inputFirstName","inputLastName","inputEmailAddress","email","inputPassword","inputConfirmPassword","inputRole","value","disabled","validator","mustMatch","ngOnInit","createUserFromForm","formData","_id","userName","firstName","lastName","emailAddress","role","countryAddress","stateAddress","onSubmit","valid","getRawValue","createMasterAdmin","subscribe","response","showToast","navigate","error","handleError","markFormAsTouched","Object","keys","controls","forEach","field","control","get","markAsTouched","onlySelf","status","message","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\modules\\initial-config\\create-master-admin\\create-master-admin.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ValidationService } from 'src/app/core/services/validation.service';\nimport { InitialConfigService } from 'src/app/core/services/initial-config.service';\nimport { ToastService } from 'src/app/shared/services/toast.service';\nimport { User } from 'src/app/core/models/user.interface';\n\ninterface MasterAdminForm {\n  inputUserName: string;\n  inputFirstName: string;\n  inputLastName: string;\n  inputEmailAddress: string;\n  inputPassword: string;\n  inputConfirmPassword: string;\n}\n\n\n@Component({\n  selector: 'app-create-master-admin',\n  templateUrl: './create-master-admin.component.html',\n  styleUrls: ['./create-master-admin.component.css']\n})\nexport class CreateMasterAdminComponent {\n  createMasterAdminForm!: FormGroup;\n  user: User | null = null;\n  load_data: boolean = false;\n  load_btn: boolean = false;\n  formData: any;\n\n\n  constructor(\n    private _router: Router,\n    private _formBuilder: FormBuilder,\n    private _validationService: ValidationService,\n    private _renderer: Renderer2,\n    private _toastService: ToastService,\n    private _initialConfigService: InitialConfigService,\n  ) {\n    this.createMasterAdminForm = this._formBuilder.group({\n      inputUserName: [\n        \"\",\n        [\n          Validators.required,\n          Validators.minLength(5),\n          Validators.maxLength(20),\n          Validators.pattern(\"^[a-zA-Z0-9]+$\")\n        ]\n      ],\n      inputFirstName: [\n        \"\",\n        [\n          Validators.required,\n          Validators.minLength(3),\n          Validators.maxLength(25),\n          Validators.pattern(\"^[a-zA-Z0-9\\\\sñÑ]+$\")\n        ]\n      ],\n      inputLastName: [\n        \"\",\n        [\n          Validators.required,\n          Validators.minLength(3),\n          Validators.maxLength(25),\n          Validators.pattern(\"^[a-zA-Z0-9\\\\sñÑ]+$\")\n        ]\n      ],\n      inputEmailAddress: [\"\", [Validators.required, Validators.email]],\n      inputPassword: [\"\", [Validators.required, Validators.minLength(8)]],\n      inputConfirmPassword: [\"\", [Validators.required]],\n      inputRole: [{ value: 'MasterAdministrator', disabled: true }, [Validators.required]],\n\n    }, { validator: this._validationService.mustMatch('inputPassword', 'inputConfirmPassword') }) as FormGroupTyped<MasterAdminForm>;\n  }\n\n  ngOnInit(): void {\n  }\n\n\n  createUserFromForm(formData: any): User {\n    return {\n      _id: '',\n      userName: formData.inputUserName,\n      firstName: formData.inputFirstName,\n      lastName: formData.inputLastName,\n      emailAddress: formData.inputEmailAddress,\n      role: 'MasterAdministrator',\n      countryAddress: '',\n      stateAddress: '',\n    };\n  }\n\n  onSubmit() {\n    this.load_btn = true;\n    if (this.createMasterAdminForm.valid) {\n      const formData = this.createMasterAdminForm.getRawValue();\n      const user: User = this.createUserFromForm(formData);\n      this._initialConfigService.createMasterAdmin(user).subscribe(\n        response => {\n          this._toastService.showToast('success', 'An email has been sent to ' + user.emailAddress);\n          this._router.navigate(['/initial-config/verification-pending']);\n          this.load_btn = false;\n        },\n        error => {\n          this.handleError(error);\n        }\n      );\n    } else {\n      this.markFormAsTouched();\n      this.load_btn = false;\n    }\n  }\n\n  markFormAsTouched() {\n    Object.keys(this.createMasterAdminForm.controls).forEach(field => {\n      const control = this.createMasterAdminForm.get(field);\n      control?.markAsTouched({ onlySelf: true });\n    });\n    this._toastService.showToast('error', 'Please fill all required fields');\n  }\n\n  handleError(error: any) {\n    this._router.navigate(['/initial-config/step1']);\n    if (error.status === 400 && error.error.message === 'A Master Administrator is already registered.') {\n      this._toastService.showToast('error', 'A Master Administrator is already registered.');\n    } else {\n      this._toastService.showToast('error', `Error: ${error.message}`);\n    }\n    this.load_btn = false;\n  }\n\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}