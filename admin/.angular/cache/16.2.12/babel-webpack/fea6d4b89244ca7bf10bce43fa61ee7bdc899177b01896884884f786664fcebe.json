{"ast":null,"code":"\"use strict\";\n\n// // create-master-admin.component.ts\n// import { Component } from '@angular/core';\n// import { Router } from '@angular/router';\n// import { FormBuilder, FormGroup, Validators } from '@angular/forms';\n// import { ValidationService } from 'src/app/core/services/validation.service';\n// import { AuthService } from 'src/app/core/services/auth.service';\n// import { ToastService } from 'src/app/shared/services/toast.service';\n// import { User } from 'src/app/core/models/user.interface';\n// declare const gapi: any; // Para acceder al objeto gapi de Google\n// @Component({\n//   selector: 'app-create-master-admin',\n//   templateUrl: './create-master-admin.component.html',\n//   styleUrls: ['./create-master-admin.component.css']\n// })\n// export class CreateMasterAdminComponent {\n//   createMasterAdminForm!: FormGroup;\n//   user: User | null = null;\n//   load_data: boolean = false;\n//   load_btn: boolean = false;\n//   formData: any;\n//   constructor(\n//     private _router: Router,\n//     private _formBuilder: FormBuilder,\n//     private _validationService: ValidationService,\n//     private _toastService: ToastService,\n//     private _authService: AuthService,\n//   ) {\n//     this.createMasterAdminForm = this._formBuilder.group({\n//       inputUserName: [\n//         \"\",\n//         [\n//           Validators.required,\n//           Validators.minLength(5),\n//           Validators.maxLength(20),\n//           Validators.pattern(\"^[a-zA-Z0-9]+$\")\n//         ]\n//       ],\n//       inputFirstName: [\n//         \"\",\n//         [\n//           Validators.required,\n//           Validators.minLength(3),\n//           Validators.maxLength(25),\n//           Validators.pattern(\"^[a-zA-Z0-9\\\\sÃ±Ã‘]+$\")\n//         ]\n//       ],\n//       inputLastName: [\n//         \"\",\n//         [\n//           Validators.required,\n//           Validators.minLength(3),\n//           Validators.maxLength(25),\n//           Validators.pattern(\"^[a-zA-Z0-9\\\\sÃ±Ã‘]+$\")\n//         ]\n//       ],\n//       inputEmailAddress: [\"\", [Validators.required, Validators.email]],\n//       inputPassword: [\"\", [Validators.required, Validators.minLength(8)]],\n//       inputConfirmPassword: [\"\", [Validators.required]],\n//       inputRole: [{ value: 'MasterAdministrator', disabled: true }, [Validators.required]],\n//     }, { validator: this._validationService.mustMatch('inputPassword', 'inputConfirmPassword') });\n//   }\n//   ngOnInit() {\n//     this.loadGoogleAPI();\n//   }\n//   loadGoogleAPI() {\n//     const scriptElement = document.createElement('script');\n//     scriptElement.src = 'https://apis.google.com/js/platform.js';\n//     scriptElement.onload = () => {\n//       gapi.load('auth2', () => {\n//         gapi.auth2.init({\n//           client_id: '386095253324-84qs8hfs2j1lccd29hlfr9393s27h5fc.apps.googleusercontent.com', // AsegÃºrate de reemplazar 'TU_CLIENT_ID' con tu Client ID real\n//         });\n//       });\n//     };\n//     document.body.appendChild(scriptElement);\n//   }\n//   createUserFromForm(formData: any): User {\n//     return {\n//       userName: formData.inputUserName,\n//       firstName: formData.inputFirstName,\n//       lastName: formData.inputLastName,\n//       emailAddress: formData.inputEmailAddress,\n//       role: 'MasterAdministrator',\n//       countryAddress: 'DefaultValue',\n//       stateAddress: 'DefaultValue'\n//     };\n//   }\n//   onGoogleSignIn() {\n//     // Este mÃ©todo se deberÃ­a llamar cuando el usuario haga click en el botÃ³n de Google\n//     gapi.auth2.getAuthInstance().signIn().then((googleUser: any) => {\n//       const token = googleUser.getAuthResponse().id_token;\n//       this._authService.authenticateWithGoogle(token).subscribe(\n//         response => {\n//           // Manejar la respuesta exitosa\n//         },\n//         error => {\n//           // Manejar errores\n//         }\n//       );\n//     });\n//   }\n//   onSubmit() {\n//     this.load_btn = true;\n//     if (this.createMasterAdminForm.valid) {\n//       const formData = this.createMasterAdminForm.getRawValue();\n//       const user: User = this.createUserFromForm(formData);\n//       const userWithPassword = {\n//         ...user,\n//         password: formData.inputPassword,\n//       };\n//       console.log(\"ğŸš€ ~ CreateMasterAdminComponent ~ onSubmit ~ userWithPassword:\", userWithPassword);\n//       this._authService.createMasterAdmin(userWithPassword).subscribe(\n//         response => {\n//           this._toastService.showToast('success', 'An email has been sent to ' + user.emailAddress);\n//           this._router.navigate(['/auth/verification-pending']);\n//           this.load_btn = false;\n//         },\n//         error => {\n//           this.handleError(error);\n//         }\n//       );\n//     } else {\n//       this.markFormAsTouched();\n//       this.load_btn = false;\n//     }\n//   }\n//   markFormAsTouched() {\n//     Object.keys(this.createMasterAdminForm.controls).forEach(field => {\n//       const control = this.createMasterAdminForm.get(field);\n//       control?.markAsTouched({ onlySelf: true });\n//     });\n//     this._toastService.showToast('error', 'Please fill all required fields');\n//   }\n//   handleError(error: any) {\n//     this._router.navigate(['/auth/create-Master-Admin']);\n//     if (error.status === 400 && error.error.message === 'A Master Administrator is already registered.') {\n//       this._toastService.showToast('error', 'A Master Administrator is already registered.');\n//     } else {\n//       this._toastService.showToast('error', `Error: ${error.message}`);\n//     }\n//     this.load_btn = false;\n//   }\n// }","map":{"version":3,"names":[],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\modules\\auth\\create-master-admin\\create-master-admin.component.ts"],"sourcesContent":["// // create-master-admin.component.ts\n// import { Component } from '@angular/core';\n// import { Router } from '@angular/router';\n// import { FormBuilder, FormGroup, Validators } from '@angular/forms';\n// import { ValidationService } from 'src/app/core/services/validation.service';\n// import { AuthService } from 'src/app/core/services/auth.service';\n// import { ToastService } from 'src/app/shared/services/toast.service';\n// import { User } from 'src/app/core/models/user.interface';\n\n// declare const gapi: any; // Para acceder al objeto gapi de Google\n\n// @Component({\n//   selector: 'app-create-master-admin',\n//   templateUrl: './create-master-admin.component.html',\n//   styleUrls: ['./create-master-admin.component.css']\n// })\n// export class CreateMasterAdminComponent {\n//   createMasterAdminForm!: FormGroup;\n//   user: User | null = null;\n//   load_data: boolean = false;\n//   load_btn: boolean = false;\n//   formData: any;\n\n\n//   constructor(\n//     private _router: Router,\n//     private _formBuilder: FormBuilder,\n//     private _validationService: ValidationService,\n//     private _toastService: ToastService,\n//     private _authService: AuthService,\n//   ) {\n//     this.createMasterAdminForm = this._formBuilder.group({\n//       inputUserName: [\n//         \"\",\n//         [\n//           Validators.required,\n//           Validators.minLength(5),\n//           Validators.maxLength(20),\n//           Validators.pattern(\"^[a-zA-Z0-9]+$\")\n//         ]\n//       ],\n//       inputFirstName: [\n//         \"\",\n//         [\n//           Validators.required,\n//           Validators.minLength(3),\n//           Validators.maxLength(25),\n//           Validators.pattern(\"^[a-zA-Z0-9\\\\sÃ±Ã‘]+$\")\n//         ]\n//       ],\n//       inputLastName: [\n//         \"\",\n//         [\n//           Validators.required,\n//           Validators.minLength(3),\n//           Validators.maxLength(25),\n//           Validators.pattern(\"^[a-zA-Z0-9\\\\sÃ±Ã‘]+$\")\n//         ]\n//       ],\n//       inputEmailAddress: [\"\", [Validators.required, Validators.email]],\n//       inputPassword: [\"\", [Validators.required, Validators.minLength(8)]],\n//       inputConfirmPassword: [\"\", [Validators.required]],\n//       inputRole: [{ value: 'MasterAdministrator', disabled: true }, [Validators.required]],\n\n//     }, { validator: this._validationService.mustMatch('inputPassword', 'inputConfirmPassword') });\n//   }\n\n//   ngOnInit() {\n//     this.loadGoogleAPI();\n//   }\n\n//   loadGoogleAPI() {\n//     const scriptElement = document.createElement('script');\n//     scriptElement.src = 'https://apis.google.com/js/platform.js';\n//     scriptElement.onload = () => {\n//       gapi.load('auth2', () => {\n//         gapi.auth2.init({\n//           client_id: '386095253324-84qs8hfs2j1lccd29hlfr9393s27h5fc.apps.googleusercontent.com', // AsegÃºrate de reemplazar 'TU_CLIENT_ID' con tu Client ID real\n//         });\n//       });\n//     };\n//     document.body.appendChild(scriptElement);\n//   }\n\n\n\n//   createUserFromForm(formData: any): User {\n//     return {\n//       userName: formData.inputUserName,\n//       firstName: formData.inputFirstName,\n//       lastName: formData.inputLastName,\n//       emailAddress: formData.inputEmailAddress,\n//       role: 'MasterAdministrator',\n//       countryAddress: 'DefaultValue',\n//       stateAddress: 'DefaultValue'\n//     };\n//   }\n\n//   onGoogleSignIn() {\n//     // Este mÃ©todo se deberÃ­a llamar cuando el usuario haga click en el botÃ³n de Google\n//     gapi.auth2.getAuthInstance().signIn().then((googleUser: any) => {\n//       const token = googleUser.getAuthResponse().id_token;\n//       this._authService.authenticateWithGoogle(token).subscribe(\n//         response => {\n//           // Manejar la respuesta exitosa\n//         },\n//         error => {\n//           // Manejar errores\n//         }\n//       );\n//     });\n//   }\n\n//   onSubmit() {\n//     this.load_btn = true;\n//     if (this.createMasterAdminForm.valid) {\n//       const formData = this.createMasterAdminForm.getRawValue();\n//       const user: User = this.createUserFromForm(formData);\n//       const userWithPassword = {\n//         ...user,\n//         password: formData.inputPassword,\n//       };\n//       console.log(\"ğŸš€ ~ CreateMasterAdminComponent ~ onSubmit ~ userWithPassword:\", userWithPassword);\n//       this._authService.createMasterAdmin(userWithPassword).subscribe(\n//         response => {\n//           this._toastService.showToast('success', 'An email has been sent to ' + user.emailAddress);\n//           this._router.navigate(['/auth/verification-pending']);\n//           this.load_btn = false;\n//         },\n//         error => {\n//           this.handleError(error);\n//         }\n//       );\n//     } else {\n//       this.markFormAsTouched();\n//       this.load_btn = false;\n//     }\n//   }\n\n\n//   markFormAsTouched() {\n//     Object.keys(this.createMasterAdminForm.controls).forEach(field => {\n//       const control = this.createMasterAdminForm.get(field);\n//       control?.markAsTouched({ onlySelf: true });\n//     });\n//     this._toastService.showToast('error', 'Please fill all required fields');\n//   }\n\n//   handleError(error: any) {\n//     this._router.navigate(['/auth/create-Master-Admin']);\n//     if (error.status === 400 && error.error.message === 'A Master Administrator is already registered.') {\n//       this._toastService.showToast('error', 'A Master Administrator is already registered.');\n//     } else {\n//       this._toastService.showToast('error', `Error: ${error.message}`);\n//     }\n//     this.load_btn = false;\n//   }\n\n// }\n\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA"},"metadata":{},"sourceType":"script","externalDependencies":[]}