{"ast":null,"code":"import * as i0 from \"@angular/core\";\nclass AuthService {\n  constructor() {}\n  authenticateUser() {\n    const googleAuth = JSON.parse(localStorage.getItem('googleAuth'));\n    if (googleAuth) {\n      const payload = this.decodeJWTToken(googleAuth.credential);\n      // Aquí puedes usar la información de payload, como el email del usuario, para autenticar en tu backend\n    }\n  }\n\n  decodeJWTToken(token) {\n    const base64Url = token.split('.')[1];\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    const jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {\n      return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n    }).join(''));\n    return JSON.parse(jsonPayload);\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { AuthService };","map":{"version":3,"names":["AuthService","constructor","authenticateUser","googleAuth","JSON","parse","localStorage","getItem","payload","decodeJWTToken","credential","token","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\core\\services\\auth-google.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n\n  constructor() { }\n\n\n  public authenticateUser() {\n    const googleAuth = JSON.parse(localStorage.getItem('googleAuth'));\n    if (googleAuth) {\n      const payload = this.decodeJWTToken(googleAuth.credential);\n      // Aquí puedes usar la información de payload, como el email del usuario, para autenticar en tu backend\n    }\n  }\n\n  private decodeJWTToken(token: string): any {\n    const base64Url = token.split('.')[1];\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    const jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {\n      return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n    }).join(''));\n\n    return JSON.parse(jsonPayload);\n  }\n\n}\n"],"mappings":";AAEA,MAGaA,WAAW;EAEtBC,YAAA,GAAgB;EAGTC,gBAAgBA,CAAA;IACrB,MAAMC,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,CAAC;IACjE,IAAIJ,UAAU,EAAE;MACd,MAAMK,OAAO,GAAG,IAAI,CAACC,cAAc,CAACN,UAAU,CAACO,UAAU,CAAC;MAC1D;;EAEJ;;EAEQD,cAAcA,CAACE,KAAa;IAClC,MAAMC,SAAS,GAAGD,KAAK,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACrC,MAAMC,MAAM,GAAGF,SAAS,CAACG,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;IAC9D,MAAMC,WAAW,GAAGC,kBAAkB,CAACC,IAAI,CAACJ,MAAM,CAAC,CAACD,KAAK,CAAC,EAAE,CAAC,CAACM,GAAG,CAAC,UAAUC,CAAC;MAC3E,OAAO,GAAG,GAAG,CAAC,IAAI,GAAGA,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,EAAEC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC9D,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,CAAC;IAEZ,OAAOpB,IAAI,CAACC,KAAK,CAACW,WAAW,CAAC;EAChC;EAAC,QAAAS,CAAA,G;qBArBUzB,WAAW;EAAA;EAAA,QAAA0B,EAAA,G;WAAX1B,WAAW;IAAA2B,OAAA,EAAX3B,WAAW,CAAA4B,IAAA;IAAAC,UAAA,EAFV;EAAM;;SAEP7B,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}