{"ast":null,"code":"import * as i0 from \"@angular/core\";\nclass AuthService {\n  constructor() {}\n  initializeGoogleSignIn(clientId) {\n    google.accounts.id.initialize({\n      client_id: clientId,\n      callback: response => this.handleCredentialResponse(response)\n    });\n    google.accounts.id.prompt();\n  }\n  handleCredentialResponse(response) {\n    const token = response.credential;\n    const userPayload = this.decodeJWTToken(token);\n    sessionStorage.setItem('loggedInUser', JSON.stringify(userPayload));\n    window.location.href = '/dashboard';\n  }\n  decodeJWTToken(token) {\n    return JSON.parse(atob(token.split('.')[1]));\n  }\n  handleSignout() {\n    google.accounts.id.disableAutoSelect();\n    sessionStorage.removeItem('loggedInUser');\n    window.location.href = '/login';\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { AuthService };","map":{"version":3,"names":["AuthService","constructor","initializeGoogleSignIn","clientId","google","accounts","id","initialize","client_id","callback","response","handleCredentialResponse","prompt","token","credential","userPayload","decodeJWTToken","sessionStorage","setItem","JSON","stringify","window","location","href","parse","atob","split","handleSignout","disableAutoSelect","removeItem","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\core\\services\\auth-google.service.ts"],"sourcesContent":["// import { Injectable } from '@angular/core';\n// import { AuthConfig, OAuthService } from 'angular-oauth2-oidc'\n\n// @Injectable({\n//   providedIn: 'root'\n// })\n// export class AuthGoogleService {\n\n//   constructor(private oauthService: OAuthService) {\n//     this.initLogin();\n//   }\n\n//   initLogin() {\n//     const config: AuthConfig = {\n//       issuer: 'https://accounts.google.com',\n//       strictDiscoveryDocumentValidation: false,\n//       clientId: '432250515709-ld0vbouvoouvr4dacp9pokac31rnetbs.apps.googleusercontent.com',\n//       redirectUri: window.location.origin + '/dashboard',\n//       scope: 'openid profile email',\n//     }\n\n//     this.oauthService.configure(config);\n//     this.oauthService.setupAutomaticSilentRefresh();\n//     this.oauthService.loadDiscoveryDocumentAndTryLogin();\n//   }\n\n//   login() {\n//     this.oauthService.initLoginFlow();\n//   }\n\n//   logout() {\n//     this.oauthService.logOut();\n//   }\n\n//   getProfile() {\n//     return this.oauthService.getIdentityClaims();\n//   }\n\n// }\n\n// src/app/auth.service.ts\nimport { Injectable } from '@angular/core';\ndeclare const google: any; // Esto permite el uso de la biblioteca de Google en TypeScript\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n\n  constructor() { }\n\n  initializeGoogleSignIn(clientId: string) {\n    google.accounts.id.initialize({\n      client_id: clientId,\n      callback: (response: any) => this.handleCredentialResponse(response),\n    });\n    google.accounts.id.prompt();\n  }\n\n  handleCredentialResponse(response: any) {\n    const token = response.credential;\n    const userPayload = this.decodeJWTToken(token);\n    sessionStorage.setItem('loggedInUser', JSON.stringify(userPayload));\n    window.location.href = '/dashboard';\n  }\n\n  decodeJWTToken(token: string) {\n    return JSON.parse(atob(token.split('.')[1]));\n  }\n\n  handleSignout() {\n    google.accounts.id.disableAutoSelect();\n    sessionStorage.removeItem('loggedInUser');\n    window.location.href = '/login';\n  }\n}\n"],"mappings":";AA4CA,MAGaA,WAAW;EAEtBC,YAAA,GAAgB;EAEhBC,sBAAsBA,CAACC,QAAgB;IACrCC,MAAM,CAACC,QAAQ,CAACC,EAAE,CAACC,UAAU,CAAC;MAC5BC,SAAS,EAAEL,QAAQ;MACnBM,QAAQ,EAAGC,QAAa,IAAK,IAAI,CAACC,wBAAwB,CAACD,QAAQ;KACpE,CAAC;IACFN,MAAM,CAACC,QAAQ,CAACC,EAAE,CAACM,MAAM,EAAE;EAC7B;EAEAD,wBAAwBA,CAACD,QAAa;IACpC,MAAMG,KAAK,GAAGH,QAAQ,CAACI,UAAU;IACjC,MAAMC,WAAW,GAAG,IAAI,CAACC,cAAc,CAACH,KAAK,CAAC;IAC9CI,cAAc,CAACC,OAAO,CAAC,cAAc,EAAEC,IAAI,CAACC,SAAS,CAACL,WAAW,CAAC,CAAC;IACnEM,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,YAAY;EACrC;EAEAP,cAAcA,CAACH,KAAa;IAC1B,OAAOM,IAAI,CAACK,KAAK,CAACC,IAAI,CAACZ,KAAK,CAACa,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC9C;EAEAC,aAAaA,CAAA;IACXvB,MAAM,CAACC,QAAQ,CAACC,EAAE,CAACsB,iBAAiB,EAAE;IACtCX,cAAc,CAACY,UAAU,CAAC,cAAc,CAAC;IACzCR,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EAAC,QAAAO,CAAA,G;qBA3BU9B,WAAW;EAAA;EAAA,QAAA+B,EAAA,G;WAAX/B,WAAW;IAAAgC,OAAA,EAAXhC,WAAW,CAAAiC,IAAA;IAAAC,UAAA,EAFV;EAAM;;SAEPlC,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}