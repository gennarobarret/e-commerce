{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nclass AuthGoogleService {\n  constructor() {\n    this.userProfileSubject = new BehaviorSubject(null);\n    this.userProfile$ = this.userProfileSubject.asObservable();\n  }\n  // Método llamado después de una autenticación exitosa\n  handleAuthSuccess(googleUser) {\n    const profile = googleUser.getBasicProfile();\n    const userProfile = {\n      name: profile.getName(),\n      given_name: profile.getGivenName(),\n      email: profile.getEmail(),\n      picture: profile.getImageUrl(),\n      sub: googleUser.getAuthResponse().id_token // o cualquier otro dato que necesites\n    };\n\n    this.userProfileSubject.next(userProfile);\n  }\n  authenticateUser() {\n    const item = localStorage.getItem('googleAuth');\n    const googleAuth = item ? JSON.parse(item) : null;\n    if (googleAuth) {\n      const payload = this.decodeJWTToken(googleAuth.credential);\n      // Aquí puedes usar la información de payload, como el email del usuario, para autenticar en tu backend\n    }\n  }\n\n  decodeJWTToken(token) {\n    const base64Url = token.split('.')[1];\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    const jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {\n      return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n    }).join(''));\n    return JSON.parse(jsonPayload);\n  }\n  static #_ = this.ɵfac = function AuthGoogleService_Factory(t) {\n    return new (t || AuthGoogleService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGoogleService,\n    factory: AuthGoogleService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { AuthGoogleService };\nclass AuthService {\n  constructor() {\n    this.userProfileSubject = new BehaviorSubject(null);\n    this.userProfile$ = this.userProfileSubject.asObservable();\n  }\n  // Método llamado después de una autenticación exitosa\n  handleAuthSuccess(googleUser) {\n    const profile = googleUser.getBasicProfile();\n    const userProfile = {\n      name: profile.getName(),\n      given_name: profile.getGivenName(),\n      email: profile.getEmail(),\n      picture: profile.getImageUrl(),\n      sub: googleUser.getAuthResponse().id_token // o cualquier otro dato que necesites\n    };\n\n    this.userProfileSubject.next(userProfile);\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { AuthService };","map":{"version":3,"names":["BehaviorSubject","AuthGoogleService","constructor","userProfileSubject","userProfile$","asObservable","handleAuthSuccess","googleUser","profile","getBasicProfile","userProfile","name","getName","given_name","getGivenName","email","getEmail","picture","getImageUrl","sub","getAuthResponse","id_token","next","authenticateUser","item","localStorage","getItem","googleAuth","JSON","parse","payload","decodeJWTToken","credential","token","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","_","_2","factory","ɵfac","providedIn","AuthService"],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\core\\services\\auth-google.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGoogleService {\n  private userProfileSubject = new BehaviorSubject<any>(null);\n  public userProfile$ = this.userProfileSubject.asObservable();\n  constructor() {\n\n  }\n\n  // Método llamado después de una autenticación exitosa\n  handleAuthSuccess(googleUser: any) {\n    const profile = googleUser.getBasicProfile();\n    const userProfile = {\n      name: profile.getName(),\n      given_name: profile.getGivenName(),\n      email: profile.getEmail(),\n      picture: profile.getImageUrl(),\n      sub: googleUser.getAuthResponse().id_token, // o cualquier otro dato que necesites\n    };\n    this.userProfileSubject.next(userProfile);\n  }\n\n  public authenticateUser() {\n    const item = localStorage.getItem('googleAuth');\n    const googleAuth = item ? JSON.parse(item) : null;\n\n    if (googleAuth) {\n      const payload = this.decodeJWTToken(googleAuth.credential);\n      // Aquí puedes usar la información de payload, como el email del usuario, para autenticar en tu backend\n    }\n  }\n\n  private decodeJWTToken(token: string): any {\n    const base64Url = token.split('.')[1];\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    const jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {\n      return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n    }).join(''));\n\n    return JSON.parse(jsonPayload);\n  }\n\n}\n\n// auth.service.ts\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private userProfileSubject = new BehaviorSubject<any>(null);\n  public userProfile$ = this.userProfileSubject.asObservable();\n\n  constructor() { }\n\n  // Método llamado después de una autenticación exitosa\n  handleAuthSuccess(googleUser: any) {\n    const profile = googleUser.getBasicProfile();\n    const userProfile = {\n      name: profile.getName(),\n      given_name: profile.getGivenName(),\n      email: profile.getEmail(),\n      picture: profile.getImageUrl(),\n      sub: googleUser.getAuthResponse().id_token, // o cualquier otro dato que necesites\n    };\n    this.userProfileSubject.next(userProfile);\n  }\n\n  // Otros métodos...\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}