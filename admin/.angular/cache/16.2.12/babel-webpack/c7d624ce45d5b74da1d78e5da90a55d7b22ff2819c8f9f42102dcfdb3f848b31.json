{"ast":null,"code":"\"use strict\";\n\n// import { Component, OnInit } from '@angular/core';\n// import { FormBuilder, FormGroup, Validators } from '@angular/forms';\n// import { Router } from '@angular/router';\n// import { GeoInfoService } from 'src/app/shared/services/geo-info.service';\n// import { ToastService } from 'src/app/shared/services/toast.service';\n// import { BusinessConfigService } from 'src/app/core/services/business-config.service';\n// import { Renderer2, ViewChild, ElementRef } from '@angular/core';\n// import { Country } from 'src/app/core/models/country.model';\n// import { State } from 'src/app/core/models/state.model';\n// import { forkJoin } from 'rxjs';\n// import { catchError } from 'rxjs/operators';\n// @Component({\n//   selector: 'app-business-setup',\n//   templateUrl: './business-setup.component.html',\n//   styleUrls: ['./business-setup.component.css']\n// })\n// export class BusinessSetupComponent implements OnInit {\n//   @ViewChild('fileInput') fileInput!: ElementRef;\n//   businessSetupForm!: FormGroup;\n//   countries: Country[] = [];\n//   states: State[] = [];\n//   filteredStates: State[] = [];\n//   load_data: boolean = false;\n//   load_btn: boolean = false;\n//   loading: boolean = false;\n//   imageUrl: any | ArrayBuffer = 'assets/img/illustrations/your-logo-here.png';\n//   selectedFile: File | null = null;\n//   constructor(\n//     private formBuilder: FormBuilder,\n//     private _renderer: Renderer2,\n//     private _router: Router,\n//     private _toastService: ToastService,\n//     private _geoInfoService: GeoInfoService,\n//     private _businessService: BusinessConfigService\n//   ) { }\n//   ngOnInit(): void {\n//     this.businessSetupForm = this.formBuilder.group({\n//       inputBusinessName: ['', [Validators.required, Validators.maxLength(100)]],\n//       inputCountryAddress: [\"\", [Validators.required]],\n//       inputStateAddress: [\"\", [Validators.required]],\n//       taxId: ['', [Validators.required, Validators.pattern('[A-Z0-9]+')]],\n//       paymentGateway: ['', Validators.required],\n//       physicalLocation: ['', Validators.required],\n//       shippingService: ['', Validators.required],\n//       companyEmail: ['', [Validators.required, Validators.email]],\n//       customerServiceEmail: ['', [Validators.required, Validators.email]],\n//       returnsEmail: ['', [Validators.required, Validators.email]],\n//       currency: ['', Validators.required],\n//       inputLogo: [null]\n//     });\n//   }\n//   private loadCountriesAndStates() {\n//     return forkJoin([\n//       this.loadCountries(),\n//       this.loadStates()\n//     ]).pipe(\n//       catchError(error => {\n//         console.error(\"Error loading data\", error);\n//         return [[], []];\n//       })\n//     );\n//   }\n//   private loadCountries() {\n//     return this._geoInfoService.get_Countries()\n//       .pipe(\n//         catchError(error => {\n//           console.error(\"Error loading countries\", error);\n//           return [];\n//         })\n//       );\n//   }\n//   private loadStates() {\n//     return this._geoInfoService.get_States()\n//       .pipe(\n//         catchError(error => {\n//           console.error(\"Error loading states\", error);\n//           return [];\n//         })\n//       );\n//   }\n//   filterStatesByCountry(countryId: string | number) {\n//     const numericCountryId = Number(countryId);\n//     this.filteredStates = this.states.filter(\n//       state => state.country_id === numericCountryId\n//     );\n//   }\n//   onCountryChange(event: Event) {\n//     const selectElement = event.target as HTMLSelectElement;\n//     const countryId = selectElement.value;\n//     this.filterStatesByCountry(countryId);\n//   }\n//   fileChangeEvent(event: Event): void {\n//     const inputElement = event.target as HTMLInputElement;\n//     if (inputElement.files && inputElement.files.length > 0) {\n//       this.selectedFile = inputElement.files[0];\n//       this.validateAndUpdateImg(this.selectedFile);\n//     }\n//   }\n//   private validateAndUpdateImg(file: File) {\n//     if (!this.imageUrl && !file) {\n//       this.businessSetupForm.get('inputLogo')!.setErrors({ required: true });\n//       return;\n//     }\n//     if (file) {\n//       const errors = this.validateFileUpdate(file);\n//       if (errors) {\n//         this.businessSetupForm.get('inputLogo')!.setErrors(errors);\n//       }\n//     }\n//   }\n//   private validateFileUpdate(file: File): { [key: string]: any } | null {\n//     if (file) {\n//       const validTypes = ['image/png', 'image/webp', 'image/jpg', 'image/gif', 'image/jpeg'];\n//       if (validTypes.includes(file.type)) {\n//         if (file.size <= 4000000) {\n//           let reader = new FileReader();\n//           reader.readAsDataURL(file);\n//           reader.onload = () => {\n//             if (reader.result !== null) {\n//               this.imageUrl = reader.result as string;\n//               this.businessSetupForm.patchValue({\n//                 file: reader.result\n//               });\n//             }\n//           }\n//           return null;\n//         } else {\n//           console.error('error', 'The image cannot exceed 4 mb');\n//           this._toastService.showToast('error', 'The image cannot exceed 4 mb');\n//           return { invalidFileSize: true };\n//         }\n//       } else {\n//         console.error('The file must be a PNG, WEBP, JPG, GIF, or JPEG image.');\n//         this._toastService.showToast('error', 'The file must be a PNG, WEBP, JPG, GIF, or JPEG image.');\n//         return { invalidFileType: true };\n//       }\n//     }\n//     return null;\n//   }\n//   triggerFileInput(): void {\n//     this._renderer.selectRootElement(this.fileInput.nativeElement).click();\n//   }\n//   onFileChange(event: any) {\n//     if (event.target.files.length > 0) {\n//       const file = event.target.files[0];\n//       this.businessSetupForm.patchValue({\n//         logo: file\n//       });\n//     }\n//   }\n//   submitBusinessDetails() {\n//     if (this.businessSetupForm.invalid) {\n//       this._toastService.showToast('error', 'Please fill all required fields correctly.');\n//       return;\n//     }\n//     this.loading = true;\n//     // Aquí iría la lógica para enviar los datos al servidor, incluyendo la carga del archivo del logo\n//     // Simulamos una llamada al servicio de negocio\n//     this._businessService.saveBusinessConfig(this.businessSetupForm.value).subscribe({\n//       next: (response) => {\n//         this._toastService.showToast('success', 'Business details saved successfully.');\n//         this._router.navigate(['/next-step-route']);\n//       },\n//       error: (error) => {\n//         this._toastService.showToast('error', 'An error occurred while saving business details.');\n//         console.error('Error saving business details:', error);\n//       },\n//       complete: () => this.loading = false\n//     });\n//   }\n// }","map":{"version":3,"names":[],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\modules\\initial-config\\business-setup\\business-setup.component.ts"],"sourcesContent":["// import { Component, OnInit } from '@angular/core';\n// import { FormBuilder, FormGroup, Validators } from '@angular/forms';\n// import { Router } from '@angular/router';\n// import { GeoInfoService } from 'src/app/shared/services/geo-info.service';\n// import { ToastService } from 'src/app/shared/services/toast.service';\n// import { BusinessConfigService } from 'src/app/core/services/business-config.service';\n// import { Renderer2, ViewChild, ElementRef } from '@angular/core';\n// import { Country } from 'src/app/core/models/country.model';\n// import { State } from 'src/app/core/models/state.model';\n// import { forkJoin } from 'rxjs';\n// import { catchError } from 'rxjs/operators';\n\n// @Component({\n//   selector: 'app-business-setup',\n//   templateUrl: './business-setup.component.html',\n//   styleUrls: ['./business-setup.component.css']\n// })\n// export class BusinessSetupComponent implements OnInit {\n//   @ViewChild('fileInput') fileInput!: ElementRef;\n\n//   businessSetupForm!: FormGroup;\n//   countries: Country[] = [];\n//   states: State[] = [];\n//   filteredStates: State[] = [];\n//   load_data: boolean = false;\n//   load_btn: boolean = false;\n//   loading: boolean = false;\n//   imageUrl: any | ArrayBuffer = 'assets/img/illustrations/your-logo-here.png';\n//   selectedFile: File | null = null;\n\n\n//   constructor(\n//     private formBuilder: FormBuilder,\n//     private _renderer: Renderer2,\n//     private _router: Router,\n//     private _toastService: ToastService,\n//     private _geoInfoService: GeoInfoService,\n//     private _businessService: BusinessConfigService\n\n//   ) { }\n\n//   ngOnInit(): void {\n//     this.businessSetupForm = this.formBuilder.group({\n//       inputBusinessName: ['', [Validators.required, Validators.maxLength(100)]],\n//       inputCountryAddress: [\"\", [Validators.required]],\n//       inputStateAddress: [\"\", [Validators.required]],\n//       taxId: ['', [Validators.required, Validators.pattern('[A-Z0-9]+')]],\n//       paymentGateway: ['', Validators.required],\n//       physicalLocation: ['', Validators.required],\n//       shippingService: ['', Validators.required],\n//       companyEmail: ['', [Validators.required, Validators.email]],\n//       customerServiceEmail: ['', [Validators.required, Validators.email]],\n//       returnsEmail: ['', [Validators.required, Validators.email]],\n//       currency: ['', Validators.required],\n//       inputLogo: [null]\n//     });\n//   }\n\n//   private loadCountriesAndStates() {\n//     return forkJoin([\n//       this.loadCountries(),\n//       this.loadStates()\n//     ]).pipe(\n//       catchError(error => {\n//         console.error(\"Error loading data\", error);\n//         return [[], []];\n//       })\n//     );\n//   }\n\n//   private loadCountries() {\n//     return this._geoInfoService.get_Countries()\n//       .pipe(\n//         catchError(error => {\n//           console.error(\"Error loading countries\", error);\n//           return [];\n//         })\n//       );\n//   }\n\n//   private loadStates() {\n//     return this._geoInfoService.get_States()\n//       .pipe(\n//         catchError(error => {\n//           console.error(\"Error loading states\", error);\n//           return [];\n//         })\n//       );\n//   }\n\n//   filterStatesByCountry(countryId: string | number) {\n//     const numericCountryId = Number(countryId);\n//     this.filteredStates = this.states.filter(\n//       state => state.country_id === numericCountryId\n//     );\n//   }\n\n//   onCountryChange(event: Event) {\n//     const selectElement = event.target as HTMLSelectElement;\n//     const countryId = selectElement.value;\n//     this.filterStatesByCountry(countryId);\n//   }\n\n\n\n\n//   fileChangeEvent(event: Event): void {\n//     const inputElement = event.target as HTMLInputElement;\n\n//     if (inputElement.files && inputElement.files.length > 0) {\n//       this.selectedFile = inputElement.files[0];\n//       this.validateAndUpdateImg(this.selectedFile);\n//     }\n//   }\n\n//   private validateAndUpdateImg(file: File) {\n//     if (!this.imageUrl && !file) {\n//       this.businessSetupForm.get('inputLogo')!.setErrors({ required: true });\n//       return;\n//     }\n//     if (file) {\n//       const errors = this.validateFileUpdate(file);\n//       if (errors) {\n//         this.businessSetupForm.get('inputLogo')!.setErrors(errors);\n//       }\n//     }\n//   }\n\n//   private validateFileUpdate(file: File): { [key: string]: any } | null {\n//     if (file) {\n//       const validTypes = ['image/png', 'image/webp', 'image/jpg', 'image/gif', 'image/jpeg'];\n//       if (validTypes.includes(file.type)) {\n//         if (file.size <= 4000000) {\n//           let reader = new FileReader();\n//           reader.readAsDataURL(file);\n\n//           reader.onload = () => {\n//             if (reader.result !== null) {\n//               this.imageUrl = reader.result as string;\n//               this.businessSetupForm.patchValue({\n//                 file: reader.result\n//               });\n//             }\n//           }\n//           return null;\n//         } else {\n//           console.error('error', 'The image cannot exceed 4 mb');\n//           this._toastService.showToast('error', 'The image cannot exceed 4 mb');\n//           return { invalidFileSize: true };\n//         }\n//       } else {\n//         console.error('The file must be a PNG, WEBP, JPG, GIF, or JPEG image.');\n//         this._toastService.showToast('error', 'The file must be a PNG, WEBP, JPG, GIF, or JPEG image.');\n//         return { invalidFileType: true };\n//       }\n//     }\n\n//     return null;\n//   }\n\n//   triggerFileInput(): void {\n//     this._renderer.selectRootElement(this.fileInput.nativeElement).click();\n//   }\n\n//   onFileChange(event: any) {\n//     if (event.target.files.length > 0) {\n//       const file = event.target.files[0];\n//       this.businessSetupForm.patchValue({\n//         logo: file\n//       });\n//     }\n//   }\n\n//   submitBusinessDetails() {\n//     if (this.businessSetupForm.invalid) {\n//       this._toastService.showToast('error', 'Please fill all required fields correctly.');\n//       return;\n//     }\n\n//     this.loading = true;\n//     // Aquí iría la lógica para enviar los datos al servidor, incluyendo la carga del archivo del logo\n//     // Simulamos una llamada al servicio de negocio\n//     this._businessService.saveBusinessConfig(this.businessSetupForm.value).subscribe({\n//       next: (response) => {\n//         this._toastService.showToast('success', 'Business details saved successfully.');\n//         this._router.navigate(['/next-step-route']);\n//       },\n//       error: (error) => {\n//         this._toastService.showToast('error', 'An error occurred while saving business details.');\n//         console.error('Error saving business details:', error);\n//       },\n//       complete: () => this.loading = false\n//     });\n//   }\n// }\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"script","externalDependencies":[]}