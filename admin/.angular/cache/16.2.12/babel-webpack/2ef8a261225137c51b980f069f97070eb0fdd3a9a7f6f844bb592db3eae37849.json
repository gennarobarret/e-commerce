{"ast":null,"code":"import { from, of } from 'rxjs'; // Asegúrate de importar of aquí\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"angular-oauth2-oidc\";\nclass AuthGoogleService {\n  constructor(oauthService) {\n    this.oauthService = oauthService;\n    this.initConfig();\n  }\n  initConfig() {\n    const authConfig = {\n      issuer: 'https://accounts.google.com',\n      clientId: '386095253324-b2sk0mj4r3hrvachfq33top1mrcjbo5a.apps.googleusercontent.com',\n      redirectUri: window.location.origin + '/dashboard',\n      scope: 'openid profile email',\n      strictDiscoveryDocumentValidation: false\n    };\n    this.oauthService.configure(authConfig);\n    this.oauthService.setupAutomaticSilentRefresh();\n  }\n  loadDiscoveryDocumentAndTryLogin() {\n    return from(this.oauthService.loadDiscoveryDocumentAndTryLogin()).pipe(map(() => true),\n    // Suponiendo que la operación fue exitosa\n    catchError(error => {\n      console.error('Error loading discovery document', error);\n      return of(false); // Usa of para crear un Observable que emite false\n    }));\n  }\n\n  loginGoogle() {\n    this.oauthService.initLoginFlow();\n  }\n  logout() {\n    this.oauthService.logOut();\n  }\n  getProfile() {\n    return this.oauthService.getIdentityClaims();\n  }\n  isAuthenticated() {\n    return this.oauthService.hasValidAccessToken();\n  }\n  onLoginSuccess(callback) {\n    this.oauthService.events.pipe(filter(e => e.type === 'token_received')).subscribe(() => {\n      if (this.isAuthenticated()) {\n        callback();\n      }\n    });\n  }\n  static #_ = this.ɵfac = function AuthGoogleService_Factory(t) {\n    return new (t || AuthGoogleService)(i0.ɵɵinject(i1.OAuthService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGoogleService,\n    factory: AuthGoogleService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { AuthGoogleService };","map":{"version":3,"names":["from","of","catchError","map","AuthGoogleService","constructor","oauthService","initConfig","authConfig","issuer","clientId","redirectUri","window","location","origin","scope","strictDiscoveryDocumentValidation","configure","setupAutomaticSilentRefresh","loadDiscoveryDocumentAndTryLogin","pipe","error","console","loginGoogle","initLoginFlow","logout","logOut","getProfile","getIdentityClaims","isAuthenticated","hasValidAccessToken","onLoginSuccess","callback","events","filter","e","type","subscribe","_","i0","ɵɵinject","i1","OAuthService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\core\\services\\auth-google.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { OAuthService, AuthConfig } from 'angular-oauth2-oidc';\r\nimport { Observable, from, of } from 'rxjs'; // Asegúrate de importar of aquí\r\nimport { catchError, map } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthGoogleService {\r\n\r\n  constructor(private oauthService: OAuthService) {\r\n    this.initConfig();\r\n  }\r\n\r\n  initConfig() {\r\n    const authConfig: AuthConfig = {\r\n      issuer: 'https://accounts.google.com',\r\n      clientId: '386095253324-b2sk0mj4r3hrvachfq33top1mrcjbo5a.apps.googleusercontent.com',\r\n      redirectUri: window.location.origin + '/dashboard',\r\n      scope: 'openid profile email',\r\n      strictDiscoveryDocumentValidation: false,\r\n    };\r\n    this.oauthService.configure(authConfig);\r\n    this.oauthService.setupAutomaticSilentRefresh();\r\n  }\r\n\r\n  loadDiscoveryDocumentAndTryLogin(): Observable<boolean> {\r\n    return from(this.oauthService.loadDiscoveryDocumentAndTryLogin()).pipe(\r\n      map(() => true), // Suponiendo que la operación fue exitosa\r\n      catchError(error => {\r\n        console.error('Error loading discovery document', error);\r\n        return of(false); // Usa of para crear un Observable que emite false\r\n      })\r\n    );\r\n  }\r\n\r\n  loginGoogle() {\r\n    this.oauthService.initLoginFlow();\r\n  }\r\n\r\n  logout() {\r\n    this.oauthService.logOut();\r\n  }\r\n\r\n  getProfile() {\r\n    return this.oauthService.getIdentityClaims();\r\n  }\r\n\r\n  isAuthenticated() {\r\n    return this.oauthService.hasValidAccessToken();\r\n  }\r\n\r\n  onLoginSuccess(callback: () => void) {\r\n    this.oauthService.events.pipe(\r\n      filter(e => e.type === 'token_received')\r\n    ).subscribe(() => {\r\n      if (this.isAuthenticated()) {\r\n        callback();\r\n      }\r\n    });\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAAqBA,IAAI,EAAEC,EAAE,QAAQ,MAAM,CAAC,CAAC;AAC7C,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;;;AAEhD,MAGaC,iBAAiB;EAE5BC,YAAoBC,YAA0B;IAA1B,KAAAA,YAAY,GAAZA,YAAY;IAC9B,IAAI,CAACC,UAAU,EAAE;EACnB;EAEAA,UAAUA,CAAA;IACR,MAAMC,UAAU,GAAe;MAC7BC,MAAM,EAAE,6BAA6B;MACrCC,QAAQ,EAAE,0EAA0E;MACpFC,WAAW,EAAEC,MAAM,CAACC,QAAQ,CAACC,MAAM,GAAG,YAAY;MAClDC,KAAK,EAAE,sBAAsB;MAC7BC,iCAAiC,EAAE;KACpC;IACD,IAAI,CAACV,YAAY,CAACW,SAAS,CAACT,UAAU,CAAC;IACvC,IAAI,CAACF,YAAY,CAACY,2BAA2B,EAAE;EACjD;EAEAC,gCAAgCA,CAAA;IAC9B,OAAOnB,IAAI,CAAC,IAAI,CAACM,YAAY,CAACa,gCAAgC,EAAE,CAAC,CAACC,IAAI,CACpEjB,GAAG,CAAC,MAAM,IAAI,CAAC;IAAE;IACjBD,UAAU,CAACmB,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MACxD,OAAOpB,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;IACpB,CAAC,CAAC,CACH;EACH;;EAEAsB,WAAWA,CAAA;IACT,IAAI,CAACjB,YAAY,CAACkB,aAAa,EAAE;EACnC;EAEAC,MAAMA,CAAA;IACJ,IAAI,CAACnB,YAAY,CAACoB,MAAM,EAAE;EAC5B;EAEAC,UAAUA,CAAA;IACR,OAAO,IAAI,CAACrB,YAAY,CAACsB,iBAAiB,EAAE;EAC9C;EAEAC,eAAeA,CAAA;IACb,OAAO,IAAI,CAACvB,YAAY,CAACwB,mBAAmB,EAAE;EAChD;EAEAC,cAAcA,CAACC,QAAoB;IACjC,IAAI,CAAC1B,YAAY,CAAC2B,MAAM,CAACb,IAAI,CAC3Bc,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,KAAK,gBAAgB,CAAC,CACzC,CAACC,SAAS,CAAC,MAAK;MACf,IAAI,IAAI,CAACR,eAAe,EAAE,EAAE;QAC1BG,QAAQ,EAAE;;IAEd,CAAC,CAAC;EACJ;EAAC,QAAAM,CAAA,G;qBApDUlC,iBAAiB,EAAAmC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,YAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAjBvC,iBAAiB;IAAAwC,OAAA,EAAjBxC,iBAAiB,CAAAyC,IAAA;IAAAC,UAAA,EAFhB;EAAM;;SAEP1C,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}