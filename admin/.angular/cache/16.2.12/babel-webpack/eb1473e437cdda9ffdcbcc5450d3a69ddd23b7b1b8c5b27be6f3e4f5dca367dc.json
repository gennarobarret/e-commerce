{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { GLOBAL } from '../config/GLOBAL';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\n// Importaciones adicionales seg√∫n sean necesarias...\nclass AuthService {\n  constructor(_http, _router) {\n    this._http = _http;\n    this._router = _router;\n    this.url = GLOBAL.url;\n    this.loginSuccessSubject = new Subject();\n    this.loginSuccessObservable = this.loginSuccessSubject.asObservable();\n  }\n  handleError(error) {\n    let errorMessage = error.error.message || 'An error occurred';\n    return throwError(() => new Error(errorMessage));\n  }\n  loginUser(credentials) {\n    return this._http.post(`${this.url}loginUser`, credentials, {\n      withCredentials: true\n    }).pipe(catchError(error => this.handleError(error)));\n  }\n  // Otros m√©todos...\n  authenticateWithGoogle(token) {\n    return this._http.post(`${this.url}auth/google`, {\n      token\n    }, {\n      withCredentials: true\n    }).pipe(catchError(error => this.handleError(error)));\n  }\n  logout() {\n    // Enviar solicitud al backend para limpiar la cookie de sesi√≥n\n    this._http.post(`${this.url}logout`, {}, {\n      withCredentials: true\n    }).subscribe(() => {\n      this._router.navigate(['/auth/login']);\n    });\n  }\n  static #_ = this.…µfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.…µ…µinject(i1.HttpClient), i0.…µ…µinject(i2.Router));\n  };\n  static #_2 = this.…µprov = /*@__PURE__*/i0.…µ…µdefineInjectable({\n    token: AuthService,\n    factory: AuthService.…µfac,\n    providedIn: 'root'\n  });\n}\nexport { AuthService };","map":{"version":3,"names":["throwError","catchError","GLOBAL","AuthService","constructor","_http","_router","url","loginSuccessSubject","Subject","loginSuccessObservable","asObservable","handleError","error","errorMessage","message","Error","loginUser","credentials","post","withCredentials","pipe","authenticateWithGoogle","token","logout","subscribe","navigate","_","i0","…µ…µinject","i1","HttpClient","i2","Router","_2","factory","…µfac","providedIn"],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\core\\services\\auth.service.ts"],"sourcesContent":["// auth.service.ts\n\n// import { Injectable } from '@angular/core';\n// import { HttpClient, HttpHeaders } from '@angular/common/http';\n// import { Router } from '@angular/router';\n// import { JwtHelperService } from '@auth0/angular-jwt';\n// import { LoginCredentials } from 'src/app/core/models';\n// import { GLOBAL } from '../config/GLOBAL';\n// import { Observable, throwError, Subject, EMPTY, of } from 'rxjs';\n// import { tap, catchError } from 'rxjs/operators';\n// import { ApiResponse } from '../models/api-response.interface';\n// import { User, UserWithToken } from '../models/user.interface';\n// import { ForgotPasswordRequest } from '../models/forgot-password-request.interface';\n// @Injectable({\n//   providedIn: 'root',\n// })\n\n// export class AuthService {\n//   private url: string = GLOBAL.url;\n//   private loginSuccessSubject = new Subject<boolean>();\n//   public loginSuccessObservable = this.loginSuccessSubject.asObservable();\n\n//   constructor(private _http: HttpClient, private _router: Router) { }\n\n\n//   private handleError(error: any): Observable<never> {\n//     let errorMessage = error.error.message || 'An error occurred';\n//     return throwError(() => new Error(errorMessage));\n//   }\n\n//   private storeToken(token: string): void {\n//     localStorage.setItem('token', token);\n//   }\n\n//   private removeToken(): void {\n//     localStorage.removeItem('token');\n//   }\n\n//   getToken(): string | null {\n//     return localStorage.getItem('token');\n//   }\n\n//   isAuthenticated(allowRoles: string[]): boolean {\n//     const token = this.getToken();\n//     if (!token) return false;\n//     try {\n//       const helper = new JwtHelperService();\n//       const decodedToken = helper.decodeToken(token);\n//       if (!decodedToken || !decodedToken['role']) {\n//         this.logout();\n//         return false;\n//       }\n//       return allowRoles.includes(decodedToken['role']);\n//     } catch (error) {\n//       this.logout();\n//       return false;\n//     }\n//   }\n\n//   loginUser(credentials: LoginCredentials): Observable<ApiResponse<UserWithToken>> {\n//     return this._http\n//       .post<ApiResponse<UserWithToken>>(`${this.url}loginUser`, credentials)\n//       .pipe(\n//         tap(response => {\n//           if (response.data && response.data.token) {\n//             console.log(\"üöÄ ~ AuthService ~ loginUser ~ response.data:\", response.data)\n//             console.log(\"üöÄ ~ AuthService ~ loginUser ~ response.data.token:\", response.data.token)\n//             // this.storeToken(response.data.token);\n//             // this._router.navigate(['/']);\n//             // this.loginSuccessSubject.next(true);\n//           }\n//         }),\n//         catchError(error => this.handleError(error))\n//       );\n//   }\n\n//   // forgotPassword(request: ForgotPasswordRequest): Observable<ApiResponse<any>> {\n//   //   // ... tu l√≥gica aqu√≠\n//   // }\n\n\n//   createMasterAdmin(data: any): Observable<any> {\n//     return this._http.post(`${this.url}createMasterAdmin`, data);\n//   }\n\n//   activateAccount(token: string): Observable<any> {\n//     const url = `${this.url}/activation/${token}`;\n//     return this._http.get(url).pipe(\n//       catchError(error => {\n//         console.error('Error activating account:', error);\n//         return of(null);\n//       })\n//     );\n//   }\n\n//   resendVerificationEmail(emailAddress: string): Observable<any> {\n//     return this._http.post(`${this.url}/resendVerificationEmail`, { emailAddress })\n//       .pipe(\n//         catchError(error => {\n//           console.error('Error resending the verification email:', error);\n//           return of(null);\n//         })\n//       );\n//   }\n\n//   // En AuthService\n//   authenticateWithGoogle(token: string): Observable<any> {\n//     return this._http.post(`${this.url}auth/google`, { token }).pipe(\n//       tap((response: any) => {\n//         // Asumiendo que la respuesta del backend incluye el token en response.token\n//         this.storeToken(response.token); // Almacenar el token usando un m√©todo del servicio\n//         // Aqu√≠ puedes agregar cualquier otra l√≥gica necesaria despu√©s de la autenticaci√≥n exitosa\n//       }),\n//       catchError(error => this.handleError(error))\n//     );\n//   }\n\n//   logout(): void {\n//     this.removeToken();\n//     this._router.navigate(['/auth/login']);\n//   }\n\n// }\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { GLOBAL } from '../config/GLOBAL';\nimport { ApiResponse } from '../models/api-response.interface';\nimport { LoginCredentials } from 'src/app/core/models';\n// Importaciones adicionales seg√∫n sean necesarias...\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private url: string = GLOBAL.url;\n  private loginSuccessSubject = new Subject<boolean>();\n  public loginSuccessObservable = this.loginSuccessSubject.asObservable();\n\n  constructor(private _http: HttpClient, private _router: Router) { }\n\n  private handleError(error: any): Observable<never> {\n    let errorMessage = error.error.message || 'An error occurred';\n    return throwError(() => new Error(errorMessage));\n  }\n\n  loginUser(credentials: LoginCredentials): Observable<ApiResponse<any>> {\n    return this._http.post<ApiResponse<any>>(`${this.url}loginUser`, credentials, { withCredentials: true }).pipe(\n      catchError(error => this.handleError(error))\n    );\n  }\n\n  // Otros m√©todos...\n\n  authenticateWithGoogle(token: string): Observable<any> {\n    return this._http.post(`${this.url}auth/google`, { token }, { withCredentials: true }).pipe(\n      catchError(error => this.handleError(error))\n    );\n  }\n\n  logout(): void {\n    // Enviar solicitud al backend para limpiar la cookie de sesi√≥n\n    this._http.post(`${this.url}logout`, {}, { withCredentials: true }).subscribe(() => {\n      this._router.navigate(['/auth/login']);\n    });\n  }\n\n  // Puedes mantener o adaptar otros m√©todos seg√∫n sea necesario...\n}\n"],"mappings":"AA8HA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;AAC3C,SAASC,MAAM,QAAQ,kBAAkB;;;;AAGzC;AAEA,MAGaC,WAAW;EAKtBC,YAAoBC,KAAiB,EAAUC,OAAe;IAA1C,KAAAD,KAAK,GAALA,KAAK;IAAsB,KAAAC,OAAO,GAAPA,OAAO;IAJ9C,KAAAC,GAAG,GAAWL,MAAM,CAACK,GAAG;IACxB,KAAAC,mBAAmB,GAAG,IAAIC,OAAO,EAAW;IAC7C,KAAAC,sBAAsB,GAAG,IAAI,CAACF,mBAAmB,CAACG,YAAY,EAAE;EAEL;EAE1DC,WAAWA,CAACC,KAAU;IAC5B,IAAIC,YAAY,GAAGD,KAAK,CAACA,KAAK,CAACE,OAAO,IAAI,mBAAmB;IAC7D,OAAOf,UAAU,CAAC,MAAM,IAAIgB,KAAK,CAACF,YAAY,CAAC,CAAC;EAClD;EAEAG,SAASA,CAACC,WAA6B;IACrC,OAAO,IAAI,CAACb,KAAK,CAACc,IAAI,CAAmB,GAAG,IAAI,CAACZ,GAAG,WAAW,EAAEW,WAAW,EAAE;MAAEE,eAAe,EAAE;IAAI,CAAE,CAAC,CAACC,IAAI,CAC3GpB,UAAU,CAACY,KAAK,IAAI,IAAI,CAACD,WAAW,CAACC,KAAK,CAAC,CAAC,CAC7C;EACH;EAEA;EAEAS,sBAAsBA,CAACC,KAAa;IAClC,OAAO,IAAI,CAAClB,KAAK,CAACc,IAAI,CAAC,GAAG,IAAI,CAACZ,GAAG,aAAa,EAAE;MAAEgB;IAAK,CAAE,EAAE;MAAEH,eAAe,EAAE;IAAI,CAAE,CAAC,CAACC,IAAI,CACzFpB,UAAU,CAACY,KAAK,IAAI,IAAI,CAACD,WAAW,CAACC,KAAK,CAAC,CAAC,CAC7C;EACH;EAEAW,MAAMA,CAAA;IACJ;IACA,IAAI,CAACnB,KAAK,CAACc,IAAI,CAAC,GAAG,IAAI,CAACZ,GAAG,QAAQ,EAAE,EAAE,EAAE;MAAEa,eAAe,EAAE;IAAI,CAAE,CAAC,CAACK,SAAS,CAAC,MAAK;MACjF,IAAI,CAACnB,OAAO,CAACoB,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC;IACxC,CAAC,CAAC;EACJ;EAAC,QAAAC,CAAA,G;qBA/BUxB,WAAW,EAAAyB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAX/B,WAAW;IAAAgC,OAAA,EAAXhC,WAAW,CAAAiC,IAAA;IAAAC,UAAA,EAFV;EAAM;;SAEPlC,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}