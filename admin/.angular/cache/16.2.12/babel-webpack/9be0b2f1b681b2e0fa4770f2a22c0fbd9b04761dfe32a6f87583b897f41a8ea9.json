{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet GoogleSigninComponent = class GoogleSigninComponent {};\nGoogleSigninComponent = __decorate([Component({\n  selector: 'app-google-signin',\n  templateUrl: './google-signin.component.html',\n  styleUrls: ['./google-signin.component.css']\n})], GoogleSigninComponent);\nexport { GoogleSigninComponent };\n() => {\n  this.renderButton();\n};\nrenderButton();\n{\n  google.accounts.id.initialize({\n    client_id: \"142003720401-scrooc5tq3p8ht8m377p67kdrt3ablei.apps.googleusercontent.com\",\n    callback: response => this.onSignIn(response)\n  });\n  google.accounts.id.renderButton(document.getElementById(\"g_id_onload\"), {\n    theme: \"outline\",\n    size: \"large\"\n  });\n  google.accounts.id.prompt();\n}\n// Dentro de GoogleSigninComponent\nonSignIn(response, GoogleSignInResponse);\n{\n  console.log('Usuario ha iniciado sesión:', response);\n  const userToken = response.credential;\n  this._authService.authenticateWithGoogle(userToken).subscribe({\n    next: data => {\n      console.log('Datos del usuario guardados/recuperados:', data);\n      this.router.navigate(['/dashboard']); // Navegar a otra vista tras la autenticación exitosa\n    },\n\n    error: error => {\n      console.error('Error al enviar token al backend:', error);\n      // Aquí puedes manejar errores, como mostrar un mensaje al usuario\n    }\n  });\n}","map":{"version":3,"names":["Component","GoogleSigninComponent","__decorate","selector","templateUrl","styleUrls","renderButton","google","accounts","id","initialize","client_id","callback","response","onSignIn","document","getElementById","theme","size","prompt","GoogleSignInResponse","console","log","userToken","credential","_authService","authenticateWithGoogle","subscribe","next","data","router","navigate","error"],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\modules\\auth\\google-signin\\google-signin.component.ts"],"sourcesContent":["import { Component, OnInit, NgZone } from '@angular/core';\nimport { Router } from '@angular/router'; // Importar Router\nimport { jwtDecode } from 'jwt-decode';\nimport { AuthService } from 'src/app/core/services/auth.service';\n\ndeclare var google: any;\n\ninterface GoogleSignInResponse {\n  clientId: string;\n  credential: string;\n  select_by: string;\n}\n\n@Component({\n  selector: 'app-google-signin',\n  templateUrl: './google-signin.component.html',\n  styleUrls: ['./google-signin.component.css']\n})\n\nexport class GoogleSigninComponent implements OnInit {\n  constructor(\n    private router: Router,\n    private _authService: AuthService,\n    private ngZone: NgZone // Inyectar NgZone) { } // Inyectar Router\n\n  ngOnInit(): void {\n    this.renderButton();\n  }\n\n  renderButton() {\n    google.accounts.id.initialize({\n      client_id: \"142003720401-scrooc5tq3p8ht8m377p67kdrt3ablei.apps.googleusercontent.com\",\n      callback: (response: GoogleSignInResponse) => this.onSignIn(response),\n    });\n\n    google.accounts.id.renderButton(\n      document.getElementById(\"g_id_onload\"),\n      { theme: \"outline\", size: \"large\" }\n    );\n\n    google.accounts.id.prompt();\n  }\n\n  // Dentro de GoogleSigninComponent\n  onSignIn(response: GoogleSignInResponse) {\n    console.log('Usuario ha iniciado sesión:', response);\n    const userToken = response.credential;\n    this._authService.authenticateWithGoogle(userToken).subscribe({\n      next: (data) => {\n        console.log('Datos del usuario guardados/recuperados:', data);\n        this.router.navigate(['/dashboard']); // Navegar a otra vista tras la autenticación exitosa\n      },\n      error: (error) => {\n        console.error('Error al enviar token al backend:', error);\n        // Aquí puedes manejar errores, como mostrar un mensaje al usuario\n      }\n    });\n  }\n\n\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAwB,eAAe;AAmBzD,IAAaC,qBAAqB,GAAlC,MAAaA,qBAAqB,GAMxB;AANGA,qBAAqB,GAAAC,UAAA,EANjCF,SAAS,CAAC;EACTG,QAAQ,EAAE,mBAAmB;EAC7BC,WAAW,EAAE,gCAAgC;EAC7CC,SAAS,EAAE,CAAC,+BAA+B;CAC5C,CAAC,C,EAEWJ,qBAAqB,CAMxB;SANGA,qBAAqB;AAMxB,MAAQ;EACd,IAAI,CAACK,YAAY,EAAE;AACrB,CAAC;AAEDA,YAAY,EAAE;AAAC;EACbC,MAAM,CAACC,QAAQ,CAACC,EAAE,CAACC,UAAU,CAAC;IAC5BC,SAAS,EAAE,0EAA0E;IACrFC,QAAQ,EAAGC,QAA8B,IAAK,IAAI,CAACC,QAAQ,CAACD,QAAQ;GACrE,CAAC;EAEFN,MAAM,CAACC,QAAQ,CAACC,EAAE,CAACH,YAAY,CAC7BS,QAAQ,CAACC,cAAc,CAAC,aAAa,CAAC,EACtC;IAAEC,KAAK,EAAE,SAAS;IAAEC,IAAI,EAAE;EAAO,CAAE,CACpC;EAEDX,MAAM,CAACC,QAAQ,CAACC,EAAE,CAACU,MAAM,EAAE;;AAG7B;AACAL,QAAQ,CAACD,QAAQ,EAAEO,oBAAoB,CAAC;AAAC;EACvCC,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAET,QAAQ,CAAC;EACpD,MAAMU,SAAS,GAAGV,QAAQ,CAACW,UAAU;EACrC,IAAI,CAACC,YAAY,CAACC,sBAAsB,CAACH,SAAS,CAAC,CAACI,SAAS,CAAC;IAC5DC,IAAI,EAAGC,IAAI,IAAI;MACbR,OAAO,CAACC,GAAG,CAAC,0CAA0C,EAAEO,IAAI,CAAC;MAC7D,IAAI,CAACC,MAAM,CAACC,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;IACxC,CAAC;;IACDC,KAAK,EAAGA,KAAK,IAAI;MACfX,OAAO,CAACW,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MACzD;IACF;GACD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}