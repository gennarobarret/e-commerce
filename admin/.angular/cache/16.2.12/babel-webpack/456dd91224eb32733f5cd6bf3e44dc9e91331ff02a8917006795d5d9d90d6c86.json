{"ast":null,"code":"\"use strict\";\n\n// import { Injectable } from '@angular/core';\n// import { AuthConfig, OAuthService, OAuthErrorEvent } from 'angular-oauth2-oidc';\n// @Injectable({\n//   providedIn: 'root',\n// })\n// export class AuthGoogleService {\n//   private config: AuthConfig = {\n//     issuer: 'https://accounts.google.com',\n//     redirectUri: window.location.origin + '/dashboard',\n//     clientId:\n//       '386095253324-hu7fnt80k4mqc18p3ob357f215pa2as5.apps.googleusercontent.com',\n//     scope: 'openid profile email',\n//     strictDiscoveryDocumentValidation: false\n//   };\n//   constructor(private oauthService: OAuthService) {\n//     this.initLogin();\n//   }\n//   initLogin() {\n//     this.oauthService.configure(this.config);\n//     this.oauthService.setupAutomaticSilentRefresh();\n//     // Carga el documento de descubrimiento y trata de iniciar sesión automáticamente\n//     this.oauthService.loadDiscoveryDocumentAndTryLogin().then(() => {\n//       if (this.oauthService.hasValidAccessToken()) {\n//         console.log('Usuario autenticado');\n//         // Aquí puedes, por ejemplo, redirigir al usuario a otra ruta o cargar sus datos de perfil\n//       } else {\n//         console.log('Usuario no autenticado');\n//         // Puedes opcionalmente iniciar el flujo de login aquí o mostrar una UI que invite al usuario a loguearse\n//       }\n//     });\n//     // Manejador de eventos de error\n//     this.oauthService.events.subscribe(event => {\n//       if (event instanceof OAuthErrorEvent) {\n//         console.error('OAuthErrorEvent Object:', event);\n//       } else {\n//         console.log('OAuthEvent', event);\n//       }\n//     });\n//   }\n//   login() {\n//     this.oauthService.initLoginFlow();\n//   }\n//   logout() {\n//     this.oauthService.logOut();\n//   }\n//   getProfile() {\n//     if (this.isAuthenticated()) {\n//       const claims: any = this.oauthService.getIdentityClaims();\n//       if (!claims) {\n//         console.log('No se pudo obtener los claims del perfil del usuario.');\n//         return null;\n//       }\n//       return {\n//         nombre: claims.name,\n//         email: claims.email,\n//         imagen: claims.picture,\n//       };\n//     } else {\n//       console.log('Usuario no autenticado.');\n//       return null;\n//     }\n//   }\n//   isAuthenticated(): boolean {\n//     return this.oauthService.hasValidAccessToken();\n//   }\n// }","map":{"version":3,"names":[],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\core\\services\\auth-google.service.ts"],"sourcesContent":["// import { Injectable } from '@angular/core';\r\n// import { AuthConfig, OAuthService, OAuthErrorEvent } from 'angular-oauth2-oidc';\r\n\r\n// @Injectable({\r\n//   providedIn: 'root',\r\n// })\r\n// export class AuthGoogleService {\r\n\r\n//   private config: AuthConfig = {\r\n//     issuer: 'https://accounts.google.com',\r\n//     redirectUri: window.location.origin + '/dashboard',\r\n//     clientId:\r\n//       '386095253324-hu7fnt80k4mqc18p3ob357f215pa2as5.apps.googleusercontent.com',\r\n//     scope: 'openid profile email',\r\n//     strictDiscoveryDocumentValidation: false\r\n//   };\r\n\r\n//   constructor(private oauthService: OAuthService) {\r\n//     this.initLogin();\r\n//   }\r\n\r\n//   initLogin() {\r\n//     this.oauthService.configure(this.config);\r\n//     this.oauthService.setupAutomaticSilentRefresh();\r\n//     // Carga el documento de descubrimiento y trata de iniciar sesión automáticamente\r\n//     this.oauthService.loadDiscoveryDocumentAndTryLogin().then(() => {\r\n//       if (this.oauthService.hasValidAccessToken()) {\r\n//         console.log('Usuario autenticado');\r\n//         // Aquí puedes, por ejemplo, redirigir al usuario a otra ruta o cargar sus datos de perfil\r\n//       } else {\r\n//         console.log('Usuario no autenticado');\r\n//         // Puedes opcionalmente iniciar el flujo de login aquí o mostrar una UI que invite al usuario a loguearse\r\n//       }\r\n\r\n//     });\r\n\r\n//     // Manejador de eventos de error\r\n//     this.oauthService.events.subscribe(event => {\r\n//       if (event instanceof OAuthErrorEvent) {\r\n//         console.error('OAuthErrorEvent Object:', event);\r\n//       } else {\r\n//         console.log('OAuthEvent', event);\r\n//       }\r\n//     });\r\n//   }\r\n\r\n\r\n//   login() {\r\n//     this.oauthService.initLoginFlow();\r\n//   }\r\n\r\n//   logout() {\r\n//     this.oauthService.logOut();\r\n//   }\r\n\r\n//   getProfile() {\r\n//     if (this.isAuthenticated()) {\r\n//       const claims: any = this.oauthService.getIdentityClaims();\r\n//       if (!claims) {\r\n//         console.log('No se pudo obtener los claims del perfil del usuario.');\r\n//         return null;\r\n//       }\r\n//       return {\r\n//         nombre: claims.name,\r\n//         email: claims.email,\r\n//         imagen: claims.picture,\r\n//       };\r\n//     } else {\r\n//       console.log('Usuario no autenticado.');\r\n//       return null;\r\n//     }\r\n//   }\r\n\r\n//   isAuthenticated(): boolean {\r\n//     return this.oauthService.hasValidAccessToken();\r\n//   }\r\n\r\n// }\r\n"],"mappings":";;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA"},"metadata":{},"sourceType":"script","externalDependencies":[]}