{"ast":null,"code":"import { OAuthErrorEvent } from 'angular-oauth2-oidc';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"angular-oauth2-oidc\";\nclass AuthGoogleService {\n  constructor(oauthService) {\n    this.oauthService = oauthService;\n    this.config = {\n      issuer: 'https://accounts.google.com',\n      redirectUri: window.location.origin + '/dashboard',\n      clientId: '386095253324-hu7fnt80k4mqc18p3ob357f215pa2as5.apps.googleusercontent.com',\n      scope: 'openid profile email',\n      strictDiscoveryDocumentValidation: false\n    };\n    this.initLogin();\n  }\n  initLogin() {\n    this.oauthService.configure(this.config);\n    this.oauthService.setupAutomaticSilentRefresh();\n    // Carga el documento de descubrimiento y trata de iniciar sesión automáticamente\n    this.oauthService.loadDiscoveryDocumentAndTryLogin().then(() => {\n      if (!this.oauthService.hasValidAccessToken()) {\n        // Opcional: Redirigir al usuario al login si no tiene un token válido\n        // this.login();\n      }\n    });\n    // Manejador de eventos de error\n    this.oauthService.events.subscribe(event => {\n      if (event instanceof OAuthErrorEvent) {\n        console.error('OAuthErrorEvent Object:', event);\n      } else {\n        console.log('OAuthEvent', event);\n      }\n    });\n  }\n  login() {\n    this.oauthService.initLoginFlow();\n  }\n  logout() {\n    this.oauthService.logOut();\n  }\n  getProfile() {\n    return this.oauthService.getIdentityClaims();\n  }\n  isAuthenticated() {\n    return this.oauthService.hasValidAccessToken();\n  }\n  static #_ = this.ɵfac = function AuthGoogleService_Factory(t) {\n    return new (t || AuthGoogleService)(i0.ɵɵinject(i1.OAuthService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGoogleService,\n    factory: AuthGoogleService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { AuthGoogleService };","map":{"version":3,"names":["OAuthErrorEvent","AuthGoogleService","constructor","oauthService","config","issuer","redirectUri","window","location","origin","clientId","scope","strictDiscoveryDocumentValidation","initLogin","configure","setupAutomaticSilentRefresh","loadDiscoveryDocumentAndTryLogin","then","hasValidAccessToken","events","subscribe","event","console","error","log","login","initLoginFlow","logout","logOut","getProfile","getIdentityClaims","isAuthenticated","_","i0","ɵɵinject","i1","OAuthService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\core\\services\\auth-google.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { AuthConfig, OAuthService, OAuthErrorEvent } from 'angular-oauth2-oidc';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthGoogleService {\r\n  private config: AuthConfig = {\r\n    issuer: 'https://accounts.google.com',\r\n    redirectUri: window.location.origin + '/dashboard',\r\n    clientId:\r\n      '386095253324-hu7fnt80k4mqc18p3ob357f215pa2as5.apps.googleusercontent.com',\r\n    scope: 'openid profile email',\r\n    strictDiscoveryDocumentValidation: false\r\n  };\r\n\r\n  constructor(private oauthService: OAuthService) {\r\n    this.initLogin();\r\n  }\r\n\r\n  initLogin() {\r\n    this.oauthService.configure(this.config);\r\n    this.oauthService.setupAutomaticSilentRefresh();\r\n\r\n    // Carga el documento de descubrimiento y trata de iniciar sesión automáticamente\r\n    this.oauthService.loadDiscoveryDocumentAndTryLogin().then(() => {\r\n      if (!this.oauthService.hasValidAccessToken()) {\r\n        // Opcional: Redirigir al usuario al login si no tiene un token válido\r\n        // this.login();\r\n      }\r\n    });\r\n\r\n    // Manejador de eventos de error\r\n    this.oauthService.events.subscribe(event => {\r\n      if (event instanceof OAuthErrorEvent) {\r\n        console.error('OAuthErrorEvent Object:', event);\r\n      } else {\r\n        console.log('OAuthEvent', event);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  login() {\r\n    this.oauthService.initLoginFlow();\r\n  }\r\n\r\n  logout() {\r\n    this.oauthService.logOut();\r\n  }\r\n\r\n  getProfile() {\r\n    return this.oauthService.getIdentityClaims();\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    return this.oauthService.hasValidAccessToken();\r\n  }\r\n\r\n}\r\n"],"mappings":"AACA,SAAmCA,eAAe,QAAQ,qBAAqB;;;AAE/E,MAGaC,iBAAiB;EAU5BC,YAAoBC,YAA0B;IAA1B,KAAAA,YAAY,GAAZA,YAAY;IATxB,KAAAC,MAAM,GAAe;MAC3BC,MAAM,EAAE,6BAA6B;MACrCC,WAAW,EAAEC,MAAM,CAACC,QAAQ,CAACC,MAAM,GAAG,YAAY;MAClDC,QAAQ,EACN,0EAA0E;MAC5EC,KAAK,EAAE,sBAAsB;MAC7BC,iCAAiC,EAAE;KACpC;IAGC,IAAI,CAACC,SAAS,EAAE;EAClB;EAEAA,SAASA,CAAA;IACP,IAAI,CAACV,YAAY,CAACW,SAAS,CAAC,IAAI,CAACV,MAAM,CAAC;IACxC,IAAI,CAACD,YAAY,CAACY,2BAA2B,EAAE;IAE/C;IACA,IAAI,CAACZ,YAAY,CAACa,gCAAgC,EAAE,CAACC,IAAI,CAAC,MAAK;MAC7D,IAAI,CAAC,IAAI,CAACd,YAAY,CAACe,mBAAmB,EAAE,EAAE;QAC5C;QACA;MAAA;IAEJ,CAAC,CAAC;IAEF;IACA,IAAI,CAACf,YAAY,CAACgB,MAAM,CAACC,SAAS,CAACC,KAAK,IAAG;MACzC,IAAIA,KAAK,YAAYrB,eAAe,EAAE;QACpCsB,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEF,KAAK,CAAC;OAChD,MAAM;QACLC,OAAO,CAACE,GAAG,CAAC,YAAY,EAAEH,KAAK,CAAC;;IAEpC,CAAC,CAAC;EACJ;EAGAI,KAAKA,CAAA;IACH,IAAI,CAACtB,YAAY,CAACuB,aAAa,EAAE;EACnC;EAEAC,MAAMA,CAAA;IACJ,IAAI,CAACxB,YAAY,CAACyB,MAAM,EAAE;EAC5B;EAEAC,UAAUA,CAAA;IACR,OAAO,IAAI,CAAC1B,YAAY,CAAC2B,iBAAiB,EAAE;EAC9C;EAEAC,eAAeA,CAAA;IACb,OAAO,IAAI,CAAC5B,YAAY,CAACe,mBAAmB,EAAE;EAChD;EAAC,QAAAc,CAAA,G;qBAnDU/B,iBAAiB,EAAAgC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,YAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAjBpC,iBAAiB;IAAAqC,OAAA,EAAjBrC,iBAAiB,CAAAsC,IAAA;IAAAC,UAAA,EAFhB;EAAM;;SAEPvC,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}