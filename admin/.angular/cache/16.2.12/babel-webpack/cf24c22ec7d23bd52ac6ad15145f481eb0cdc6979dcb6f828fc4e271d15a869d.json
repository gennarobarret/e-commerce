{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"angular-oauth2-oidc\";\nimport * as i2 from \"@auth0/angular-jwt\";\nclass AuthGoogleService {\n  constructor(oauthService, _authGoogleService, jwtHelper) {\n    this.oauthService = oauthService;\n    this._authGoogleService = _authGoogleService;\n    this.jwtHelper = jwtHelper;\n    this.initLogin();\n  }\n  usuarioEstaVerificado() {\n    const token = this._authGoogleService.getIdToken(); // Asegúrate de tener un método que exponga el ID token de manera segura\n    if (!token) return false;\n    const decodedToken = this.jwtHelper.decodeToken(token);\n    return !!decodedToken.email_verified;\n  }\n  usuarioEstaAutenticado() {\n    return this.oauthService.hasValidAccessToken();\n  }\n  initLogin() {\n    const config = {\n      issuer: 'https://accounts.google.com',\n      strictDiscoveryDocumentValidation: false,\n      clientId: '386095253324-84qs8hfs2j1lccd29hlfr9393s27h5fc.apps.googleusercontent.com',\n      redirectUri: window.location.origin + '/dashboard',\n      scope: 'openid profile email'\n    };\n    this.oauthService.configure(config);\n    this.oauthService.setupAutomaticSilentRefresh();\n    this.oauthService.loadDiscoveryDocumentAndTryLogin();\n  }\n  login() {\n    this.oauthService.initLoginFlow();\n  }\n  logout() {\n    this.oauthService.logOut();\n  }\n  getProfile() {\n    return this.oauthService.getIdentityClaims();\n  }\n  // Dentro de AuthGoogleService\n  getIdToken() {\n    return this.oauthService.getIdToken();\n  }\n  static #_ = this.ɵfac = function AuthGoogleService_Factory(t) {\n    return new (t || AuthGoogleService)(i0.ɵɵinject(i1.OAuthService), i0.ɵɵinject(AuthGoogleService), i0.ɵɵinject(i2.JwtHelperService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGoogleService,\n    factory: AuthGoogleService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { AuthGoogleService };","map":{"version":3,"names":["AuthGoogleService","constructor","oauthService","_authGoogleService","jwtHelper","initLogin","usuarioEstaVerificado","token","getIdToken","decodedToken","decodeToken","email_verified","usuarioEstaAutenticado","hasValidAccessToken","config","issuer","strictDiscoveryDocumentValidation","clientId","redirectUri","window","location","origin","scope","configure","setupAutomaticSilentRefresh","loadDiscoveryDocumentAndTryLogin","login","initLoginFlow","logout","logOut","getProfile","getIdentityClaims","_","i0","ɵɵinject","i1","OAuthService","i2","JwtHelperService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\core\\services\\auth-google.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { AuthConfig, OAuthService } from 'angular-oauth2-oidc'\r\nimport { JwtHelperService } from '@auth0/angular-jwt';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthGoogleService {\r\n  constructor(private oauthService: OAuthService, \r\n    private _authGoogleService: AuthGoogleService,\r\n    private jwtHelper: JwtHelperService)\r\n  {\r\n    this.initLogin();\r\n  }\r\n\r\npublic usuarioEstaVerificado(): boolean {\r\n  const token = this._authGoogleService.getIdToken(); // Asegúrate de tener un método que exponga el ID token de manera segura\r\n  if (!token) return false;\r\n\r\n  const decodedToken = this.jwtHelper.decodeToken(token);\r\n  return !!decodedToken.email_verified;\r\n}\r\n\r\n  \r\n\r\n  public usuarioEstaAutenticado(): boolean {\r\n    return this.oauthService.hasValidAccessToken();\r\n  }\r\n\r\n  initLogin() {\r\n    const config: AuthConfig = {\r\n      issuer: 'https://accounts.google.com',\r\n      strictDiscoveryDocumentValidation: false,\r\n      clientId: '386095253324-84qs8hfs2j1lccd29hlfr9393s27h5fc.apps.googleusercontent.com',\r\n      redirectUri: window.location.origin + '/dashboard',\r\n      scope: 'openid profile email',\r\n    }\r\n\r\n    this.oauthService.configure(config);\r\n    this.oauthService.setupAutomaticSilentRefresh();\r\n    this.oauthService.loadDiscoveryDocumentAndTryLogin();\r\n  }\r\n\r\n  login() {\r\n    this.oauthService.initLoginFlow();\r\n  }\r\n\r\n  logout() {\r\n    this.oauthService.logOut();\r\n  }\r\n\r\n  getProfile() {\r\n    return this.oauthService.getIdentityClaims();\r\n  }\r\n\r\n  // Dentro de AuthGoogleService\r\n  public getIdToken(): string | null {\r\n    return this.oauthService.getIdToken();\r\n  }\r\n\r\n\r\n}\r\n"],"mappings":";;;AAIA,MAGaA,iBAAiB;EAC5BC,YAAoBC,YAA0B,EACpCC,kBAAqC,EACrCC,SAA2B;IAFjB,KAAAF,YAAY,GAAZA,YAAY;IACtB,KAAAC,kBAAkB,GAAlBA,kBAAkB;IAClB,KAAAC,SAAS,GAATA,SAAS;IAEjB,IAAI,CAACC,SAAS,EAAE;EAClB;EAEKC,qBAAqBA,CAAA;IAC1B,MAAMC,KAAK,GAAG,IAAI,CAACJ,kBAAkB,CAACK,UAAU,EAAE,CAAC,CAAC;IACpD,IAAI,CAACD,KAAK,EAAE,OAAO,KAAK;IAExB,MAAME,YAAY,GAAG,IAAI,CAACL,SAAS,CAACM,WAAW,CAACH,KAAK,CAAC;IACtD,OAAO,CAAC,CAACE,YAAY,CAACE,cAAc;EACtC;EAISC,sBAAsBA,CAAA;IAC3B,OAAO,IAAI,CAACV,YAAY,CAACW,mBAAmB,EAAE;EAChD;EAEAR,SAASA,CAAA;IACP,MAAMS,MAAM,GAAe;MACzBC,MAAM,EAAE,6BAA6B;MACrCC,iCAAiC,EAAE,KAAK;MACxCC,QAAQ,EAAE,0EAA0E;MACpFC,WAAW,EAAEC,MAAM,CAACC,QAAQ,CAACC,MAAM,GAAG,YAAY;MAClDC,KAAK,EAAE;KACR;IAED,IAAI,CAACpB,YAAY,CAACqB,SAAS,CAACT,MAAM,CAAC;IACnC,IAAI,CAACZ,YAAY,CAACsB,2BAA2B,EAAE;IAC/C,IAAI,CAACtB,YAAY,CAACuB,gCAAgC,EAAE;EACtD;EAEAC,KAAKA,CAAA;IACH,IAAI,CAACxB,YAAY,CAACyB,aAAa,EAAE;EACnC;EAEAC,MAAMA,CAAA;IACJ,IAAI,CAAC1B,YAAY,CAAC2B,MAAM,EAAE;EAC5B;EAEAC,UAAUA,CAAA;IACR,OAAO,IAAI,CAAC5B,YAAY,CAAC6B,iBAAiB,EAAE;EAC9C;EAEA;EACOvB,UAAUA,CAAA;IACf,OAAO,IAAI,CAACN,YAAY,CAACM,UAAU,EAAE;EACvC;EAAC,QAAAwB,CAAA,G;qBAnDUhC,iBAAiB,EAAAiC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,YAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAlC,iBAAA,GAAAiC,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,gBAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAjBvC,iBAAiB;IAAAwC,OAAA,EAAjBxC,iBAAiB,CAAAyC,IAAA;IAAAC,UAAA,EAFhB;EAAM;;SAEP1C,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}