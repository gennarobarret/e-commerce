{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/initial-config.service\";\nimport * as i2 from \"@angular/router\";\nclass MasterAdminSetupGuard {\n  constructor(initialConfigService, router) {\n    this.initialConfigService = initialConfigService;\n    this.router = router;\n  }\n  canActivate() {\n    return this.initialConfigService.InitialCheck().pipe(map(response => {\n      if (response.setupRequired && !response.verificationRequired) {\n        // Si ya existe un masterAdministrator pero falta la verificación,\n        // redirige a la página de verificación pendiente.\n        this.router.navigate(['/initial-config/verification-pending']);\n        return false;\n      }\n      // Permite el acceso si no se cumple la condición anterior.\n      return true;\n    }));\n  }\n  static #_ = this.ɵfac = function MasterAdminSetupGuard_Factory(t) {\n    return new (t || MasterAdminSetupGuard)(i0.ɵɵinject(i1.InitialConfigService), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MasterAdminSetupGuard,\n    factory: MasterAdminSetupGuard.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { MasterAdminSetupGuard };","map":{"version":3,"names":["map","MasterAdminSetupGuard","constructor","initialConfigService","router","canActivate","InitialCheck","pipe","response","setupRequired","verificationRequired","navigate","_","i0","ɵɵinject","i1","InitialConfigService","i2","Router","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\core\\guards\\master-admin-setup.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { InitialConfigService } from '../services/initial-config.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MasterAdminSetupGuard implements CanActivate {\n  constructor(\n    private initialConfigService: InitialConfigService,\n    private router: Router\n  ) { }\n\n  canActivate(): Observable<boolean> | Promise<boolean> | boolean {\n    return this.initialConfigService.InitialCheck().pipe(\n      map((response) => {\n        if (response.setupRequired && !response.verificationRequired) {\n          // Si ya existe un masterAdministrator pero falta la verificación,\n          // redirige a la página de verificación pendiente.\n          this.router.navigate(['/initial-config/verification-pending']);\n          return false;\n        }\n        // Permite el acceso si no se cumple la condición anterior.\n        return true;\n      })\n    );\n  }\n}\n"],"mappings":"AAGA,SAASA,GAAG,QAAQ,gBAAgB;;;;AAGpC,MAGaC,qBAAqB;EAChCC,YACUC,oBAA0C,EAC1CC,MAAc;IADd,KAAAD,oBAAoB,GAApBA,oBAAoB;IACpB,KAAAC,MAAM,GAANA,MAAM;EACZ;EAEJC,WAAWA,CAAA;IACT,OAAO,IAAI,CAACF,oBAAoB,CAACG,YAAY,EAAE,CAACC,IAAI,CAClDP,GAAG,CAAEQ,QAAQ,IAAI;MACf,IAAIA,QAAQ,CAACC,aAAa,IAAI,CAACD,QAAQ,CAACE,oBAAoB,EAAE;QAC5D;QACA;QACA,IAAI,CAACN,MAAM,CAACO,QAAQ,CAAC,CAAC,sCAAsC,CAAC,CAAC;QAC9D,OAAO,KAAK;;MAEd;MACA,OAAO,IAAI;IACb,CAAC,CAAC,CACH;EACH;EAAC,QAAAC,CAAA,G;qBAnBUX,qBAAqB,EAAAY,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,oBAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;WAArBlB,qBAAqB;IAAAmB,OAAA,EAArBnB,qBAAqB,CAAAoB,IAAA;IAAAC,UAAA,EAFpB;EAAM;;SAEPrB,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}