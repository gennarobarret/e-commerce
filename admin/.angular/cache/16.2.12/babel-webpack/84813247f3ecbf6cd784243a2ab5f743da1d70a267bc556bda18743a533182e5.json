{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet LoginComponent = class LoginComponent {\n  constructor(formBuilder, authService, router, toastService, _authGoogleService) {\n    this.formBuilder = formBuilder;\n    this.authService = authService;\n    this.router = router;\n    this.toastService = toastService;\n    this._authGoogleService = _authGoogleService;\n    this.submitted = false;\n    this.loginForm = this.formBuilder.group({\n      userName: ['', [Validators.required]],\n      password: ['', Validators.required]\n    });\n  }\n  get f() {\n    return this.loginForm.controls;\n  }\n  ngOnInit() {\n    if (this.authService.getToken()) {\n      this.router.navigate(['']);\n    }\n  }\n  initGoogleSignIn() {\n    this._authGoogleService.login();\n  }\n  login() {\n    this.submitted = true;\n    if (this.loginForm.valid) {\n      this.authService.loginUser(this.loginForm.value).subscribe(response => {}, error => {\n        let errorMessage = 'Invalid credentials';\n        if (error.error && error.error.message) {\n          errorMessage = error.error.message;\n        }\n        this.toastService.showToast('error', errorMessage);\n      });\n      this.handleSuccessfulLogin();\n    } else {\n      this.toastService.showToast('error', 'Missing form data');\n    }\n  }\n  handleSuccessfulLogin() {\n    this.authService.loginSuccessObservable.subscribe(success => {\n      if (success) {\n        this.toastService.showToast('success', 'Welcome ' + this.loginForm.value.userName);\n      }\n    });\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"names":["Component","ChangeDetectionStrategy","Validators","LoginComponent","constructor","formBuilder","authService","router","toastService","_authGoogleService","submitted","loginForm","group","userName","required","password","f","controls","ngOnInit","getToken","navigate","initGoogleSignIn","login","valid","loginUser","value","subscribe","response","error","errorMessage","message","showToast","handleSuccessfulLogin","loginSuccessObservable","success","__decorate","selector","templateUrl","styleUrls","changeDetection","OnPush"],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\modules\\auth\\login\\login.component.ts"],"sourcesContent":["import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/core/services/auth.service';\nimport { ToastService } from 'src/app/shared/services/toast.service';\nimport { LoginCredentials } from 'src/app/core/models';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LoginComponent implements OnInit {\n  public loginForm: FormGroup;\n  submitted = false;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private authService: AuthService,\n    private router: Router,\n    private toastService: ToastService,\n    private _authGoogleService\n  ) {\n    \n    this.loginForm = this.formBuilder.group({\n      userName: ['', [Validators.required]],\n      password: ['', Validators.required],\n    });\n\n  }\n\n  get f() {\n    return this.loginForm.controls;\n  }\n\n  ngOnInit(): void {\n    if (this.authService.getToken()) {\n      this.router.navigate(['']);\n    }\n  }\n\n  initGoogleSignIn() {\n    this._authGoogleService.login();\n  }\n\n  login() {\n    this.submitted = true;\n    if (this.loginForm.valid) {\n      this.authService\n        .loginUser(this.loginForm.value as LoginCredentials)\n        .subscribe(\n          (response) => {\n          },\n          (error: HttpErrorResponse) => {\n            let errorMessage = 'Invalid credentials';\n            if (error.error && error.error.message) {\n              errorMessage = error.error.message;\n            }\n            this.toastService.showToast('error', errorMessage);\n          }\n        );\n      this.handleSuccessfulLogin();\n\n    } else {\n      this.toastService.showToast('error', 'Missing form data');\n    }\n  }\n\n  private handleSuccessfulLogin() {\n    this.authService.loginSuccessObservable.subscribe((success: boolean) => {\n      if (success) {\n        this.toastService.showToast(\n          'success',\n          'Welcome ' + this.loginForm.value.userName\n        );\n      }\n    });\n  }\n\n}\n"],"mappings":";AAAA,SAASA,SAAS,EAAUC,uBAAuB,QAAQ,eAAe;AAE1E,SAAiCC,UAAU,QAAQ,gBAAgB;AAYnE,IAAaC,cAAc,GAA3B,MAAaA,cAAc;EAIzBC,YACUC,WAAwB,EACxBC,WAAwB,EACxBC,MAAc,EACdC,YAA0B,EAC1BC,kBAAkB;IAJlB,KAAAJ,WAAW,GAAXA,WAAW;IACX,KAAAC,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,YAAY,GAAZA,YAAY;IACZ,KAAAC,kBAAkB,GAAlBA,kBAAkB;IAP5B,KAAAC,SAAS,GAAG,KAAK;IAUf,IAAI,CAACC,SAAS,GAAG,IAAI,CAACN,WAAW,CAACO,KAAK,CAAC;MACtCC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACX,UAAU,CAACY,QAAQ,CAAC,CAAC;MACrCC,QAAQ,EAAE,CAAC,EAAE,EAAEb,UAAU,CAACY,QAAQ;KACnC,CAAC;EAEJ;EAEA,IAAIE,CAACA,CAAA;IACH,OAAO,IAAI,CAACL,SAAS,CAACM,QAAQ;EAChC;EAEAC,QAAQA,CAAA;IACN,IAAI,IAAI,CAACZ,WAAW,CAACa,QAAQ,EAAE,EAAE;MAC/B,IAAI,CAACZ,MAAM,CAACa,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;;EAE9B;EAEAC,gBAAgBA,CAAA;IACd,IAAI,CAACZ,kBAAkB,CAACa,KAAK,EAAE;EACjC;EAEAA,KAAKA,CAAA;IACH,IAAI,CAACZ,SAAS,GAAG,IAAI;IACrB,IAAI,IAAI,CAACC,SAAS,CAACY,KAAK,EAAE;MACxB,IAAI,CAACjB,WAAW,CACbkB,SAAS,CAAC,IAAI,CAACb,SAAS,CAACc,KAAyB,CAAC,CACnDC,SAAS,CACPC,QAAQ,IAAI,CACb,CAAC,EACAC,KAAwB,IAAI;QAC3B,IAAIC,YAAY,GAAG,qBAAqB;QACxC,IAAID,KAAK,CAACA,KAAK,IAAIA,KAAK,CAACA,KAAK,CAACE,OAAO,EAAE;UACtCD,YAAY,GAAGD,KAAK,CAACA,KAAK,CAACE,OAAO;;QAEpC,IAAI,CAACtB,YAAY,CAACuB,SAAS,CAAC,OAAO,EAAEF,YAAY,CAAC;MACpD,CAAC,CACF;MACH,IAAI,CAACG,qBAAqB,EAAE;KAE7B,MAAM;MACL,IAAI,CAACxB,YAAY,CAACuB,SAAS,CAAC,OAAO,EAAE,mBAAmB,CAAC;;EAE7D;EAEQC,qBAAqBA,CAAA;IAC3B,IAAI,CAAC1B,WAAW,CAAC2B,sBAAsB,CAACP,SAAS,CAAEQ,OAAgB,IAAI;MACrE,IAAIA,OAAO,EAAE;QACX,IAAI,CAAC1B,YAAY,CAACuB,SAAS,CACzB,SAAS,EACT,UAAU,GAAG,IAAI,CAACpB,SAAS,CAACc,KAAK,CAACZ,QAAQ,CAC3C;;IAEL,CAAC,CAAC;EACJ;CAED;AAnEYV,cAAc,GAAAgC,UAAA,EAN1BnC,SAAS,CAAC;EACToC,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB,CAAC;EACpCC,eAAe,EAAEtC,uBAAuB,CAACuC;CAC1C,CAAC,C,EACWrC,cAAc,CAmE1B;SAnEYA,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}