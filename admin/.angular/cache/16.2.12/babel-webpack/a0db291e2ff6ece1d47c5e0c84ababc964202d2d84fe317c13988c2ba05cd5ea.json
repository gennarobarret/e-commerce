{"ast":null,"code":"\"use strict\";\n\n// auth.service.ts\n// import { Injectable } from '@angular/core';\n// import { HttpClient, HttpHeaders } from '@angular/common/http';\n// import { Router } from '@angular/router';\n// import { JwtHelperService } from '@auth0/angular-jwt';\n// import { LoginCredentials } from 'src/app/core/models';\n// import { GLOBAL } from '../config/GLOBAL';\n// import { Observable, throwError, Subject, EMPTY, of } from 'rxjs';\n// import { tap, catchError } from 'rxjs/operators';\n// import { ApiResponse } from '../models/api-response.interface';\n// import { User, UserWithToken } from '../models/user.interface';\n// import { ForgotPasswordRequest } from '../models/forgot-password-request.interface';\n// @Injectable({\n//   providedIn: 'root',\n// })\n// export class AuthService {\n//   private url: string = GLOBAL.url;\n//   private loginSuccessSubject = new Subject<boolean>();\n//   public loginSuccessObservable = this.loginSuccessSubject.asObservable();\n//   constructor(private _http: HttpClient, private _router: Router) { }\n//   private handleError(error: any): Observable<never> {\n//     let errorMessage = error.error.message || 'An error occurred';\n//     return throwError(() => new Error(errorMessage));\n//   }\n//   private storeToken(token: string): void {\n//     localStorage.setItem('token', token);\n//   }\n//   private removeToken(): void {\n//     localStorage.removeItem('token');\n//   }\n//   getToken(): string | null {\n//     return localStorage.getItem('token');\n//   }\n//   isAuthenticated(allowRoles: string[]): boolean {\n//     const token = this.getToken();\n//     if (!token) return false;\n//     try {\n//       const helper = new JwtHelperService();\n//       const decodedToken = helper.decodeToken(token);\n//       if (!decodedToken || !decodedToken['role']) {\n//         this.logout();\n//         return false;\n//       }\n//       return allowRoles.includes(decodedToken['role']);\n//     } catch (error) {\n//       this.logout();\n//       return false;\n//     }\n//   }\n//   loginUser(credentials: LoginCredentials): Observable<ApiResponse<UserWithToken>> {\n//     return this._http\n//       .post<ApiResponse<UserWithToken>>(`${this.url}loginUser`, credentials)\n//       .pipe(\n//         tap(response => {\n//           if (response.data && response.data.token) {\n//             console.log(\"🚀 ~ AuthService ~ loginUser ~ response.data:\", response.data)\n//             console.log(\"🚀 ~ AuthService ~ loginUser ~ response.data.token:\", response.data.token)\n//             // this.storeToken(response.data.token);\n//             // this._router.navigate(['/']);\n//             // this.loginSuccessSubject.next(true);\n//           }\n//         }),\n//         catchError(error => this.handleError(error))\n//       );\n//   }\n//   // forgotPassword(request: ForgotPasswordRequest): Observable<ApiResponse<any>> {\n//   //   // ... tu lógica aquí\n//   // }\n//   createMasterAdmin(data: any): Observable<any> {\n//     return this._http.post(`${this.url}createMasterAdmin`, data);\n//   }\n//   activateAccount(token: string): Observable<any> {\n//     const url = `${this.url}/activation/${token}`;\n//     return this._http.get(url).pipe(\n//       catchError(error => {\n//         console.error('Error activating account:', error);\n//         return of(null);\n//       })\n//     );\n//   }\n//   resendVerificationEmail(emailAddress: string): Observable<any> {\n//     return this._http.post(`${this.url}/resendVerificationEmail`, { emailAddress })\n//       .pipe(\n//         catchError(error => {\n//           console.error('Error resending the verification email:', error);\n//           return of(null);\n//         })\n//       );\n//   }\n//   // En AuthService\n//   authenticateWithGoogle(token: string): Observable<any> {\n//     return this._http.post(`${this.url}auth/google`, { token }).pipe(\n//       tap((response: any) => {\n//         // Asumiendo que la respuesta del backend incluye el token en response.token\n//         this.storeToken(response.token); // Almacenar el token usando un método del servicio\n//         // Aquí puedes agregar cualquier otra lógica necesaria después de la autenticación exitosa\n//       }),\n//       catchError(error => this.handleError(error))\n//     );\n//   }\n//   logout(): void {\n//     this.removeToken();\n//     this._router.navigate(['/auth/login']);\n//   }\n// }","map":{"version":3,"names":[],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\core\\services\\auth.service.ts"],"sourcesContent":["// auth.service.ts\n\n// import { Injectable } from '@angular/core';\n// import { HttpClient, HttpHeaders } from '@angular/common/http';\n// import { Router } from '@angular/router';\n// import { JwtHelperService } from '@auth0/angular-jwt';\n// import { LoginCredentials } from 'src/app/core/models';\n// import { GLOBAL } from '../config/GLOBAL';\n// import { Observable, throwError, Subject, EMPTY, of } from 'rxjs';\n// import { tap, catchError } from 'rxjs/operators';\n// import { ApiResponse } from '../models/api-response.interface';\n// import { User, UserWithToken } from '../models/user.interface';\n// import { ForgotPasswordRequest } from '../models/forgot-password-request.interface';\n// @Injectable({\n//   providedIn: 'root',\n// })\n\n// export class AuthService {\n//   private url: string = GLOBAL.url;\n//   private loginSuccessSubject = new Subject<boolean>();\n//   public loginSuccessObservable = this.loginSuccessSubject.asObservable();\n\n//   constructor(private _http: HttpClient, private _router: Router) { }\n\n\n//   private handleError(error: any): Observable<never> {\n//     let errorMessage = error.error.message || 'An error occurred';\n//     return throwError(() => new Error(errorMessage));\n//   }\n\n//   private storeToken(token: string): void {\n//     localStorage.setItem('token', token);\n//   }\n\n//   private removeToken(): void {\n//     localStorage.removeItem('token');\n//   }\n\n//   getToken(): string | null {\n//     return localStorage.getItem('token');\n//   }\n\n//   isAuthenticated(allowRoles: string[]): boolean {\n//     const token = this.getToken();\n//     if (!token) return false;\n//     try {\n//       const helper = new JwtHelperService();\n//       const decodedToken = helper.decodeToken(token);\n//       if (!decodedToken || !decodedToken['role']) {\n//         this.logout();\n//         return false;\n//       }\n//       return allowRoles.includes(decodedToken['role']);\n//     } catch (error) {\n//       this.logout();\n//       return false;\n//     }\n//   }\n\n//   loginUser(credentials: LoginCredentials): Observable<ApiResponse<UserWithToken>> {\n//     return this._http\n//       .post<ApiResponse<UserWithToken>>(`${this.url}loginUser`, credentials)\n//       .pipe(\n//         tap(response => {\n//           if (response.data && response.data.token) {\n//             console.log(\"🚀 ~ AuthService ~ loginUser ~ response.data:\", response.data)\n//             console.log(\"🚀 ~ AuthService ~ loginUser ~ response.data.token:\", response.data.token)\n//             // this.storeToken(response.data.token);\n//             // this._router.navigate(['/']);\n//             // this.loginSuccessSubject.next(true);\n//           }\n//         }),\n//         catchError(error => this.handleError(error))\n//       );\n//   }\n\n//   // forgotPassword(request: ForgotPasswordRequest): Observable<ApiResponse<any>> {\n//   //   // ... tu lógica aquí\n//   // }\n\n\n//   createMasterAdmin(data: any): Observable<any> {\n//     return this._http.post(`${this.url}createMasterAdmin`, data);\n//   }\n\n//   activateAccount(token: string): Observable<any> {\n//     const url = `${this.url}/activation/${token}`;\n//     return this._http.get(url).pipe(\n//       catchError(error => {\n//         console.error('Error activating account:', error);\n//         return of(null);\n//       })\n//     );\n//   }\n\n//   resendVerificationEmail(emailAddress: string): Observable<any> {\n//     return this._http.post(`${this.url}/resendVerificationEmail`, { emailAddress })\n//       .pipe(\n//         catchError(error => {\n//           console.error('Error resending the verification email:', error);\n//           return of(null);\n//         })\n//       );\n//   }\n\n//   // En AuthService\n//   authenticateWithGoogle(token: string): Observable<any> {\n//     return this._http.post(`${this.url}auth/google`, { token }).pipe(\n//       tap((response: any) => {\n//         // Asumiendo que la respuesta del backend incluye el token en response.token\n//         this.storeToken(response.token); // Almacenar el token usando un método del servicio\n//         // Aquí puedes agregar cualquier otra lógica necesaria después de la autenticación exitosa\n//       }),\n//       catchError(error => this.handleError(error))\n//     );\n//   }\n\n//   logout(): void {\n//     this.removeToken();\n//     this._router.navigate(['/auth/login']);\n//   }\n\n// }\n"],"mappings},"metadata":{},"sourceType":"script","externalDependencies":[]}