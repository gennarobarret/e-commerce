{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common\";\nfunction AdminDashboardComponent_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Welcome, \", ctx_r0.userProfile.name, \"\");\n  }\n}\nclass AdminDashboardComponent {\n  constructor(router) {\n    this.router = router;\n  }\n  ngOnInit() {\n    // Suponiendo que esta es la respuesta de inicio de sesión que has mostrado\n    const userResponse = {\n      clientId: '142003720401-scrooc5tq3p8ht8m377p67kdrt3ablei.apps.googleusercontent.com',\n      credential: 'eyJhbGciOiJSUzI1NiIsImtpZCI6ImVkODA2ZjE4NDJiNTg4MD…EqKpsp7Pnr2gNLdq9Ulq7SJQGAPDaj7PxY-SmHytgq3Dpu1-Q',\n      select_by: 'user_1tap'\n    };\n    // Aquí es donde decides qué parte de esta respuesta necesitas almacenar\n    // Por ejemplo, podrías querer almacenar el objeto completo o solo ciertas propiedades\n    sessionStorage.setItem(\"loggedInUser\", JSON.stringify(userResponse));\n    // Ahora, userProfile se establece con la información almacenada o con un valor predeterminado\n    this.userProfile = JSON.parse(sessionStorage.getItem(\"loggedInUser\") || \"{}\");\n  }\n  handleSignOut() {\n    // Tu lógica existente para manejar el cierre de sesión\n    handleSignout();\n    sessionStorage.removeItem(\"loggedInUser\");\n    this.router.navigate([\"/auth/login\"]).then(() => {\n      window.location.reload();\n    });\n  }\n  static #_ = this.ɵfac = function AdminDashboardComponent_Factory(t) {\n    return new (t || AdminDashboardComponent)(i0.ɵɵdirectiveInject(i1.Router));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AdminDashboardComponent,\n    selectors: [[\"app-admin-dashboard\"]],\n    decls: 8,\n    vars: 1,\n    consts: [[4, \"ngIf\"], [\"id\", \"signout-button\", 3, \"click\"]],\n    template: function AdminDashboardComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h2\");\n        i0.ɵɵtext(1, \"User logged in successfully\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(2, \"br\");\n        i0.ɵɵelementStart(3, \"p\");\n        i0.ɵɵtext(4, \"dashboard works!\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(5, AdminDashboardComponent_ng_container_5_Template, 3, 1, \"ng-container\", 0);\n        i0.ɵɵelementStart(6, \"button\", 1);\n        i0.ɵɵlistener(\"click\", function AdminDashboardComponent_Template_button_click_6_listener() {\n          return ctx.handleSignOut();\n        });\n        i0.ɵɵtext(7, \"Sign Out\");\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.userProfile);\n      }\n    },\n    dependencies: [i2.NgIf],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}\nexport { AdminDashboardComponent };","map":{"version":3,"names":["i0","ɵɵelementContainerStart","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelementContainerEnd","ɵɵadvance","ɵɵtextInterpolate1","ctx_r0","userProfile","name","AdminDashboardComponent","constructor","router","ngOnInit","userResponse","clientId","credential","select_by","sessionStorage","setItem","JSON","stringify","parse","getItem","handleSignOut","handleSignout","removeItem","navigate","then","window","location","reload","_","ɵɵdirectiveInject","i1","Router","_2","selectors","decls","vars","consts","template","AdminDashboardComponent_Template","rf","ctx","ɵɵelement","ɵɵtemplate","AdminDashboardComponent_ng_container_5_Template","ɵɵlistener","AdminDashboardComponent_Template_button_click_6_listener","ɵɵproperty"],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\modules\\admin\\dashboards\\admin-dashboard\\admin-dashboard.component.ts","C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\modules\\admin\\dashboards\\admin-dashboard\\admin-dashboard.component.html"],"sourcesContent":["import { Component, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\n\n@Component({\n  selector: 'app-admin-dashboard',\n  templateUrl: './admin-dashboard.component.html',\n  styleUrls: ['./admin-dashboard.component.css']\n})\nexport class AdminDashboardComponent implements OnInit {\n  constructor(private router: Router) { }\n  userProfile: any;\n\n  ngOnInit() {\n    // Suponiendo que esta es la respuesta de inicio de sesión que has mostrado\n    const userResponse = {\n      clientId: '142003720401-scrooc5tq3p8ht8m377p67kdrt3ablei.apps.googleusercontent.com',\n      credential: 'eyJhbGciOiJSUzI1NiIsImtpZCI6ImVkODA2ZjE4NDJiNTg4MD…EqKpsp7Pnr2gNLdq9Ulq7SJQGAPDaj7PxY-SmHytgq3Dpu1-Q',\n      select_by: 'user_1tap'\n    };\n\n    // Aquí es donde decides qué parte de esta respuesta necesitas almacenar\n    // Por ejemplo, podrías querer almacenar el objeto completo o solo ciertas propiedades\n    sessionStorage.setItem(\"loggedInUser\", JSON.stringify(userResponse));\n\n    // Ahora, userProfile se establece con la información almacenada o con un valor predeterminado\n    this.userProfile = JSON.parse(sessionStorage.getItem(\"loggedInUser\") || \"{}\");\n  }\n\n  handleSignOut() {\n    // Tu lógica existente para manejar el cierre de sesión\n    handleSignout();\n    sessionStorage.removeItem(\"loggedInUser\");\n    this.router.navigate([\"/auth/login\"]).then(() => {\n      window.location.reload();\n    });\n  }\n}\n\n\n// import { Component, OnInit } from '@angular/core';\n// import { Router } from '@angular/router';\n// import { AuthGoogleService } from 'src/app/core/services/auth-google.service';\n// @Component({\n//   selector: 'app-admin-dashboard',\n//   templateUrl: './admin-dashboard.component.html',\n//   styleUrls: ['./admin-dashboard.component.css']\n// })\n// export class AdminDashboardComponent implements OnInit {\n//   isAuthenticated: boolean = false;\n\n//   constructor(\n//     private authGoogleService: AuthGoogleService,\n//     private router: Router\n//   ) { }\n\n//   ngOnInit() {\n//     this.authGoogleService.initLogin();\n//   }\n\n//   showData() {\n//     const data = JSON.stringify(this.authGoogleService.getProfile());\n//     console.log(data);\n//   }\n\n//   logOut() {\n//     this.authGoogleService.logout();\n//     this.router.navigate(['auth/login']);\n//   }\n\n// }\n","<h2>User logged in successfully</h2>\n<br />\n<p>dashboard works!</p>\n<ng-container *ngIf=\"userProfile\">\n    <div>Welcome, {{ userProfile.name }}</div>\n    <!-- <app-user-card [userProfile]=\"userProfile\"></app-user-card> -->\n</ng-container>\n<button id=\"signout-button\" (click)=\"handleSignOut()\">Sign Out</button>"],"mappings":";;;;;ICGAA,EAAA,CAAAC,uBAAA,GAAkC;IAC9BD,EAAA,CAAAE,cAAA,UAAK;IAAAF,EAAA,CAAAG,MAAA,GAA+B;IAAAH,EAAA,CAAAI,YAAA,EAAM;IAE9CJ,EAAA,CAAAK,qBAAA,EAAe;;;;IAFNL,EAAA,CAAAM,SAAA,GAA+B;IAA/BN,EAAA,CAAAO,kBAAA,cAAAC,MAAA,CAAAC,WAAA,CAAAC,IAAA,KAA+B;;;ADDxC,MAKaC,uBAAuB;EAClCC,YAAoBC,MAAc;IAAd,KAAAA,MAAM,GAANA,MAAM;EAAY;EAGtCC,QAAQA,CAAA;IACN;IACA,MAAMC,YAAY,GAAG;MACnBC,QAAQ,EAAE,0EAA0E;MACpFC,UAAU,EAAE,sGAAsG;MAClHC,SAAS,EAAE;KACZ;IAED;IACA;IACAC,cAAc,CAACC,OAAO,CAAC,cAAc,EAAEC,IAAI,CAACC,SAAS,CAACP,YAAY,CAAC,CAAC;IAEpE;IACA,IAAI,CAACN,WAAW,GAAGY,IAAI,CAACE,KAAK,CAACJ,cAAc,CAACK,OAAO,CAAC,cAAc,CAAC,IAAI,IAAI,CAAC;EAC/E;EAEAC,aAAaA,CAAA;IACX;IACAC,aAAa,EAAE;IACfP,cAAc,CAACQ,UAAU,CAAC,cAAc,CAAC;IACzC,IAAI,CAACd,MAAM,CAACe,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC,CAACC,IAAI,CAAC,MAAK;MAC9CC,MAAM,CAACC,QAAQ,CAACC,MAAM,EAAE;IAC1B,CAAC,CAAC;EACJ;EAAC,QAAAC,CAAA,G;qBA3BUtB,uBAAuB,EAAAX,EAAA,CAAAkC,iBAAA,CAAAC,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAvB1B,uBAAuB;IAAA2B,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,iCAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCRpC5C,EAAA,CAAAE,cAAA,SAAI;QAAAF,EAAA,CAAAG,MAAA,kCAA2B;QAAAH,EAAA,CAAAI,YAAA,EAAK;QACpCJ,EAAA,CAAA8C,SAAA,SAAM;QACN9C,EAAA,CAAAE,cAAA,QAAG;QAAAF,EAAA,CAAAG,MAAA,uBAAgB;QAAAH,EAAA,CAAAI,YAAA,EAAI;QACvBJ,EAAA,CAAA+C,UAAA,IAAAC,+CAAA,0BAGe;QACfhD,EAAA,CAAAE,cAAA,gBAAsD;QAA1BF,EAAA,CAAAiD,UAAA,mBAAAC,yDAAA;UAAA,OAASL,GAAA,CAAApB,aAAA,EAAe;QAAA,EAAC;QAACzB,EAAA,CAAAG,MAAA,eAAQ;QAAAH,EAAA,CAAAI,YAAA,EAAS;;;QAJxDJ,EAAA,CAAAM,SAAA,GAAiB;QAAjBN,EAAA,CAAAmD,UAAA,SAAAN,GAAA,CAAApC,WAAA,CAAiB;;;;;;;SDKnBE,uBAAuB"},"metadata":{},"sourceType":"module","externalDependencies":[]}