{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"angular-oauth2-oidc\";\nclass AuthGoogleService {\n  constructor(oauthService) {\n    this.oauthService = oauthService;\n    this.initLogin();\n  }\n  authenticateUser() {\n    const googleAuth = JSON.parse(localStorage.getItem('googleAuth'));\n    if (googleAuth) {\n      const payload = this.decodeJWTToken(googleAuth.credential);\n      // Aquí puedes usar la información de payload, como el email del usuario, para autenticar en tu backend\n    }\n  }\n\n  decodeJWTToken(token) {\n    const base64Url = token.split('.')[1];\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    const jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {\n      return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n    }).join(''));\n    return JSON.parse(jsonPayload);\n  }\n  static #_ = this.ɵfac = function AuthGoogleService_Factory(t) {\n    return new (t || AuthGoogleService)(i0.ɵɵinject(i1.OAuthService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGoogleService,\n    factory: AuthGoogleService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { AuthGoogleService };","map":{"version":3,"names":["AuthGoogleService","constructor","oauthService","initLogin","authenticateUser","googleAuth","JSON","parse","localStorage","getItem","payload","decodeJWTToken","credential","token","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","_","i0","ɵɵinject","i1","OAuthService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\core\\services\\auth-google.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { AuthConfig, OAuthService } from 'angular-oauth2-oidc'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGoogleService {\n\n  constructor(private oauthService: OAuthService) {\n    this.initLogin();\n  }\n\n  public authenticateUser() {\n    const googleAuth = JSON.parse(localStorage.getItem('googleAuth'));\n    if (googleAuth) {\n      const payload = this.decodeJWTToken(googleAuth.credential);\n      // Aquí puedes usar la información de payload, como el email del usuario, para autenticar en tu backend\n    }\n  }\n\n  private decodeJWTToken(token: string): any {\n    const base64Url = token.split('.')[1];\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    const jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {\n      return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n    }).join(''));\n\n    return JSON.parse(jsonPayload);\n  }\n\n}\n"],"mappings":";;AAGA,MAGaA,iBAAiB;EAE5BC,YAAoBC,YAA0B;IAA1B,KAAAA,YAAY,GAAZA,YAAY;IAC9B,IAAI,CAACC,SAAS,EAAE;EAClB;EAEOC,gBAAgBA,CAAA;IACrB,MAAMC,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,CAAC;IACjE,IAAIJ,UAAU,EAAE;MACd,MAAMK,OAAO,GAAG,IAAI,CAACC,cAAc,CAACN,UAAU,CAACO,UAAU,CAAC;MAC1D;;EAEJ;;EAEQD,cAAcA,CAACE,KAAa;IAClC,MAAMC,SAAS,GAAGD,KAAK,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACrC,MAAMC,MAAM,GAAGF,SAAS,CAACG,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;IAC9D,MAAMC,WAAW,GAAGC,kBAAkB,CAACC,IAAI,CAACJ,MAAM,CAAC,CAACD,KAAK,CAAC,EAAE,CAAC,CAACM,GAAG,CAAC,UAAUC,CAAC;MAC3E,OAAO,GAAG,GAAG,CAAC,IAAI,GAAGA,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,EAAEC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC9D,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,CAAC;IAEZ,OAAOpB,IAAI,CAACC,KAAK,CAACW,WAAW,CAAC;EAChC;EAAC,QAAAS,CAAA,G;qBAtBU3B,iBAAiB,EAAA4B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,YAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAjBhC,iBAAiB;IAAAiC,OAAA,EAAjBjC,iBAAiB,CAAAkC,IAAA;IAAAC,UAAA,EAFhB;EAAM;;SAEPnC,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}