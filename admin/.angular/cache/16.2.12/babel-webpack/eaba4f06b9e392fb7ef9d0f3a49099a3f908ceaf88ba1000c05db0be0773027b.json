{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"angular-oauth2-oidc\";\nclass AuthGoogleService {\n  constructor(oauthService) {\n    this.oauthService = oauthService;\n    this.initLogin();\n  }\n  initLogin() {\n    const config = {\n      issuer: 'https://accounts.google.com',\n      strictDiscoveryDocumentValidation: false,\n      clientId: '386095253324-hu7fnt80k4mqc18p3ob357f215pa2as5.apps.googleusercontent.com',\n      redirectUri: window.location.origin + '/dashboard',\n      scope: 'openid profile email'\n    };\n    this.oauthService.configure(config);\n    this.oauthService.setupAutomaticSilentRefresh();\n    this.oauthService.loadDiscoveryDocumentAndTryLogin();\n  }\n  login() {\n    this.oauthService.initLoginFlow();\n  }\n  logout() {\n    this.oauthService.logOut();\n  }\n  getProfile() {\n    return this.oauthService.getIdentityClaims();\n  }\n  static #_ = this.ɵfac = function AuthGoogleService_Factory(t) {\n    return new (t || AuthGoogleService)(i0.ɵɵinject(i1.OAuthService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGoogleService,\n    factory: AuthGoogleService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { AuthGoogleService };","map":{"version":3,"names":["AuthGoogleService","constructor","oauthService","initLogin","config","issuer","strictDiscoveryDocumentValidation","clientId","redirectUri","window","location","origin","scope","configure","setupAutomaticSilentRefresh","loadDiscoveryDocumentAndTryLogin","login","initLoginFlow","logout","logOut","getProfile","getIdentityClaims","_","i0","ɵɵinject","i1","OAuthService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Javier\\Documents\\proyectos\\e-commerce\\admin\\src\\app\\core\\services\\auth-google.service.ts"],"sourcesContent":["// import { Injectable } from '@angular/core';\r\n// import { AuthConfig, OAuthService, OAuthErrorEvent } from 'angular-oauth2-oidc';\r\n\r\n// @Injectable({\r\n//   providedIn: 'root',\r\n// })\r\n// export class AuthGoogleService {\r\n\r\n//   private config: AuthConfig = {\r\n//     issuer: 'https://accounts.google.com',\r\n//     redirectUri: window.location.origin + '/dashboard',\r\n//     clientId:\r\n//       '386095253324-hu7fnt80k4mqc18p3ob357f215pa2as5.apps.googleusercontent.com',\r\n//     scope: 'openid profile email',\r\n//     strictDiscoveryDocumentValidation: false\r\n//   };\r\n\r\n//   constructor(private oauthService: OAuthService) {\r\n//     this.initLogin();\r\n//   }\r\n\r\n//   initLogin() {\r\n//     this.oauthService.configure(this.config);\r\n//     this.oauthService.setupAutomaticSilentRefresh();\r\n//     // Carga el documento de descubrimiento y trata de iniciar sesión automáticamente\r\n//     this.oauthService.loadDiscoveryDocumentAndTryLogin().then(() => {\r\n//       if (this.oauthService.hasValidAccessToken()) {\r\n//         console.log('Usuario autenticado');\r\n//         // Aquí puedes, por ejemplo, redirigir al usuario a otra ruta o cargar sus datos de perfil\r\n//       } else {\r\n//         console.log('Usuario no autenticado');\r\n//         // Puedes opcionalmente iniciar el flujo de login aquí o mostrar una UI que invite al usuario a loguearse\r\n//       }\r\n\r\n//     });\r\n\r\n//     // Manejador de eventos de error\r\n//     this.oauthService.events.subscribe(event => {\r\n//       if (event instanceof OAuthErrorEvent) {\r\n//         console.error('OAuthErrorEvent Object:', event);\r\n//       } else {\r\n//         console.log('OAuthEvent', event);\r\n//       }\r\n//     });\r\n//   }\r\n\r\n\r\n//   login() {\r\n//     this.oauthService.initLoginFlow();\r\n//   }\r\n\r\n//   logout() {\r\n//     this.oauthService.logOut();\r\n//   }\r\n\r\n//   getProfile() {\r\n//     if (this.isAuthenticated()) {\r\n//       const claims: any = this.oauthService.getIdentityClaims();\r\n//       if (!claims) {\r\n//         console.log('No se pudo obtener los claims del perfil del usuario.');\r\n//         return null;\r\n//       }\r\n//       return {\r\n//         nombre: claims.name,\r\n//         email: claims.email,\r\n//         imagen: claims.picture,\r\n//       };\r\n//     } else {\r\n//       console.log('Usuario no autenticado.');\r\n//       return null;\r\n//     }\r\n//   }\r\n\r\n//   isAuthenticated(): boolean {\r\n//     return this.oauthService.hasValidAccessToken();\r\n//   }\r\n\r\n// }\r\n\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { AuthConfig, OAuthService } from 'angular-oauth2-oidc'\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthGoogleService {\r\n\r\n  constructor(private oauthService: OAuthService) {\r\n    this.initLogin();\r\n  }\r\n\r\n  initLogin() {\r\n    const config: AuthConfig = {\r\n      issuer: 'https://accounts.google.com',\r\n      strictDiscoveryDocumentValidation: false,\r\n      clientId: '386095253324-hu7fnt80k4mqc18p3ob357f215pa2as5.apps.googleusercontent.com',\r\n      redirectUri: window.location.origin + '/dashboard',\r\n      scope: 'openid profile email',\r\n    }\r\n\r\n    this.oauthService.configure(config);\r\n    this.oauthService.setupAutomaticSilentRefresh();\r\n    this.oauthService.loadDiscoveryDocumentAndTryLogin();\r\n  }\r\n\r\n  login() {\r\n    this.oauthService.initLoginFlow();\r\n  }\r\n\r\n  logout() {\r\n    this.oauthService.logOut();\r\n  }\r\n\r\n  getProfile() {\r\n    return this.oauthService.getIdentityClaims();\r\n  }\r\n\r\n}\r\n"],"mappings":";;AAmFA,MAGaA,iBAAiB;EAE5BC,YAAoBC,YAA0B;IAA1B,KAAAA,YAAY,GAAZA,YAAY;IAC9B,IAAI,CAACC,SAAS,EAAE;EAClB;EAEAA,SAASA,CAAA;IACP,MAAMC,MAAM,GAAe;MACzBC,MAAM,EAAE,6BAA6B;MACrCC,iCAAiC,EAAE,KAAK;MACxCC,QAAQ,EAAE,0EAA0E;MACpFC,WAAW,EAAEC,MAAM,CAACC,QAAQ,CAACC,MAAM,GAAG,YAAY;MAClDC,KAAK,EAAE;KACR;IAED,IAAI,CAACV,YAAY,CAACW,SAAS,CAACT,MAAM,CAAC;IACnC,IAAI,CAACF,YAAY,CAACY,2BAA2B,EAAE;IAC/C,IAAI,CAACZ,YAAY,CAACa,gCAAgC,EAAE;EACtD;EAEAC,KAAKA,CAAA;IACH,IAAI,CAACd,YAAY,CAACe,aAAa,EAAE;EACnC;EAEAC,MAAMA,CAAA;IACJ,IAAI,CAAChB,YAAY,CAACiB,MAAM,EAAE;EAC5B;EAEAC,UAAUA,CAAA;IACR,OAAO,IAAI,CAAClB,YAAY,CAACmB,iBAAiB,EAAE;EAC9C;EAAC,QAAAC,CAAA,G;qBA9BUtB,iBAAiB,EAAAuB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,YAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAjB3B,iBAAiB;IAAA4B,OAAA,EAAjB5B,iBAAiB,CAAA6B,IAAA;IAAAC,UAAA,EAFhB;EAAM;;SAEP9B,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}